/**
 * 信息栏设置界面
 *
 * 负责管理信息栏的设置界面：
 * - 基础设置面板
 * - API配置面板
 * - 主题设置面板
 * - 面板管理界面
 * - 设置导入导出功能
 *
 * @class InfoBarSettings
 */

export class InfoBarSettings {
    constructor(configManager, apiIntegration, eventSystem) {
        console.log('[InfoBarSettings] 🔧 信息栏设置界面初始化开始');

        this.configManager = configManager;
        this.apiIntegration = apiIntegration;
        this.eventSystem = eventSystem;

        // 🔧 注入数据核心引用，供数据导出/导入使用
        this.unifiedDataCore = this.configManager?.dataCore || window.SillyTavernInfobar?.modules?.dataCore || null;

        // 🆕 世界书管理器引用
        this.worldBookManager = null;
        this.worldBookConfigPanel = null;
        this.worldBookConfigPanelInitialized = false;

        // 全局并发/去重控制标记
        this._customAPIProcessing = false; // 自定义API处理进行中
        this._boundHandlers = {}; // 存放已绑定的事件处理器引用，避免重复绑定

        // UI元素引用
        this.container = null;
        this.modal = null;
        this.currentTab = 'basic';

        // 设置面板
        this.panels = {
            basic: null,
            api: null,
            theme: null,
            panels: null,
            advanced: null,
            personal: null,
            interaction: null,
            tasks: null,
            world: null,
            organization: null,
            news: null,
            inventory: null,
            abilities: null,
            plot: null,
            cultivation: null,
            fantasy: null,
            modern: null,
            historical: null,
            magic: null,
            training: null
        };

        // 表单数据
        this.formData = {};

        // 初始化状态
        this.initialized = false;
        this.visible = false;
        this.errorCount = 0;
        this.settingsLoaded = false;
        this.needsSettingsRefresh = false;

        // 绑定方法
        this.init = this.init.bind(this);
        this.show = this.show.bind(this);
        this.hide = this.hide.bind(this);
        this.createUI = this.createUI.bind(this);
        this.loadSettings = this.loadSettings.bind(this);
        this.saveSettings = this.saveSettings.bind(this);

        // 绑定聊天切换事件监听器
        this.bindChatSwitchListener();

        // 🔧 新增：立即应用保存的日志级别设置，无需等待UI界面
        // 异步调用，不阻塞构造函数
        this.applyEarlyLogLevel().catch(error => {
            console.error('[InfoBarSettings] ❌ 早期日志级别设置异常:', error);
        });
    }

    /**
     * 🔧 新增：在扩展加载早期立即应用保存的日志级别设置
     * 无需等待UI界面加载，直接从配置中读取并应用
     */
    async applyEarlyLogLevel() {
        try {
            console.log('[InfoBarSettings] 🔧 开始应用早期日志级别设置...');

            // 使用 SillyTavern 标准存储机制读取配置
            const context = SillyTavern.getContext();
            if (!context || !context.extensionSettings) {
                console.log('[InfoBarSettings] ⚠️ SillyTavern上下文未就绪，跳过早期日志级别设置');
                return;
            }

            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            // 读取调试配置
            const debugEnabled = configs.debug?.enabled || false;
            const logLevel = configs.debug?.logLevel || 'info';

            console.log('[InfoBarSettings] 📊 从配置读取日志设置:', {
                enabled: debugEnabled,
                level: logLevel
            });

            // 立即应用日志级别
            const effectiveLevel = debugEnabled ? logLevel : 'none';
            this.applyConsoleLogLevel(effectiveLevel);

            console.log('[InfoBarSettings] ✅ 早期日志级别设置完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用早期日志级别失败:', error);
        }
    }

    /**
     * 绑定聊天切换事件监听器
     */
    bindChatSwitchListener() {
        try {
            if (this.eventSystem) {
                // 监听聊天切换事件，清理总结显示状态并刷新历史列表
                this.eventSystem.on('summary:chat:changed', (data) => {
                    if (data.action === 'chat_switched') {
                        console.log('[InfoBarSettings] 🔄 收到聊天切换事件，清理总结显示状态并刷新历史列表');
                        this.hideSummaryContent();
                        this.refreshSummaryHistoryOnChatSwitch();
                    }
                });

                console.log('[InfoBarSettings] ✅ 聊天切换事件监听器已绑定');
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定聊天切换事件监听器失败:', error);
        }
    }

    /**
     * 聊天切换时刷新总结历史
     */
    async refreshSummaryHistoryOnChatSwitch() {
        try {
            console.log('[InfoBarSettings] 🔄 聊天切换，刷新总结历史列表');

            // 检查总结面板是否存在
            const summaryHistorySelect = this.modal?.querySelector('#content-summary-history-select');
            if (!summaryHistorySelect) {
                console.log('[InfoBarSettings] ℹ️ 总结历史选择框不存在，跳过刷新');
                return;
            }

            // 获取总结管理器
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                console.warn('[InfoBarSettings] ⚠️ 总结管理器未找到');
                return;
            }

            // 获取当前聊天的总结历史
            const summaryHistory = await summaryManager.getSummaryHistory();

            // 重新渲染总结历史选择框
            this.renderSummaryHistory(summaryHistory);

            console.log('[InfoBarSettings] ✅ 总结历史列表已刷新，当前聊天总结数量:', summaryHistory.length);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新总结历史失败:', error);
        }
    }

    /**
     * 打开错误日志窗口（仅临时显示，不持久化）
     */
    openErrorLogModal() {
        try {
            const modal = document.createElement('div');
            modal.className = 'error-log-modal';
            modal.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                width: 600px; max-height: 500px; background: #1a1a1a; border: 2px solid #333;
                border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.5); z-index: 20000;
                color: #e0e0e0; font-family: monospace;
            `;

            modal.innerHTML = `
                <div class="error-log-header" style="padding: 15px; border-bottom: 1px solid #333; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h4 style="margin: 0; color: #ff6b6b;">📋 程序日志</h4>
                        <div style="margin-top: 5px;">
                            <label style="margin-right: 10px; font-size: 12px;">过滤级别:</label>
                            <select id="log-level-filter" style="background: #333; color: #e0e0e0; border: 1px solid #555; padding: 2px 5px;">
                                <option value="all">全部</option>
                                <option value="error">错误</option>
                                <option value="warn">警告</option>
                                <option value="info">信息</option>
                                <option value="debug">调试</option>
                            </select>
                        </div>
                    </div>
                    <button class="btn btn-small" data-action="close-error-log" style="background: #ff6b6b; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">关闭</button>
                </div>
                <div class="error-log-body" style="padding: 15px; max-height: 350px; overflow: auto;">
                    <pre id="error-log-content" style="white-space: pre-wrap; margin: 0; font-size: 12px; line-height: 1.4;"></pre>
                </div>
            `;
            document.body.appendChild(modal);

            const updateLogs = () => {
                const filter = modal.querySelector('#log-level-filter').value;
                const logs = (window.SillyTavernInfobar?.runtimeLogs || [])
                    .filter(item => filter === 'all' || item.level === filter)
                    .map(item => {
                        const time = new Date(item.time).toLocaleString();
                        const levelIcon = {
                            error: '❌', warn: '⚠️', info: 'ℹ️', debug: '🔧'
                        }[item.level] || '📝';
                        return `[${time}] ${levelIcon} ${item.message}`;
                    })
                    .join('\n');
                modal.querySelector('#error-log-content').textContent = logs || '暂无日志记录';
            };

            // 初始加载
            updateLogs();

            // 绑定过滤器变化
            modal.querySelector('#log-level-filter').addEventListener('change', updateLogs);

            // 绑定关闭事件
            modal.querySelector('[data-action="close-error-log"]').onclick = () => {
                if (modal && modal.parentNode) modal.parentNode.removeChild(modal);
            };
        } catch (error) {
            const original = window.__InfobarConsoleOriginal;
            if (original) {
                original.error('[InfoBarSettings] ❌ 打开错误日志窗口失败:', error);
            }
        }
    }

    /**
     * 打开项目地址
     */
    openProjectLink() {
        try {
            window.open('https://github.com/loveyouguhan/Information-bar-integration-tool.git', '_blank');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 打开项目地址失败:', error);
        }
    }

    /**
     * 应用控制台日志级别过滤
     * level: 'none' | 'error' | 'warn' | 'info' | 'debug'
     */
    applyConsoleLogLevel(level) {
        try {
            // 使用全局门禁系统
            const original = window.__InfobarConsoleOriginal;
            if (!original) {
                console.warn('[InfoBarSettings] ⚠️ 控制台门禁未初始化');
                return;
            }

            const rt = window.SillyTavernInfobar.runtimeLogs;
            const push = (logLevel, args) => {
                try {
                    const message = Array.from(args).map(v =>
                        typeof v === 'string' ? v :
                        typeof v === 'object' ? JSON.stringify(v) : String(v)
                    ).join(' ');
                    rt.push({ level: logLevel, time: Date.now(), message });
                    if (rt.length > 500) rt.shift();
                } catch {}
            };

            // 根据级别设置过滤器
            const allows = {
                none: { error: false, warn: false, info: false, debug: false },
                error: { error: true, warn: false, info: false, debug: false },
                warn: { error: true, warn: true, info: false, debug: false },
                info: { error: true, warn: true, info: true, debug: false },
                debug: { error: true, warn: true, info: true, debug: true }
            }[level] || { error: true, warn: true, info: true, debug: true };

            // 重新绑定console方法：既收集又按级别输出
            console.log = (...args) => {
                push('debug', args);
                if (allows.debug) original.log(...args);
            };
            console.info = (...args) => {
                push('info', args);
                if (allows.info) original.info(...args);
            };
            console.warn = (...args) => {
                push('warn', args);
                if (allows.warn) original.warn(...args);
            };
            console.error = (...args) => {
                push('error', args);
                if (allows.error) original.error(...args);
            };

            // 使用原生console输出设置确认
            if (level !== 'none') {
                original.info('[InfoBarSettings] 📊 日志级别已设置为:', level);
            }
        } catch (error) {
            const original = window.__InfobarConsoleOriginal;
            if (original) {
                original.error('[InfoBarSettings] ❌ 设置日志级别失败:', error);
            }
        }
    }

    /**
     * 保存当前配置为命名配置
     */
    async saveSettingsProfile() {
        try {
            const nameInput = this.modal.querySelector('#config-profile-name');
            const name = (nameInput?.value || '').trim();
            if (!name) { this.showMessage('请输入配置名称', 'error'); return; }
            const configs = await this.configManager.getAllConfigs();
            const profiles = (await this.configManager.getConfig('profiles')) || {};
            profiles[name] = configs;
            await this.configManager.setConfig('profiles', profiles, false);
            this.showMessage(`已保存配置: ${name}`, 'success');
            this.refreshProfilesSelect();
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存配置失败:', error);
            this.showMessage('保存配置失败: ' + error.message, 'error');
        }
    }

    async loadSettingsProfile() {
        try {
            const select = this.modal.querySelector('#config-profile-select');
            const name = select?.value;
            if (!name) { this.showMessage('请选择要加载的配置', 'error'); return; }
            const profiles = (await this.configManager.getConfig('profiles')) || {};
            const profile = profiles[name];
            if (!profile) { this.showMessage('未找到配置: ' + name, 'error'); return; }
            await this.configManager.setConfigs(profile);
            await this.loadSettings();
            this.showMessage(`已加载配置: ${name}`, 'success');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载配置失败:', error);
            this.showMessage('加载配置失败: ' + error.message, 'error');
        }
    }

    async deleteSettingsProfile() {
        try {
            const select = this.modal.querySelector('#config-profile-select');
            const name = select?.value;
            if (!name) { this.showMessage('请选择要删除的配置', 'error'); return; }
            const profiles = (await this.configManager.getConfig('profiles')) || {};
            if (!profiles[name]) { this.showMessage('未找到配置: ' + name, 'error'); return; }
            delete profiles[name];
            await this.configManager.setConfig('profiles', profiles, false);
            this.showMessage(`已删除配置: ${name}`, 'success');
            this.refreshProfilesSelect();
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 删除配置失败:', error);
            this.showMessage('删除配置失败: ' + error.message, 'error');
        }
    }

    async refreshProfilesSelect() {
        try {
            const select = this.modal.querySelector('#config-profile-select');
            if (!select) return;
            const profiles = (await this.configManager.getConfig('profiles')) || {};
            const current = select.value;
            select.innerHTML = '<option value="">请选择一个配置</option>' + Object.keys(profiles).map(name => `<option value="${name}">${name}</option>`).join('');
            if (profiles[current]) select.value = current;
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新配置列表失败:', error);
        }
    }
    /**
     * 初始化设置界面
     */
    async init() {
        try {
            console.log('[InfoBarSettings] 📊 开始初始化设置界面...');

            if (!this.configManager) {
                throw new Error('配置管理器未初始化');
            }

            // 🔧 新增：初始化自定义API任务队列
            await this.initializeCustomAPITaskQueue();

            // 创建UI
            this.createUI();

            // 🔧 迁移时间戳ID面板到键名ID（确保设计一致性）
            this.migrateTimestampIdPanels();

            // 加载当前设置
            await this.loadSettings();

            // 注意：事件绑定已在createUI()中的bindNewEvents()完成，避免重复绑定

            this.initialized = true;

            // 🔧 新增：预生成字段映射缓存，避免运行时重复生成
            this.preloadCompleteDisplayNameMapping();

            // 🧹 初始化数据清理工具
            await this.initDataCleanupTool();

            console.log('[InfoBarSettings] ✅ 设置界面初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化失败:', error);
            this.handleError(error);
        }
    }

    /**
     * 🧹 初始化数据清理工具
     */
    async initDataCleanupTool() {
        try {
            console.log('[InfoBarSettings] 🧹 初始化数据清理工具...');

            // 动态导入数据清理工具
            const { DataCleanupTool } = await import('./DataCleanupTool.js');

            // 创建数据清理工具实例
            this.dataCleanupTool = new DataCleanupTool(
                this.unifiedDataCore,
                this.eventSystem
            );

            console.log('[InfoBarSettings] ✅ 数据清理工具初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化数据清理工具失败:', error);
            this.dataCleanupTool = null;
        }
    }

    /**
     * 🧹 打开数据清理工具
     */
    openDataCleanupTool() {
        try {
            console.log('[InfoBarSettings] 🧹 打开数据清理工具...');

            if (!this.dataCleanupTool) {
                this.showMessage('数据清理工具未初始化', 'error');
                return;
            }

            // 显示数据清理工具界面
            this.dataCleanupTool.show();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 打开数据清理工具失败:', error);
            this.showMessage('打开数据清理工具失败: ' + error.message, 'error');
        }
    }

    /**
     * 🔧 新增：初始化自定义API任务队列
     */
    async initializeCustomAPITaskQueue() {
        try {
            console.log('[InfoBarSettings] 🔄 初始化自定义API任务队列...');

            // 动态导入任务队列模块
            const { CustomAPITaskQueue } = await import('../core/CustomAPITaskQueue.js');

            // 创建任务队列实例
            this.customAPITaskQueue = new CustomAPITaskQueue({
                infoBarSettings: this,
                eventSystem: this.eventSystem
            });

            console.log('[InfoBarSettings] ✅ 自定义API任务队列初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化自定义API任务队列失败:', error);
            // 如果任务队列初始化失败，继续使用原有逻辑
            this.customAPITaskQueue = null;
        }
    }

    /**
     * 创建UI界面
     */
    createUI() {
        try {
            // 创建模态框容器
            this.modal = document.createElement('div');
            this.modal.id = 'info-bar-settings-modal';
            this.modal.className = 'info-bar-settings-modal infobar-modal-new';
            this.modal.style.display = 'none';

            this.modal.innerHTML = `
                <div class="modal-overlay" onclick="this.closest('.info-bar-settings-modal').style.display='none'"></div>
                <div class="modal-container">
                    <!-- 顶部标题栏 -->
                    <div class="modal-header">
                        <div class="header-left">
                            <h2>信息栏设置</h2>
                        </div>
                        <div class="header-right">
                            <div class="success-notification" style="display: block;">
                                <span class="success-text">信息栏系统已成功加载！</span>
                            </div>
                            <button class="modal-close" onclick="this.closest('.info-bar-settings-modal').style.display='none'">×</button>
                        </div>
                    </div>

                    <!-- 主体内容区域 -->
                    <div class="modal-body">
                        <!-- 左侧导航栏 -->
                        <div class="sidebar-nav">
                            <div class="nav-item active" data-nav="basic">
                                基础设置
                            </div>
                            <div class="nav-item" data-nav="api">
                                自定义API
                            </div>
                            <div class="nav-item" data-nav="promptSettings">
                                提示词设置
                            </div>
                            <div class="nav-item" data-nav="memoryEnhancement">
                                记忆增强
                            </div>
                            <div class="nav-item" data-nav="panelManagement">
                                面板管理
                            </div>
                            <div class="nav-item" data-nav="summary">
                                总结面板
                            </div>
                            <div class="nav-item" data-nav="npc-management">
                                NPC管理
                            </div>
                            <div class="nav-item" data-nav="personal">
                                个人信息
                            </div>
                            <div class="nav-item" data-nav="interaction">
                                交互对象
                            </div>
                            <div class="nav-item" data-nav="tasks">
                                任务系统
                            </div>
                            <div class="nav-item" data-nav="world">
                                世界信息
                            </div>
                            <div class="nav-item" data-nav="organization">
                                组织信息
                            </div>
                            <div class="nav-item" data-nav="news">
                                资讯内容
                            </div>
                            <div class="nav-item" data-nav="inventory">
                                背包仓库
                            </div>
                            <div class="nav-item" data-nav="abilities">
                                能力系统
                            </div>
                            <div class="nav-item" data-nav="plot">
                                剧情面板
                            </div>
                            <div class="nav-item" data-nav="cultivation">
                                修仙世界
                            </div>
                            <div class="nav-item" data-nav="fantasy">
                                玄幻世界
                            </div>
                            <div class="nav-item" data-nav="modern">
                                都市现代
                            </div>
                            <div class="nav-item" data-nav="historical">
                                历史古代
                            </div>
                            <div class="nav-item" data-nav="magic">
                                魔法能力
                            </div>
                            <div class="nav-item" data-nav="training">
                                调教系统
                            </div>
                            <div class="nav-item" data-nav="theme">
                                主题设置
                            </div>
                            <div class="nav-item" data-nav="frontend-display">
                                前端显示
                            </div>
                            <div class="nav-item" data-nav="advanced">
                                高级设置
                            </div>

                            <!-- 底部操作按钮 -->
                            <div class="nav-bottom">
                                <!-- 已移除恢复所有设置按钮 -->
                            </div>
                        </div>

                        <!-- 右侧内容区域 -->
                        <div class="content-area">
                            <div class="content-panel active" data-content="basic">
                                ${this.createBasicPanelNew()}
                            </div>
                            <div class="content-panel" data-content="api">
                                ${this.createAPIPanel()}
                            </div>
                            <div class="content-panel" data-content="promptSettings">
                                ${this.createPromptSettingsPanel()}
                            </div>
                            <div class="content-panel" data-content="memoryEnhancement">
                                ${this.createMemoryEnhancementPanel()}
                            </div>
                            <div class="content-panel" data-content="panelManagement">
                                ${this.createPanelManagementPanel()}
                            </div>
                            <div class="content-panel" data-content="summary">
                                ${this.createSummaryPanel()}
                            </div>
                            <div class="content-panel" data-content="personal">
                                ${this.createPersonalPanel()}
                            </div>
                            <div class="content-panel" data-content="interaction">
                                ${this.createInteractionPanel()}
                            </div>
                            <div class="content-panel" data-content="npc-management">
                                ${this.createNPCManagementPanel()}
                            </div>
                            <div class="content-panel" data-content="tasks">
                                ${this.createTasksPanel()}
                            </div>
                            <div class="content-panel" data-content="world">
                                ${this.createWorldPanel()}
                            </div>
                            <div class="content-panel" data-content="organization">
                                ${this.createOrganizationPanel()}
                            </div>
                            <div class="content-panel" data-content="news">
                                ${this.createNewsPanel()}
                            </div>
                            <div class="content-panel" data-content="inventory">
                                ${this.createInventoryPanel()}
                            </div>
                            <div class="content-panel" data-content="abilities">
                                ${this.createAbilitiesPanel()}
                            </div>
                            <div class="content-panel" data-content="plot">
                                ${this.createPlotPanel()}
                            </div>
                            <div class="content-panel" data-content="cultivation">
                                ${this.createCultivationPanel()}
                            </div>
                            <div class="content-panel" data-content="fantasy">
                                ${this.createFantasyPanel()}
                            </div>
                            <div class="content-panel" data-content="modern">
                                ${this.createModernPanel()}
                            </div>
                            <div class="content-panel" data-content="historical">
                                ${this.createHistoricalPanel()}
                            </div>
                            <div class="content-panel" data-content="magic">
                                ${this.createMagicPanel()}
                            </div>
                            <div class="content-panel" data-content="training">
                                ${this.createTrainingPanel()}
                            </div>
                            <div class="content-panel" data-content="theme">
                                ${this.createThemePanel()}
                            </div>
                            <div class="content-panel" data-content="frontend-display">
                                ${this.createFrontendDisplayPanel()}
                            </div>
                            <div class="content-panel" data-content="advanced">
                                ${this.createAdvancedPanel()}
                            </div>
                        </div>
                    </div>

                    <!-- 底部操作栏 -->
                    <div class="modal-footer">
                        <div class="footer-left">
                            <span class="status-text">就绪</span>
                        </div>
                        <div class="footer-right">
                            <button class="btn-cancel" data-action="close">取消</button>
                            <button class="btn-save" data-action="save">保存设置</button>
                        </div>
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(this.modal);

            // 绑定新的事件
            this.bindNewEvents();

            // 🔧 修复：添加按钮点击区域修复样式
            this.addButtonClickFixStyles();

            console.log('[InfoBarSettings] 🎨 新UI界面创建完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 创建UI失败:', error);
            throw error;
        }
    }
    /**
     * 创建新的基础设置面板 - 垂直布局
     */
    createBasicPanelNew() {
        return `
            <div class="content-header">
                <h3>基础功能配置</h3>
            </div>

            <div class="content-body">


                <!-- 垂直布局的功能配置 -->
                <div class="basic-settings-vertical">
                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="integration-system-checkbox" name="basic.integrationSystem.enabled" checked />
                            <label for="integration-system-checkbox" class="checkbox-label">启用插件</label>
                        </div>
                        <div class="setting-desc">启用信息栏插件的所有功能</div>
                    </div>

                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="render-in-chat-checkbox" name="basic.renderInChat.enabled" checked />
                            <label for="render-in-chat-checkbox" class="checkbox-label">在聊天中渲染信息栏</label>
                        </div>
                        <div class="setting-desc">在聊天界面中显示信息栏内容</div>
                    </div>

                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="table-records-checkbox" name="basic.tableRecords.enabled" />
                            <label for="table-records-checkbox" class="checkbox-label">启用表格记录</label>
                        </div>
                        <div class="setting-desc">启用数据表格记录和管理功能</div>
                    </div>

                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="memory-assist-checkbox" name="basic.memoryAssist.enabled" checked />
                            <label for="memory-assist-checkbox" class="checkbox-label">启用记忆辅助</label>
                        </div>
                        <div class="setting-desc">AI记忆辅助和上下文管理</div>
                    </div>

                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="default-collapsed-checkbox" name="basic.defaultCollapsed.enabled" />
                            <label for="default-collapsed-checkbox" class="checkbox-label">信息栏默认折叠</label>
                        </div>
                        <div class="setting-desc">启动时信息栏默认为折叠状态</div>
                    </div>

                    <div class="setting-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="error-logging-checkbox" name="basic.errorLogging.enabled" checked />
                            <label for="error-logging-checkbox" class="checkbox-label">错误日志</label>
                        </div>
                        <div class="setting-desc">启用详细的错误日志记录</div>
                    </div>

                    <!-- 提示词插入位置配置 -->
                    <div class="setting-item">
                        <div class="setting-group">
                            <h4>📍 提示词插入位置</h4>
                            <div class="setting-desc" style="margin-bottom: 12px;">选择信息栏提示词在对话中的插入位置，不同位置对对话的影响程度不同。</div>

                            <div class="prompt-position-config">
                                <div class="form-group">
                                    <label for="prompt-position-mode" class="control-label">插入位置</label>
                                    <select id="prompt-position-mode" name="basic.promptPosition.mode" class="form-control">
                                        <option value="afterCharacter">角色定义之后</option>
                                        <option value="beforeCharacter">角色定义之前</option>
                                        <option value="atDepthSystem">@ D⚙️ - 系统角色消息</option>
                                        <option value="atDepthUser">@ D👤 - 用户角色消息</option>
                                        <option value="atDepthAssistant">@ D🤖 - 助手角色消息</option>
                                    </select>
                                </div>

                                <div class="form-group depth-control" style="display: none;">
                                    <label for="prompt-position-depth" class="control-label">插入深度</label>
                                    <input type="number" id="prompt-position-depth" name="basic.promptPosition.depth"
                                           class="form-control" min="0" max="10" value="0" step="1">
                                    <div class="setting-desc">深度 0 为提示词底部，数字越大越靠前</div>
                                </div>

                                <div class="position-description">
                                    <div id="position-desc-afterCharacter" class="desc-item active">
                                        <span class="desc-impact">🔸 较大影响</span>
                                        在角色描述和场景之后插入此提示词。对对话有更大影响。
                                    </div>
                                    <div id="position-desc-beforeCharacter" class="desc-item">
                                        <span class="desc-impact">🔹 中等影响</span>
                                        在角色描述和场景之前插入此提示词。对对话有中等影响。
                                    </div>
                                    <div id="position-desc-atDepth" class="desc-item">
                                        <span class="desc-impact">🔧 精确控制</span>
                                        将信息栏提示词插入到聊天中的特定深度和角色类型。
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 管理工具区域 -->
                <div class="settings-group">
                    <h4>🛠️ 管理工具</h4>
                    <div class="management-tools">
                        <button class="btn btn-primary" id="variable-manager-btn" data-action="open-variable-manager">
                            <i class="fa fa-code"></i>
                            变量管理器
                        </button>
                        <button class="btn btn-secondary" id="npc-management-btn" data-action="open-npc-management" style="margin-left:8px;">
                            <i class="fa fa-users"></i>
                            NPC管理
                        </button>
                        <button class="btn btn-danger" id="clear-memory-database-btn" data-action="clear-memory-database" style="margin-left:8px;">
                            <i class="fa fa-trash"></i>
                            清空AI记忆数据库
                        </button>
                        <div class="tool-desc">管理全局变量、宏定义和自定义函数；打开NPC数据库管理界面；清空AI记忆数据库（用于解决记忆混乱问题）</div>
                    </div>
                </div>
            </div>
        `;
        // 追加轻量样式，确保选择框与删除按钮同排且不遮挡
        const style = document.createElement('style');
        style.id = 'info-bar-settings-summary-inline-style';
        if (!document.getElementById(style.id)) {
            style.textContent = `
                .history-selector-group .history-select-row {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }
                .history-selector-group .summary-history-select {
                    flex: 1 1 auto;
                    min-width: 0;
                    max-width: calc(100% - 90px);
                }
                #content-delete-summary-btn {
                    flex: 0 0 auto;
                    white-space: nowrap;
                }
                /* 调试与配置行布局优化 */
                .debug-actions-row { display: flex; gap: 8px; }
                .config-primary-actions { display: flex; gap: 8px; flex-wrap: wrap; }
                .config-row { display: flex; align-items: center; gap: 8px; }
                .config-row .setting-select { flex: 1 1 auto; min-width: 0; }
                .config-row-actions { display: flex; gap: 6px; }

                /* 数据管理功能区域样式 */
                .data-management-actions {
                    display: flex !important;
                    flex-direction: row !important;
                    gap: 12px !important;
                    margin-top: 8px !important;
                    width: 100% !important;
                }
                .data-export-btn, .data-import-btn {
                    flex: 1 !important;
                    display: flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    gap: 6px !important;
                    padding: 10px 16px !important;
                    border: none !important;
                    border-radius: 6px !important;
                    font-size: 14px !important;
                    font-weight: 500 !important;
                    cursor: pointer !important;
                    transition: all 0.2s ease !important;
                    min-height: 40px !important;
                    white-space: nowrap !important;
                }
                .data-export-btn {
                    background: var(--theme-primary-color, #ff6b35) !important;
                    color: white !important;
                }
                .data-export-btn:hover {
                    background: var(--theme-primary-hover, #e55a2b) !important;
                    transform: translateY(-1px) !important;
                    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3) !important;
                }
                .data-import-btn {
                    background: var(--theme-bg-secondary, #4a5568) !important;
                    color: white !important;
                    border: 1px solid var(--theme-border-color, #666) !important;
                }
                .data-import-btn:hover {
                    background: var(--theme-primary-color, #ff6b35) !important;
                    transform: translateY(-1px) !important;
                    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.2) !important;
                }
                .data-management-hint {
                    color: var(--theme-text-secondary, #a0a0a0) !important;
                    font-size: 13px !important;
                    line-height: 1.4 !important;
                    margin-top: 8px !important;
                    padding: 8px 12px !important;
                    background: var(--theme-bg-secondary, rgba(107, 114, 128, 0.1)) !important;
                    border-radius: 4px !important;
                    border-left: 3px solid var(--theme-primary-color, #ff6b35) !important;
                }

                /* 提示词插入位置配置样式 */
                .prompt-position-config {
                    margin-top: 12px;
                    padding: 16px;
                    background: var(--theme-bg-secondary, rgba(107, 114, 128, 0.05));
                    border-radius: 8px;
                    border: 1px solid var(--theme-border-color, #e2e8f0);
                }
                .prompt-position-config .form-group {
                    margin-bottom: 16px;
                }
                .prompt-position-config .control-label {
                    display: block;
                    margin-bottom: 6px;
                    font-weight: 500;
                    color: var(--theme-text-primary, #333);
                }
                .prompt-position-config .form-control {
                    width: 100%;
                    padding: 8px 12px;
                    border: 1px solid var(--theme-border-color, #d1d5db);
                    border-radius: 4px;
                    background: var(--theme-bg-primary, #fff);
                    color: var(--theme-text-primary, #333);
                }
                .position-description {
                    margin-top: 12px;
                    padding: 12px;
                    background: var(--theme-bg-primary, #fff);
                    border-radius: 6px;
                    border: 1px solid var(--theme-border-color, #e2e8f0);
                }
                .position-description .desc-item {
                    display: none;
                    line-height: 1.5;
                    color: var(--theme-text-primary, #333);
                }
                .position-description .desc-item.active {
                    display: block;
                }
                .desc-impact {
                    display: inline-block;
                    padding: 2px 8px;
                    margin-right: 8px;
                    font-size: 12px;
                    font-weight: 600;
                    border-radius: 12px;
                    background: var(--theme-primary-color, #ff6b35);
                    color: white;
                }
                .depth-control {
                    padding: 12px;
                    background: var(--theme-bg-accent, #f8fafc);
                    border-radius: 6px;
                    border-left: 4px solid var(--theme-primary-color, #ff6b35);
                }
            `;
            document.head.appendChild(style);
        }
    }

    /**
     * 🔧 新增：添加按钮点击区域修复样式
     */
    addButtonClickFixStyles() {
        try {
            // 检查是否已经添加过样式
            if (document.getElementById('infobar-button-click-fix-styles')) {
                return;
            }

            const style = document.createElement('style');
            style.id = 'infobar-button-click-fix-styles';
            style.textContent = `
                /* 🔧 修复按钮点击区域问题 */
                .info-bar-settings-modal button {
                    position: relative;
                    cursor: pointer;
                    user-select: none;
                }

                .info-bar-settings-modal button * {
                    pointer-events: none;
                    user-select: none;
                }

                .info-bar-settings-modal button:disabled {
                    pointer-events: none;
                    cursor: not-allowed;
                }

                .info-bar-settings-modal button:not(:disabled) {
                    pointer-events: auto;
                }

                /* 确保按钮内容不会阻止点击事件 */
                .info-bar-settings-modal .btn-icon,
                .info-bar-settings-modal .btn-text {
                    pointer-events: none !important;
                    display: inline-block;
                }

                /* 模态框按钮样式修复 */
                .delete-confirm-dialog button,
                .save-confirm-dialog button {
                    position: relative;
                    cursor: pointer;
                    user-select: none;
                    pointer-events: auto;
                }

                .delete-confirm-dialog button *,
                .save-confirm-dialog button * {
                    pointer-events: none;
                    user-select: none;
                }

                /* 🔧 修复：自定义子项删除按钮样式修复 */
                .info-bar-settings-modal .btn-remove-sub-item {
                    position: relative;
                    cursor: pointer;
                    user-select: none;
                    pointer-events: auto !important;
                    background: none;
                    border: none;
                    padding: 4px 8px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                }

                .info-bar-settings-modal .btn-remove-sub-item:hover {
                    background-color: rgba(255, 0, 0, 0.1);
                }

                .info-bar-settings-modal .btn-remove-sub-item * {
                    pointer-events: none !important;
                    user-select: none;
                }

                /* NPC管理面板样式 */
                .npc-list-container {
                    margin-top: 15px;
                }

                .npc-search-bar {
                    display: flex;
                    gap: 10px;
                    margin-bottom: 15px;
                    align-items: center;
                }

                .npc-search-bar input {
                    flex: 1;
                    padding: 8px 12px;
                    border: 1px solid var(--theme-border-color, #ddd);
                    border-radius: 4px;
                    background: var(--theme-bg-secondary, #fff);
                    color: var(--theme-text-primary, #333);
                }

                .npc-cards-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                    gap: 15px;
                    max-height: 400px;
                    overflow-y: auto;
                    padding: 10px;
                    border: 1px solid var(--theme-border-color, #ddd);
                    border-radius: 6px;
                    background: var(--theme-bg-secondary, #f9f9f9);
                }

                .npc-card {
                    background: var(--theme-bg-primary, #fff);
                    border: 1px solid var(--theme-border-color, #ddd);
                    border-radius: 8px;
                    padding: 12px;
                    transition: all 0.2s ease;
                    cursor: pointer;
                }

                .npc-card:hover {
                    border-color: var(--theme-primary-color, #007bff);
                    box-shadow: 0 2px 8px rgba(0, 123, 255, 0.15);
                    transform: translateY(-1px);
                }

                .npc-card-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 8px;
                }

                .npc-name {
                    margin: 0;
                    font-size: 14px;
                    font-weight: 600;
                    color: var(--theme-text-primary, #333);
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                }

                .npc-appear-count {
                    font-size: 12px;
                    color: var(--theme-text-secondary, #666);
                    background: var(--theme-bg-secondary, #f0f0f0);
                    padding: 2px 6px;
                    border-radius: 10px;
                }

                .npc-card-body {
                    margin-bottom: 10px;
                }

                .npc-info {
                    display: flex;
                    flex-direction: column;
                    gap: 4px;
                }

                .npc-field-count,
                .npc-last-seen {
                    font-size: 12px;
                    color: var(--theme-text-secondary, #666);
                }

                .npc-card-footer {
                    text-align: right;
                }

                .npc-card-actions {
                    display: flex;
                    gap: 8px;
                    justify-content: flex-end;
                    align-items: center;
                }

                .npc-view-btn,
                .npc-delete-btn {
                    font-size: 12px;
                    padding: 4px 8px;
                    border-radius: 4px;
                    transition: all 0.2s ease;
                }

                .npc-delete-btn {
                    background: transparent;
                    border: 1px solid var(--theme-danger-color, #dc3545);
                    color: var(--theme-danger-color, #dc3545);
                }

                .npc-delete-btn:hover {
                    background: var(--theme-danger-color, #dc3545);
                    color: white;
                    transform: translateY(-1px);
                    box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
                }

                .npc-loading,
                .npc-error,
                .npc-empty {
                    text-align: center;
                    padding: 40px 20px;
                    color: var(--theme-text-secondary, #666);
                    font-style: italic;
                }

                .npc-error {
                    color: var(--theme-error-color, #dc3545);
                }

                /* NPC详情模态框样式 */
                .npc-detail-modal {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 10000;
                }

                .npc-detail-content {
                    background: var(--theme-bg-primary, #fff);
                    border-radius: 8px;
                    width: 90%;
                    max-width: 600px;
                    max-height: 80%;
                    overflow: hidden;
                    display: flex;
                    flex-direction: column;
                }

                .npc-detail-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 15px 20px;
                    border-bottom: 1px solid var(--theme-border-color, #ddd);
                    background: var(--theme-bg-secondary, #f8f9fa);
                }

                .npc-detail-header h3 {
                    margin: 0;
                    color: var(--theme-text-primary, #333);
                }

                .npc-detail-close {
                    background: none;
                    border: none;
                    font-size: 24px;
                    cursor: pointer;
                    color: var(--theme-text-secondary, #666);
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                .npc-detail-close:hover {
                    color: var(--theme-text-primary, #333);
                }

                .npc-detail-body {
                    padding: 20px;
                    overflow-y: auto;
                }

                .npc-detail-section {
                    margin-bottom: 20px;
                }

                .npc-detail-section h4 {
                    margin: 0 0 10px 0;
                    color: var(--theme-text-primary, #333);
                    border-bottom: 1px solid var(--theme-border-color, #ddd);
                    padding-bottom: 5px;
                }

                .npc-basic-info,
                .npc-fields-list {
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }

                .npc-info-item,
                .npc-field-item {
                    display: flex;
                    justify-content: space-between;
                    padding: 8px 12px;
                    background: var(--theme-bg-secondary, #f8f9fa);
                    border-radius: 4px;
                    border-left: 3px solid var(--theme-primary-color, #007bff);
                }

                .npc-info-item strong,
                .npc-field-item strong {
                    color: var(--theme-text-primary, #333);
                    min-width: 80px;
                }

                .npc-info-item span,
                .npc-field-item span {
                    color: var(--theme-text-secondary, #666);
                    word-break: break-word;
                    text-align: right;
                }

                .npc-no-fields,
                .npc-no-data {
                    text-align: center;
                    padding: 20px;
                    color: var(--theme-text-secondary, #666);
                    font-style: italic;
                }

                .npc-data-list {
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }

                /* NPC管理按钮组样式 */
                .button-group {
                    display: flex;
                    gap: 10px;
                    flex-wrap: wrap;
                    margin-bottom: 8px;
                }

                .button-group .btn {
                    flex: 0 0 auto;
                    font-size: 12px;
                    padding: 6px 12px;
                    border-radius: 4px;
                    transition: all 0.2s ease;
                }

                .button-group .btn:hover {
                    transform: translateY(-1px);
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }
            `;

            document.head.appendChild(style);
            console.log('[InfoBarSettings] ✅ 按钮点击区域修复样式已添加');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加按钮点击区域修复样式失败:', error);
        }
    }

    /**
     * 处理提示词位置模式变更
     */
    handlePromptPositionModeChange(mode) {
        try {
            const depthControl = this.modal.querySelector('.depth-control');
            const descriptions = this.modal.querySelectorAll('.position-description .desc-item');

            // 显示/隐藏深度控制
            if (mode.startsWith('atDepth')) {
                depthControl.style.display = 'block';
            } else {
                depthControl.style.display = 'none';
            }

            // 更新描述文本
            descriptions.forEach(desc => desc.classList.remove('active'));

            if (mode === 'beforeCharacter') {
                this.modal.querySelector('#position-desc-beforeCharacter')?.classList.add('active');
            } else if (mode === 'afterCharacter') {
                this.modal.querySelector('#position-desc-afterCharacter')?.classList.add('active');
            } else if (mode.startsWith('atDepth')) {
                this.modal.querySelector('#position-desc-atDepth')?.classList.add('active');
            }

            console.log(`[InfoBarSettings] 📍 提示词位置模式变更为: ${mode}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理提示词位置模式变更失败:', error);
        }
    }

    /**
     * 绑定新的事件处理
     */
    bindNewEvents() {
        try {
            // 导航切换事件
            this.modal.addEventListener('click', (e) => {
                if (e.target.closest('.nav-item')) {
                    const navItem = e.target.closest('.nav-item');
                    const navType = navItem.dataset.nav;
                    this.switchToContent(navType);
                }
            });

            // 提示词位置配置事件
            this.modal.addEventListener('change', (e) => {
                if (e.target.id === 'prompt-position-mode') {
                    this.handlePromptPositionModeChange(e.target.value);
                }
            });

            // 🆕 破甲提示词文本框事件
            this.modal.addEventListener('input', (e) => {
                if (e.target.id === 'armor-breaking-prompt') {
                    this.updateArmorBreakingStats();
                }
            });

            this.modal.addEventListener('keyup', (e) => {
                if (e.target.id === 'armor-breaking-prompt') {
                    this.updateArmorBreakingStats();
                }
            });

            // 🧠 提示词设置事件
            this.modal.addEventListener('change', (e) => {
                if (e.target.name === 'promptSettings.mode' || e.target.id === 'prompt-mode-select') {
                    this.handlePromptModeChange(e.target.value);
                }
            });

            this.modal.addEventListener('input', (e) => {
                if (e.target.id === 'custom-prompt-content') {
                    this.updateCustomPromptStats();
                }
            });

            this.modal.addEventListener('keyup', (e) => {
                if (e.target.id === 'custom-prompt-content') {
                    this.updateCustomPromptStats();
                }
            });

            this.modal.addEventListener('click', (e) => {
                if (e.target.id === 'refresh-preview-btn') {
                    this.refreshPromptPreview();
                }
            });

            // 按钮点击事件
            this.modal.addEventListener('click', (e) => {
                // 🔧 修复：使用closest查找具有data-action属性的父元素，解决按钮内子元素点击问题
                const actionElement = e.target.closest('[data-action]');
                const action = actionElement?.dataset?.action;

                // 🔧 新增：详细的点击事件调试信息
                if (e.target.closest('button') || actionElement) {
                    console.log('[InfoBarSettings] 🖱️ 按钮点击事件:', {
                        target: e.target.tagName + (e.target.className ? '.' + e.target.className : ''),
                        actionElement: actionElement?.tagName + (actionElement?.className ? '.' + actionElement.className : ''),
                        action: action,
                        targetText: e.target.textContent?.trim(),
                        targetParent: e.target.parentElement?.tagName
                    });
                }

                if (action) {
                    // 🔧 修复：阻止事件冒泡，防止重复触发
                    e.preventDefault();
                    e.stopPropagation();
                    this.handleAction(action, e);
                }

                // API配置相关按钮
                if (e.target.id === 'load-models-btn') {
                    this.loadModelList();
                }
                if (e.target.id === 'test-connection-btn') {
                    this.testConnection();
                }

                // NPC管理相关按钮
                if (e.target.id === 'npc-sync-now-btn') {
                    this.handleNPCSyncNow();
                }
                if (e.target.id === 'npc-worldbook-sync-now-btn') {
                    this.handleNPCWorldBookSyncNow();
                }
                if (e.target.id === 'npc-refresh-btn') {
                    this.refreshNPCList();
                }

            // 🆕 破甲提示词文本框字符统计
            if (e.target.id === 'armor-breaking-prompt') {
                this.updateArmorBreakingStats();
            }

                // 主题预览卡片点击事件
                const themeCard = e.target.closest('.theme-preview-card');
                if (themeCard) {
                    const themeId = themeCard.dataset.theme;
                    if (themeId) {
                        this.selectTheme(themeId);
                    }
                }

                // 信息栏风格预览卡片点击事件
                const styleCard = e.target.closest('.style-preview-card');
                if (styleCard) {
                    const styleId = styleCard.dataset.style;
                    if (styleId) {
                        this.selectStyle(styleId);
                    }
                }

                // 面板管理相关事件
                this.handlePanelManagementEvents(e);

                // 前端显示相关事件
                this.handleFrontendDisplayEvents(e);
            });

            // 下拉框变更事件
            this.modal.addEventListener('change', (e) => {
                if (e.target.type === 'checkbox') {
                    this.handleCheckboxChange(e);
                }

                // 前端显示设置变更
                if (e.target.name && e.target.name.startsWith('frontendDisplay.')) {
                    this.handleFrontendDisplayChange(e);
                }

                // NPC管理设置变更
                if (e.target.id === 'npc-auto-sync-enabled') {
                    this.handleNPCAutoSyncChange(e.target.checked);
                }
                if (e.target.id === 'npc-worldbook-sync-enabled') {
                    this.handleNPCWorldBookSyncChange(e.target.checked);
                }

                // API启用开关变更
                if (e.target.id === 'api-enabled') {
                    this.handleAPIEnabledChange(e.target.checked);
                }

                // API提供商变更
                if (e.target.id === 'api-provider') {
                    this.handleProviderChange(e.target.value);
                }

                // 接口类型变更
                if (e.target.id === 'interface-type') {
                    this.handleInterfaceTypeChange(e.target.value);
                }

                // 字体大小和信息栏高度关联
                if (e.target.name === 'theme.fontSize') {
                    this.handleFontSizeChange(e.target.value);
                }
                if (e.target.name === 'infobar.height') {
                    this.handleInfobarHeightChange(e.target.value);
                }
            });

            // 范围输入实时更新
            this.modal.addEventListener('input', (e) => {
                if (e.target.type === 'range') {
                    const valueSpan = e.target.nextElementSibling;
                    if (valueSpan && valueSpan.classList.contains('range-value')) {
                        valueSpan.textContent = e.target.value;
                    }
                }
            });

            console.log('[InfoBarSettings] 🔗 新事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定新事件失败:', error);
            throw error;
        }
    }

    /**
     * 处理面板管理相关事件
     */
    handlePanelManagementEvents(e) {
        try {
            // 面板分类标签切换（简化：只有全部面板，无需切换）
            const categoryTab = e.target.closest('.category-tab');
            if (categoryTab) {
                // 只有全部面板分类，无需切换逻辑
                return;
            }

            // 面板列表项选择
            const panelListItem = e.target.closest('.panel-list-item');
            if (panelListItem) {
                const panelId = panelListItem.dataset.panelId;
                const panelType = panelListItem.dataset.panelType;

                console.log('[InfoBarSettings] 🎯 面板列表项点击:', { panelId, panelType });

                // 🔧 修复：验证面板数据有效性
                if (panelId && panelType) {
                    this.selectPanelForEdit(panelId, panelType);
                } else {
                    console.error('[InfoBarSettings] ❌ 面板列表项数据无效:', { panelId, panelType });
                }
                return;
            }

            // 🔧 修复：面板管理按钮事件，使用closest查找按钮元素
            const actionButton = e.target.closest('[data-action]');
            const action = actionButton?.dataset?.action;
            const panelId = actionButton?.dataset?.panelId;

            switch (action) {
                case 'add-custom-panel':
                    this.addCustomPanel();
                    break;
                case 'refresh-panels':
                    this.refreshPanelList();
                    break;
                case 'edit-panel':
                    this.editPanel(panelId);
                    break;
                case 'view-panel':
                    this.viewPanel(panelId);
                    break;
                case 'open-html-editor':
                    this.openHTMLTemplateEditor();
                    break;
                case 'duplicate-panel':
                    this.duplicatePanel(panelId);
                    break;
                case 'toggle-panel':
                    this.togglePanel(panelId);
                    break;
                case 'save-panel-properties':
                    this.savePanelProperties();
                    break;
                case 'delete-panel':
                    this.deletePanel();
                    break;
                case 'add-sub-item':
                    this.addSubItem();
                    break;
                case 'remove-sub-item':
                    this.removeSubItem(e?.target?.closest('[data-action="remove-sub-item"]') || e?.target);
                    break;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理面板管理事件失败:', error);
        }
    }

    /**
     * 处理前端显示相关事件
     */
    handleFrontendDisplayEvents(e) {
        try {
            const action = e.target.dataset.action;

            switch (action) {
                case 'test-panel-popup':
                    this.testPanelPopup();
                    break;
                case 'test-add-panel':
                    // 移除预览示例入口：转为真正调用 FrontendDisplayManager 的添加逻辑
                    try {
                        const infoBarTool = window.SillyTavernInfobar;
                        const fdm = infoBarTool?.modules?.frontendDisplayManager;
                        if (fdm) {
                            // 模拟在当前最后一条AI消息上打开添加菜单
                            const lastAi = [...document.querySelectorAll('.mes[data-is-user="false"]')].pop();
                            if (lastAi) {
                                fdm.wrapAIMessage(lastAi);
                                const wrapper = fdm.wrappers.get(lastAi.id);
                                const anySlot = wrapper?.querySelector('.add-slot') || wrapper;
                                fdm.showAddPanelMenu('top-1', anySlot, lastAi);
                            }
                        }
                    } catch (_) {}
                    break;
                case 'clear-preview':
                    this.clearPreviewContent();
                    break;
            }

            // 处理添加槽位点击
            const addSlot = e.target.closest('.add-slot');
            if (addSlot) {
                const position = addSlot.dataset.position;
                this.showAddPanelMenu(position, addSlot);
                return;
            }

            // 处理演示面板按钮点击
            const panelButton = e.target.closest('.panel-button.demo');
            if (panelButton) {
                const panelType = panelButton.dataset.panel;
                this.showDemoPanelPopup(panelType);
                return;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理前端显示事件失败:', error);
        }
    }

    /**
     * 处理前端显示设置变更
     */
    handleFrontendDisplayChange(e) {
        try {
            const name = e.target.name;
            const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;

            console.log(`[InfoBarSettings] 🖥️ 前端显示设置变更: ${name} = ${value}`);

            // 根据设置名称处理不同的变更
            switch (name) {
                case 'frontendDisplay.enabled':
                    this.toggleFrontendDisplaySections(value);
                    this.enableFrontendDisplay(value);
                    break;
                case 'frontendDisplay.position':
                    this.updatePreviewPosition(value);
                    break;
                case 'frontendDisplay.style':
                    this.updatePreviewStyle(value);
                    break;
                case 'frontendDisplay.showAddButtons':
                    this.toggleAddButtons(value);
                    break;
                case 'frontendDisplay.animationEnabled':
                    this.toggleAnimations(value);
                    break;
                default:
                    console.log(`[InfoBarSettings] 📝 保存前端显示设置: ${name}`);
                    break;
            }

            // 保存设置到配置中
            this.saveFrontendDisplaySetting(name, value);

            // 更新前端显示管理器的设置
            this.updateFrontendDisplayManagerSettings();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理前端显示设置变更失败:', error);
        }
    }

    /**
     * 保存前端显示设置到配置中
     */
    async saveFrontendDisplaySetting(name, value) {
        try {
            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (!fdm) {
                console.error('[InfoBarSettings] ❌ 未找到前端显示管理器');
                return;
            }

            // 读取当前配置
            const currentConfig = await fdm.getSavedFrontendDisplayConfig();

            // 更新对应的设置项
            const settingKey = name.replace('frontendDisplay.', '');
            currentConfig[settingKey] = value;

            // 保存配置
            await fdm.saveFrontendDisplayConfig(currentConfig);

            console.log(`[InfoBarSettings] 💾 已保存前端显示设置: ${settingKey} = ${value}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存前端显示设置失败:', error);
        }
    }

    /**
     * 启用/禁用前端显示功能
     */
    enableFrontendDisplay(enabled) {
        try {
            console.log(`[InfoBarSettings] 🔄 ${enabled ? '启用' : '禁用'}前端显示功能`);

            // 获取前端显示管理器
            const infoBarTool = window.SillyTavernInfobar;
            const frontendDisplayManager = infoBarTool?.modules?.frontendDisplayManager;

            if (frontendDisplayManager) {
                frontendDisplayManager.setEnabled(enabled);
                console.log(`[InfoBarSettings] ✅ 前端显示功能${enabled ? '已启用' : '已禁用'}`);

                // 如果禁用，还需要恢复原有信息栏渲染
                if (!enabled) {
                    this.restoreOriginalInfoBarRendering();
                } else {
                    this.disableOriginalInfoBarRendering();
                }
            } else {
                console.error('[InfoBarSettings] ❌ 未找到前端显示管理器');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 启用/禁用前端显示功能失败:', error);
        }
    }

    /**
     * 更新前端显示管理器设置
     */
    updateFrontendDisplayManagerSettings() {
        try {
            const infoBarTool = window.SillyTavernInfobar;
            const frontendDisplayManager = infoBarTool?.modules?.frontendDisplayManager;

            if (frontendDisplayManager) {
                // 收集当前设置
                const settings = this.collectFrontendDisplaySettings();
                frontendDisplayManager.updateSettings(settings);
                console.log('[InfoBarSettings] ⚙️ 前端显示设置已更新');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新前端显示管理器设置失败:', error);
        }
    }

    /**
     * 收集前端显示设置
     */
    collectFrontendDisplaySettings() {
        const settings = {};

        try {
            const modal = this.modal;
            if (modal) {
                const inputs = modal.querySelectorAll('[name^="frontendDisplay."]');
                inputs.forEach(input => {
                    const key = input.name.replace('frontendDisplay.', '');
                    settings[key] = input.type === 'checkbox' ? input.checked : input.value;
                });
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 收集前端显示设置失败:', error);
        }

        return settings;
    }

    /**
     * 禁用原有信息栏渲染
     */
    disableOriginalInfoBarRendering() {
        try {
            console.log('[InfoBarSettings] 🚫 禁用原有信息栏渲染');

            const infoBarTool = window.SillyTavernInfobar;
            const messageInfoBarRenderer = infoBarTool?.modules?.messageInfoBarRenderer;

            if (messageInfoBarRenderer) {
                // 临时禁用信息栏渲染器
                messageInfoBarRenderer.frontendDisplayMode = true;
                console.log('[InfoBarSettings] ✅ 原有信息栏渲染已禁用');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 禁用原有信息栏渲染失败:', error);
        }
    }

    /**
     * 恢复原有信息栏渲染
     */
    restoreOriginalInfoBarRendering() {
        try {
            console.log('[InfoBarSettings] 🔄 恢复原有信息栏渲染');

            const infoBarTool = window.SillyTavernInfobar;
            const messageInfoBarRenderer = infoBarTool?.modules?.messageInfoBarRenderer;

            if (messageInfoBarRenderer) {
                messageInfoBarRenderer.frontendDisplayMode = false;
                console.log('[InfoBarSettings] ✅ 原有信息栏渲染已恢复');
            }

            // 显示被隐藏的信息栏
            const hiddenInfoBars = document.querySelectorAll('.message-infobar[style*="display: none"], .infobar-panel[style*="display: none"]');
            hiddenInfoBars.forEach(infoBar => {
                infoBar.style.display = '';
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 恢复原有信息栏渲染失败:', error);
        }
    }

    /**
     * 切换前端显示相关设置区域的显示状态
     */
    toggleFrontendDisplaySections(enabled) {
        try {
            const configSection = this.modal.querySelector('.frontend-display-config');
            const previewSection = this.modal.querySelector('.frontend-display-preview');
            const advancedSection = this.modal.querySelector('.frontend-display-advanced');

            if (configSection) {
                configSection.style.display = enabled ? 'block' : 'none';
            }
            if (previewSection) {
                previewSection.style.display = enabled ? 'block' : 'none';
            }
            if (advancedSection) {
                advancedSection.style.display = enabled ? 'block' : 'none';
            }

            console.log(`[InfoBarSettings] 🖥️ 前端显示区域切换: ${enabled ? '显示' : '隐藏'}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换前端显示区域失败:', error);
        }
    }

    /**
     * 测试面板弹窗
     */
    testPanelPopup() {
        try {
            console.log('[InfoBarSettings] 🧪 测试面板弹窗');

            // 创建模拟的面板弹窗
            const popup = document.createElement('div');
            popup.className = 'demo-panel-popup';
            popup.style.setProperty('position', 'fixed', 'important');
            popup.style.setProperty('top', '0', 'important');
            popup.style.setProperty('left', '0', 'important');
            popup.style.setProperty('right', '0', 'important');
            popup.style.setProperty('bottom', '0', 'important');
            popup.style.setProperty('width', '100vw', 'important');
            popup.style.setProperty('height', '100vh', 'important');
            popup.style.setProperty('display', 'flex', 'important');
            popup.style.setProperty('align-items', 'center', 'important');
            popup.style.setProperty('justify-content', 'center', 'important');
            popup.style.setProperty('z-index', '10000', 'important');
            popup.style.setProperty('background', 'rgba(0,0,0,0.5)', 'important');

            popup.innerHTML = `
                <div class="demo-popup-content" style="
                    background: var(--theme-bg-primary, #2a2a2a);
                    color: var(--theme-text-primary, #ffffff);
                    border: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                    border-radius: 12px;
                    padding: 0;
                    min-width: 300px;
                    max-width: 90vw;
                    min-height: 200px;
                    max-height: 90vh;
                    overflow-y: auto;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                    position: relative;
                    margin: 0;
                ">
                    <div class="demo-popup-header">
                        <h3>👤 个人信息</h3>
                        <button class="demo-close-btn">×</button>
                    </div>
                    <div class="demo-popup-body">
                        <div class="demo-field">
                            <span class="field-label">姓名:</span>
                            <span class="field-value">张三</span>
                        </div>
                        <div class="demo-field">
                            <span class="field-label">年龄:</span>
                            <span class="field-value">25</span>
                        </div>
                        <div class="demo-field">
                            <span class="field-label">职业:</span>
                            <span class="field-value">程序员</span>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(popup);

            // 3秒后自动关闭
            setTimeout(() => {
                if (popup.parentNode) {
                    popup.parentNode.removeChild(popup);
                }
            }, 3000);

            // 点击关闭按钮
            popup.querySelector('.demo-close-btn').addEventListener('click', () => {
                if (popup.parentNode) {
                    popup.parentNode.removeChild(popup);
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 测试面板弹窗失败:', error);
        }
    }

    /**
     * 测试添加面板
     */
    testAddPanel() {
        try {
            console.log('[InfoBarSettings] 🧪 测试添加面板');

            // 创建添加面板的选择菜单
            const menu = document.createElement('div');
            menu.className = 'demo-add-panel-menu';
            menu.innerHTML = `
                <div class="demo-menu-content">
                    <div class="menu-header">
                        <h3>添加到${area === 'top' ? '顶部' : '底部'}区域</h3>
                        <button class="menu-close-btn">&times;</button>
                    </div>
                    <div class="menu-body">
                        <div class="menu-layout">
                            <!-- 左侧面板导航 -->
                            <div class="panel-navigation">
                                <h4>📋 启用的面板 (${Object.keys(enabledPanels).length})</h4>
                                <div class="panel-list">
                                    ${panelListHtml}
                                </div>
                            </div>

                            <!-- 右侧子项列表 -->
                            <div class="subitem-list">
                                ${subitemListHtml}
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // 定位菜单（移动端全屏遮罩，桌面端居中）
            const isMobile = window.innerWidth <= 768;
            menu.style.position = 'fixed';
            menu.style.zIndex = '10000';
            if (isMobile) {
                // 全屏遮罩
                menu.style.left = '0';
                menu.style.top = '0';
                menu.style.width = '100vw';
                menu.style.height = '100vh';
                menu.style.background = 'rgba(0, 0, 0, 0.5)';
                menu.style.backdropFilter = 'blur(4px)';
                menu.style.display = 'flex';
                menu.style.alignItems = 'center';
                menu.style.justifyContent = 'center';

                // 内容容器限制尺寸并居中
                const menuContent = menu.querySelector('.demo-menu-content');
                if (menuContent) {
                    menuContent.style.width = '90vw';
                    menuContent.style.maxWidth = '360px';
                    menuContent.style.maxHeight = '80vh';
                    menuContent.style.overflow = 'auto';
                    menuContent.style.borderRadius = '12px';
                }
            } else {
                // 桌面居中
                menu.style.left = '50%';
                menu.style.top = '50%';
                menu.style.transform = 'translate(-50%, -50%)';
            }

            // 添加到页面
            document.body.appendChild(menu);

            // 点击遮罩关闭（仅移动端全屏时）
            if (isMobile) {
                menu.addEventListener('click', (evt) => {
                    const content = menu.querySelector('.demo-menu-content');
                    if (content && !content.contains(evt.target)) {
                        menu.remove();
                    }
                });
            }

            // 绑定关闭按钮
            const closeBtn = menu.querySelector('.menu-close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    menu.remove();
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 测试添加面板失败:', error);
        }
    }
    /**
     * 切换面板分类（简化版：只有全部面板）
     */
    switchPanelCategory(category) {
        try {
            // 简化：只有全部面板分类，无需切换逻辑
            console.log(`[InfoBarSettings] 📑 面板分类已简化，只显示全部面板`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换面板分类失败:', error);
        }
    }

    /**
     * 选择面板进行编辑
     */
    async selectPanelForEdit(panelId, panelType) {
        try {
            console.log(`[InfoBarSettings] 🎯 开始选择面板: ${panelId} (${panelType})`);

            // 🔧 修复：验证面板ID和类型的有效性
            if (!panelId || !panelType) {
                console.error('[InfoBarSettings] ❌ 面板ID或类型无效:', { panelId, panelType });
                return;
            }

            // 🔧 修复：检查面板是否真实存在
            let panelExists = false;
            if (panelType === 'basic') {
                const basicPanelIds = ['personal', 'interaction', 'tasks', 'world', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];
                panelExists = basicPanelIds.includes(panelId);
            } else if (panelType === 'custom') {
                const customPanels = this.getCustomPanels();
                panelExists = customPanels.hasOwnProperty(panelId);
            }

            if (!panelExists) {
                console.error('[InfoBarSettings] ❌ 面板不存在:', panelId, panelType);
                this.showMessage(`面板 ${panelId} 不存在`, 'error');
                return;
            }

            // 🔧 修复：切换面板前自动保存当前正在编辑的面板，避免勾选状态丢失（静默保存，不弹确认框）
            if (this.currentEditingPanel && this.modal?.querySelector('.panel-properties-form')) {
                try {
                    // 仅在表单可见时尝试保存，且不打断用户
                    const propertiesForm = this.modal.querySelector('.panel-properties-form');
                    if (propertiesForm && propertiesForm.style.display !== 'none') {
                        // 使用静默保存，不弹确认对话框
                        const { id, type } = this.currentEditingPanel;
                        await this.performSavePanelProperties(id, type);
                        console.log('[InfoBarSettings] 💾 静默保存当前面板:', id);
                    }
                } catch (e) {
                    console.warn('[InfoBarSettings] ⚠️ 自动保存当前面板失败，将继续切换:', e);
                }
            }

            // 🔧 修复：更新面板列表项选中状态，使用更精确的选择器
            this.modal.querySelectorAll('.panel-list-item').forEach(item => {
                const itemPanelId = item.dataset.panelId;
                const itemPanelType = item.dataset.panelType;
                const shouldSelect = (itemPanelId === panelId && itemPanelType === panelType);

                if (shouldSelect) {
                    item.classList.add('selected');
                    console.log('[InfoBarSettings] ✅ 选中面板项:', itemPanelId, itemPanelType);
                } else {
                    item.classList.remove('selected');
                }
            });

            // 显示面板属性表单
            this.showPanelProperties(panelId, panelType);

            console.log(`[InfoBarSettings] ✅ 面板选择完成: ${panelId} (${panelType})`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 选择面板失败:', error);
            this.showMessage('选择面板失败: ' + error.message, 'error');
        }
    }

    /**
     * 显示面板属性
     */
    showPanelProperties(panelId, panelType) {
        try {
            const noSelectionMessage = this.modal.querySelector('.no-selection-message');
            const propertiesForm = this.modal.querySelector('.panel-properties-form');
            const saveBtn = this.modal.querySelector('[data-action="save-panel-properties"]');
            const deleteBtn = this.modal.querySelector('[data-action="delete-panel"]');

            // 🔧 修复：在显示面板属性前，预防性清理子项容器，防止UI污染
            const container = this.modal.querySelector('.sub-items-container');
            if (container) {
                container.querySelectorAll('.sub-item-form').forEach(item => item.remove());
                console.log(`[InfoBarSettings] 🧹 预防性清理子项容器，准备显示面板: ${panelId} (${panelType})`);
            }

            // 隐藏无选择消息，显示属性表单
            noSelectionMessage.style.display = 'none';
            propertiesForm.style.display = 'block';

            // 启用/禁用按钮
            saveBtn.disabled = false;
            deleteBtn.disabled = panelType === 'basic'; // 基础面板不能删除

            // 加载面板数据到表单
            this.loadPanelDataToForm(panelId, panelType);

            // 存储当前编辑的面板信息
            this.currentEditingPanel = { id: panelId, type: panelType };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示面板属性失败:', error);
        }
    }

    /**
     * 显示自定义面板添加对话框
     */
    showCustomPanelDialog() {
        try {
            console.log('[InfoBarSettings] 📋 显示自定义面板添加对话框');

            // 创建对话框背景
            const dialogOverlay = document.createElement('div');
            dialogOverlay.className = 'custom-panel-dialog-overlay';

            // 🔧 设置完美居中样式 - 参考面板规则编辑界面
            dialogOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                opacity: 0;
                visibility: visible;
                transition: opacity 0.3s ease;
            `;

            dialogOverlay.innerHTML = `
                <div class="custom-panel-dialog" style="
                    background: var(--theme-bg-primary, #2a2a2a);
                    color: var(--theme-text-primary, #ffffff);
                    border: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                    border-radius: 12px;
                    padding: 0;
                    width: 500px;
                    max-width: 90vw;
                    max-height: 80vh;
                    overflow-y: auto;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                ">
                    <div class="dialog-header" style="
                        padding: 20px 24px 16px;
                        border-bottom: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                    ">
                        <h3 style="margin: 0; color: var(--theme-text-primary, #ffffff); font-size: 18px;">添加自定义面板</h3>
                        <button class="dialog-close-btn" style="
                            background: none;
                            border: none;
                            color: var(--theme-text-secondary, #aaa);
                            font-size: 24px;
                            cursor: pointer;
                            padding: 0;
                            width: 32px;
                            height: 32px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            border-radius: 4px;
                        ">×</button>
                    </div>
                    <div class="dialog-content" style="padding: 20px 24px;">
                        <div class="form-group" style="margin-bottom: 16px;">
                            <label for="new-panel-name" style="
                                display: block;
                                margin-bottom: 8px;
                                color: var(--theme-text-primary, #ffffff);
                                font-weight: 500;
                            ">面板名称:</label>
                            <input type="text" id="new-panel-name" placeholder="请输入面板名称" value="新建面板" style="
                                width: 100%;
                                padding: 12px;
                                border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                                border-radius: 6px;
                                background: var(--theme-bg-secondary, rgba(255,255,255,0.05));
                                color: var(--theme-text-primary, #ffffff);
                                font-size: 14px;
                                box-sizing: border-box;
                            ">
                        </div>
                        <div class="form-group" style="margin-bottom: 16px;">
                            <label for="new-panel-key" style="
                                display: block;
                                margin-bottom: 8px;
                                color: var(--theme-text-primary, #ffffff);
                                font-weight: 500;
                            ">键名:</label>
                            <input type="text" id="new-panel-key" placeholder="自动生成，可修改" value="" style="
                                width: 100%;
                                padding: 12px;
                                border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                                border-radius: 6px;
                                background: var(--theme-bg-secondary, rgba(255,255,255,0.05));
                                color: var(--theme-text-primary, #ffffff);
                                font-size: 14px;
                                box-sizing: border-box;
                            ">
                        </div>
                        <div class="form-group" style="margin-bottom: 0;">
                            <label for="new-panel-description" style="
                                display: block;
                                margin-bottom: 8px;
                                color: var(--theme-text-primary, #ffffff);
                                font-weight: 500;
                            ">面板说明:</label>
                            <textarea id="new-panel-description" placeholder="请输入面板说明" rows="3" style="
                                width: 100%;
                                padding: 12px;
                                border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                                border-radius: 6px;
                                background: var(--theme-bg-secondary, rgba(255,255,255,0.05));
                                color: var(--theme-text-primary, #ffffff);
                                font-size: 14px;
                                resize: vertical;
                                min-height: 80px;
                                box-sizing: border-box;
                            ">这是一个自定义面板</textarea>
                        </div>
                    </div>
                    <div class="dialog-footer" style="
                        padding: 16px 24px 20px;
                        border-top: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                        display: flex;
                        justify-content: flex-end;
                        gap: 12px;
                    ">
                        <button class="btn-cancel" style="
                            padding: 10px 20px;
                            border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                            border-radius: 6px;
                            background: transparent;
                            color: var(--theme-text-secondary, #aaa);
                            cursor: pointer;
                            font-size: 14px;
                        ">关闭</button>
                        <button class="btn-confirm" style="
                            padding: 10px 20px;
                            border: none;
                            border-radius: 6px;
                            background: var(--theme-primary-color, #4299e1);
                            color: var(--theme-text-primary, #ffffff);
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                        ">确认添加</button>
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(dialogOverlay);

            // 🔧 添加显示动画
            setTimeout(() => {
                dialogOverlay.style.opacity = '1';
            }, 10);

            // 🔧 调试：检查对话框初始值
            console.log('[InfoBarSettings] 🔍 对话框初始值检查:');
            console.log('  面板名称默认值:', document.getElementById('new-panel-name').value);
            console.log('  当前编辑的面板:', this.currentEditingPanel);

            // 生成默认键名
            const customPanels = this.getCustomPanels();
            const defaultKey = this.generateKeyFromName('新建面板');
            const uniqueKey = this.ensureUniqueKey(defaultKey, customPanels);
            document.getElementById('new-panel-key').value = uniqueKey;

            console.log('  生成的默认键名:', defaultKey, '->', uniqueKey);

            // 🔧 防护：确保默认值不被覆盖
            setTimeout(() => {
                const currentName = document.getElementById('new-panel-name').value;
                const currentKey = document.getElementById('new-panel-key').value;
                console.log('[InfoBarSettings] 🔍 对话框延迟检查(500ms后):');
                console.log('  面板名称当前值:', currentName);
                console.log('  键名当前值:', currentKey);

                // 如果值被意外修改，恢复默认值
                if (currentName !== '新建面板') {
                    console.warn('[InfoBarSettings] ⚠️ 检测到面板名称被异常修改，恢复默认值');
                    document.getElementById('new-panel-name').value = '新建面板';
                    document.getElementById('new-panel-key').value = uniqueKey;
                }
            }, 500);

            // 绑定事件
            const closeBtn = dialogOverlay.querySelector('.dialog-close-btn');
            const cancelBtn = dialogOverlay.querySelector('.btn-cancel');
            const confirmBtn = dialogOverlay.querySelector('.btn-confirm');

            // 关闭对话框函数
            const closeDialog = () => {
                dialogOverlay.remove();
            };

            // 关闭按钮事件
            closeBtn.addEventListener('click', closeDialog);
            cancelBtn.addEventListener('click', closeDialog);

            // 点击背景关闭
            dialogOverlay.addEventListener('click', (e) => {
                if (e.target === dialogOverlay) {
                    closeDialog();
                }
            });

            // 面板名称变化时自动生成键名
            const nameInput = document.getElementById('new-panel-name');
            const keyInput = document.getElementById('new-panel-key');

            nameInput.addEventListener('input', (e) => {
                const name = e.target.value.trim();
                console.log('[InfoBarSettings] 🔍 面板名称输入变化:', name);
                if (name) {
                    const newKey = this.generateKeyFromName(name);
                    const uniqueKey = this.ensureUniqueKey(newKey, customPanels);
                    console.log('  自动生成键名:', newKey, '->', uniqueKey);
                    keyInput.value = uniqueKey;
                }
            });

            // 确认添加事件
            confirmBtn.addEventListener('click', () => {
                const name = document.getElementById('new-panel-name').value.trim();
                const key = document.getElementById('new-panel-key').value.trim();
                const description = document.getElementById('new-panel-description').value.trim();

                // 🔧 调试：检查用户确认时的值
                console.log('[InfoBarSettings] 🔍 用户确认添加时的值:');
                console.log('  面板名称:', name);
                console.log('  键名:', key);
                console.log('  面板说明:', description);
                console.log('  当前编辑的面板:', this.currentEditingPanel);

                // 验证输入
                if (!name) {
                    alert('请输入面板名称');
                    return;
                }

                if (!key) {
                    alert('请输入键名');
                    return;
                }

                // 验证键名格式
                if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(key)) {
                    alert('键名只能包含英文字母、数字和下划线，且不能以数字开头');
                    return;
                }

                // 检查键名是否已存在
                if (customPanels[key]) {
                    alert('该键名已存在，请使用其他键名');
                    return;
                }

                // 创建面板数据
                const panelData = {
                    name: name,
                    key: key,
                    description: description,
                    icon: '🎨' // 固定使用默认图标
                };

                // 关闭对话框
                closeDialog();

                // 执行添加面板
                this.addCustomPanel(panelData);
            });

            // 键名输入验证
            keyInput.addEventListener('input', (e) => {
                let value = e.target.value;
                // 只允许字母、数字、下划线
                value = value.replace(/[^a-zA-Z0-9_]/g, '');
                // 不能以数字开头
                if (/^[0-9]/.test(value)) {
                    value = '_' + value;
                }
                e.target.value = value;
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示自定义面板对话框失败:', error);
        }
    }

    /**
     * 添加自定义面板
     */
    async addCustomPanel(panelData = null) {
        try {
            // 如果没有提供面板数据，显示对话框
            if (!panelData) {
                this.showCustomPanelDialog();
                return;
            }

            console.log('[InfoBarSettings] 📊 添加自定义面板:', panelData);

            // 🔧 修复：创建新的自定义面板，使用键名作为ID
            const newPanel = {
                id: panelData.key,  // 🔧 修复：使用键名作为ID，确保与信息栏系统设计一致
                name: panelData.name,
                key: panelData.key,
                description: panelData.description,
                icon: panelData.icon,
                type: 'custom',
                enabled: true,
                required: false,
                memoryInject: false,

                prompts: {
                    init: '',
                    insert: '',
                    update: '',
                    delete: ''
                },
                subItems: [],
                createdAt: Date.now(),
                updatedAt: Date.now()
            };

            // 保存到自定义面板配置
            await this.saveCustomPanel(newPanel);

            // 刷新面板列表
            this.refreshPanelList();

            // 刷新导航栏（添加自定义面板到导航）
            this.refreshNavigation();

            // 自动选择新建的面板
            this.selectPanelForEdit(newPanel.id, 'custom');

            console.log('[InfoBarSettings] ✅ 添加自定义面板成功:', newPanel.id, '键名:', newPanel.key);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加自定义面板失败:', error);
        }
    }

    /**
     * 刷新面板列表
     */
    refreshPanelList() {
        try {
            // 检查modal是否存在
            if (!this.modal) {
                console.log('[InfoBarSettings] ⚠️ Modal不存在，跳过刷新面板列表');
                return;
            }

            console.log('[InfoBarSettings] 🔄 开始刷新面板列表...');

            // 🔧 修复：保存当前选中的面板ID，刷新后恢复选中状态
            const currentSelectedPanel = this.modal.querySelector('.panel-list-item.selected');
            const currentSelectedPanelId = currentSelectedPanel?.dataset?.panelId;
            const currentSelectedPanelType = currentSelectedPanel?.dataset?.panelType;

            console.log('[InfoBarSettings] 📊 当前选中面板:', currentSelectedPanelId, currentSelectedPanelType);

            // 重新生成面板列表
            const panelListContainers = this.modal.querySelectorAll('.panel-list');

            panelListContainers.forEach(container => {
                const category = container.dataset.category;
                const newContent = this.createPanelListItems(category);
                console.log(`[InfoBarSettings] 🔄 刷新${category}分类面板列表`);
                container.innerHTML = newContent;
            });

            // 🔧 修复：刷新后恢复选中状态
            if (currentSelectedPanelId) {
                setTimeout(() => {
                    const newSelectedPanel = this.modal.querySelector(`[data-panel-id="${currentSelectedPanelId}"]`);
                    if (newSelectedPanel) {
                        newSelectedPanel.classList.add('selected');
                        console.log('[InfoBarSettings] ✅ 已恢复面板选中状态:', currentSelectedPanelId);
                    } else {
                        console.warn('[InfoBarSettings] ⚠️ 刷新后未找到之前选中的面板:', currentSelectedPanelId);
                        // 清空面板属性表单
                        this.clearPanelProperties();
                    }
                }, 100);
            }

            // 更新面板数量
            this.updatePanelCountsDisplay();

            console.log('[InfoBarSettings] ✅ 面板列表刷新完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新面板列表失败:', error);
        }
    }

    /**
     * 更新面板数量显示
     */
    updatePanelCountsDisplay() {
        try {
            const totalCount = this.getTotalPanelCount();

            // 只更新全部面板的计数
            const allCategoryCount = this.modal.querySelector('[data-category="all"] .category-count');
            if (allCategoryCount) {
                allCategoryCount.textContent = totalCount;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新面板数量失败:', error);
        }
    }

    /**
     * 更新基础设置面板配置计数显示
     */
    updateBasicPanelCount() {
        try {
            const countElement = this.modal.querySelector('#basic-settings-count');
            if (!countElement) return;

            // 获取基础设置面板的复选框
            const allCheckboxes = this.modal.querySelectorAll('.basic-settings-vertical input[type="checkbox"][name]');
            const enabledCheckboxes = this.modal.querySelectorAll('.basic-settings-vertical input[type="checkbox"][name]:checked');

            const totalCount = allCheckboxes.length;
            const enabledCount = enabledCheckboxes.length;

            countElement.textContent = `${enabledCount}/${totalCount} 项已配置`;

            console.log(`[InfoBarSettings] 📊 基础设置面板配置计数更新: ${enabledCount}/${totalCount}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新基础设置面板配置计数失败:', error);
        }
    }

    /**
     * 更新指定面板的配置计数显示和状态标签
     */
    updatePanelConfigCount(panelName) {
        try {
            const countElement = this.modal.querySelector(`[data-content="${panelName}"] .status-count`);
            const statusBadge = this.modal.querySelector(`[data-content="${panelName}"] .status-badge`);
            if (!countElement) return;

            // 获取该面板的复选框
            const panelContainer = this.modal.querySelector(`[data-content="${panelName}"]`);
            if (!panelContainer) return;

            // 🔧 修复：排除面板主启用复选框，只计算子项复选框
            // 面板主启用复选框的name格式为 "panelName.enabled"
            const allCheckboxes = panelContainer.querySelectorAll(`input[type="checkbox"][name]:not([name="${panelName}.enabled"])`);
            const enabledCheckboxes = panelContainer.querySelectorAll(`input[type="checkbox"][name]:checked:not([name="${panelName}.enabled"])`);

            const totalCount = allCheckboxes.length;
            const enabledCount = enabledCheckboxes.length;

            countElement.textContent = `${enabledCount}/${totalCount} 项已配置`;

            // 🔧 修复：更新状态标签，根据面板主启用复选框状态
            if (statusBadge) {
                const panelToggle = panelContainer.querySelector(`input[name="${panelName}.enabled"]`);
                if (panelToggle) {
                    const isEnabled = panelToggle.checked;
                    statusBadge.textContent = isEnabled ? '已启用' : '未启用';
                    statusBadge.className = `status-badge ${isEnabled ? 'enabled' : 'disabled'}`;
                }
            }

            console.log(`[InfoBarSettings] 📊 ${panelName}面板配置计数更新: ${enabledCount}/${totalCount}`);

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新${panelName}面板配置计数失败:`, error);
        }
    }

    /**
     * 根据复选框所在面板更新对应的计数
     */
    updatePanelCounts(checkbox) {
        try {
            // 找到复选框所在的面板
            const panelContainer = checkbox.closest('[data-content]');
            if (!panelContainer) return;

            const panelName = panelContainer.getAttribute('data-content');

            // 根据面板类型更新对应的计数
            if (panelName === 'basic') {
                this.updateBasicPanelCount();
            } else {
                // 检查是否是自定义面板
                const customPanels = this.getCustomPanels();
                const customPanel = customPanels[panelName];

                if (customPanel) {
                    // 自定义面板
                    this.updateCustomPanelCount(panelName, customPanel);
                } else {
                    // 基础面板
                    this.updatePanelConfigCount(panelName);
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新面板计数失败:', error);
        }
    }

    /**
     * 更新自定义面板的配置计数显示
     */
    updateCustomPanelCount(panelId, panel) {
        try {
            const countElement = this.modal.querySelector(`#${panelId}-panel-count`);
            if (!countElement) {
                console.warn(`[InfoBarSettings] ⚠️ 未找到自定义面板计数元素: ${panelId}-panel-count`);
                return;
            }

            // 获取当前面板的所有复选框
            const subItems = panel.subItems || [];
            const enabledSubItems = subItems.filter(subItem => {
                const fieldName = subItem.name || subItem.key || subItem.id;
                const checkbox = this.modal.querySelector(`input[name="${fieldName}"]`);
                return checkbox && checkbox.checked;
            });

            const totalCount = subItems.length;
            const enabledCount = enabledSubItems.length;

            countElement.textContent = `${enabledCount}/${totalCount} 项已配置`;

            console.log(`[InfoBarSettings] 📊 自定义面板${panel.name}配置计数更新: ${enabledCount}/${totalCount}`);

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新自定义面板配置计数失败:`, error);
        }
    }

    /**
     * 更新所有面板的配置计数
     */
    updateAllPanelCounts() {
        try {
            // 更新基础设置面板计数
            this.updateBasicPanelCount();

            // 更新所有基础面板计数
            const basicPanels = ['personal', 'interaction', 'tasks', 'world', 'organization',
                               'news', 'inventory', 'abilities', 'plot', 'cultivation',
                               'fantasy', 'modern', 'historical', 'magic', 'training'];

            basicPanels.forEach(panelName => {
                this.updatePanelConfigCount(panelName);
            });

            // 更新所有自定义面板计数
            const customPanels = this.getCustomPanels();
            for (const [panelId, panel] of Object.entries(customPanels)) {
                this.updateCustomPanelCount(panelId, panel);
            }

            console.log('[InfoBarSettings] 📊 所有面板配置计数已更新');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新所有面板计数失败:', error);
        }
    }

    /**
     * 保存自定义面板
     */
    async saveCustomPanel(panel) {
        try {
            // 🔧 参数验证：确保面板数据完整性
            if (!panel) {
                console.error('[InfoBarSettings] ❌ 面板数据为空');
                return false;
            }

            if (!panel.id || panel.id === 'undefined') {
                console.error('[InfoBarSettings] ❌ 面板ID无效:', panel.id);
                return false;
            }

            if (!panel.name || panel.name === 'undefined') {
                console.error('[InfoBarSettings] ❌ 面板名称无效:', panel.name);
                return false;
            }

            if (!panel.type || panel.type === 'undefined') {
                console.error('[InfoBarSettings] ❌ 面板类型无效:', panel.type);
                return false;
            }

            console.log('[InfoBarSettings] 📊 保存面板数据验证通过:', panel.id, panel.name);

            // 获取现有自定义面板
            const customPanels = this.getCustomPanels();

            // 🔧 修复：使用键名作为存储键，确保与信息栏系统设计一致
            customPanels[panel.key] = panel;

            // 保存到全局配置（保持兼容性）
            window.InfoBarCustomPanels = customPanels;

            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 保存自定义面板数据（保持兼容性）
            extensionSettings['Information bar integration tool'].customPanels = customPanels;

            // 🔧 修复：也将自定义面板配置保存到根级别，让mergeWithEnabledFields能够读取
            // 这样自定义面板的子项配置就能被正确识别为启用字段
            extensionSettings['Information bar integration tool'][panel.key] = {
                enabled: panel.enabled !== false, // 默认启用
                subItems: panel.subItems || [],
                description: panel.description || '',
                icon: panel.icon || '',
                type: 'custom',
                key: panel.key,
                name: panel.name
            };

            console.log(`[InfoBarSettings] 🔧 自定义面板配置已同步到根级别: ${panel.key}, 子项数量: ${panel.subItems?.length || 0}`);

            // 触发 SillyTavern 保存设置
            context.saveSettingsDebounced();

            // 🔧 新增：清理缓存，确保下次获取映射时重新生成
            this._cachedCompleteMapping = null;

            console.log('[InfoBarSettings] ✅ 自定义面板已保存:', panel.id);
            return true;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存自定义面板失败:', error);
            return false;
        }
    }

    /**
     * 编辑面板
     */
    editPanel(panelId) {
        // 选择面板进行编辑（与点击面板项相同）
        const panelItem = this.modal.querySelector(`[data-panel-id="${panelId}"]`);
        if (panelItem) {
            const panelType = panelItem.dataset.panelType;
            this.selectPanelForEdit(panelId, panelType);
        }
    }

    /**
     * 查看面板
     */
    viewPanel(panelId) {
        // 基础面板只能查看，不能编辑
        this.editPanel(panelId);
    }

    /**
     * 复制面板
     */
    async duplicatePanel(panelId) {
        try {
            const customPanels = this.getCustomPanels();
            const originalPanel = customPanels[panelId];

            if (!originalPanel) {
                console.error('[InfoBarSettings] ❌ 未找到要复制的面板:', panelId);
                return;
            }

            // 🔧 修复：创建副本，使用键名作为ID
            const newKey = `${originalPanel.key}_copy_${Date.now()}`;
            const duplicatedPanel = {
                ...originalPanel,
                id: newKey,  // 🔧 修复：使用键名作为ID
                name: `${originalPanel.name} - 副本`,
                key: newKey,
                createdAt: Date.now(),
                updatedAt: Date.now()
            };

            // 保存副本
            await this.saveCustomPanel(duplicatedPanel);

            // 刷新列表
            this.refreshPanelList();

            console.log('[InfoBarSettings] 📋 面板复制完成:', duplicatedPanel.id);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 复制面板失败:', error);
        }
    }

    /**
     * 切换面板启用状态
     */
    async togglePanel(panelId) {
        try {
            // 对于基础面板，切换导航显示状态
            // 对于自定义面板，切换启用状态
            const panelItem = this.modal.querySelector(`[data-panel-id="${panelId}"]`);
            const panelType = panelItem?.dataset.panelType;

            if (panelType === 'custom') {
                const customPanels = this.getCustomPanels();
                const panel = customPanels[panelId];

                if (panel) {
                    panel.enabled = !panel.enabled;
                    panel.updatedAt = Date.now();
                    await this.saveCustomPanel(panel);
                }
            }

            // 刷新面板列表
            this.refreshPanelList();

            console.log('[InfoBarSettings] 🔄 切换面板状态:', panelId);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换面板状态失败:', error);
        }
    }

    /**
     * 保存面板属性
     */
    async savePanelProperties() {
        try {
            if (!this.currentEditingPanel) {
                console.error('[InfoBarSettings] ❌ 没有正在编辑的面板');
                return;
            }

            const { id, type } = this.currentEditingPanel;
            const panelName = this.currentEditingPanel.name || id;

            // 显示保存确认对话框
            this.showSaveConfirmDialog(panelName, async () => {
                await this.performSavePanelProperties(id, type);
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存面板属性失败:', error);
            this.showMessage('面板保存失败: ' + error.message, 'error');
        }
    }

    /**
     * 执行保存面板属性操作
     */
    async performSavePanelProperties(id, type) {
        try {

            if (type === 'basic') {
                // 🔧 修复：基础面板也需要保存功能
                console.log('[InfoBarSettings] 💾 保存基础面板属性:', id);

                // 🔧 修复：基础面板单独收集表单数据，不包含子项
            // 读取当前勾选状态，避免因DOM重绘造成状态丢失
            const form = this.modal.querySelector('.panel-properties-form');
            const memoryInjectChecked = !!form?.querySelector('#panel-memory-inject')?.checked;
            const requiredChecked = !!form?.querySelector('#panel-required')?.checked;

            const formData = this.collectBasicPanelFormData();
            // 覆盖关键布尔位，以当前UI为准
            formData.memoryInject = memoryInjectChecked;
            formData.required = requiredChecked;

                // 保存到extensionSettings
                const context = SillyTavern.getContext();
                const extensionSettings = context.extensionSettings;

                if (!extensionSettings['Information bar integration tool']) {
                    extensionSettings['Information bar integration tool'] = {};
                }

                if (!extensionSettings['Information bar integration tool'][id]) {
                    extensionSettings['Information bar integration tool'][id] = {};
                }

                // 更新基础面板配置
                Object.assign(extensionSettings['Information bar integration tool'][id], formData);

                // 🔧 修复：基础面板现在允许保存用户添加的子项数据
                // 不再删除子项数据，允许用户为基础面板添加自定义子项
                console.log('[InfoBarSettings] 💾 基础面板子项数据已保存:', formData.subItems?.length || 0, '个');

                // 保存设置
                context.saveSettingsDebounced();

                // 🔧 修复：刷新对应的基础面板内容，确保新增的子项在基础设置中显示
                this.refreshBasicPanelContent(id);
                console.log(`[InfoBarSettings] 🔄 已刷新基础面板 ${id} 的设置页面内容`);

                console.log('[InfoBarSettings] ✅ 基础面板属性保存成功:', id);
                this.showMessage('基础面板保存成功', 'success');

                return;
            }

            // 收集表单数据
            const formData = this.collectPanelFormData();

            // 收集子项数据
            const subItemsData = this.collectSubItemsData();
            formData.subItems = subItemsData;

            console.log('[InfoBarSettings] 📊 收集到的表单数据:', formData);
            console.log('[InfoBarSettings] 📊 收集到的子项数据:', subItemsData);

            // 更新面板配置
            const customPanels = this.getCustomPanels();
            const panel = customPanels[id];

            if (panel) {
                Object.assign(panel, formData, { updatedAt: Date.now() });
                await this.saveCustomPanel(panel);

                // 刷新面板列表
                this.refreshPanelList();

                // 刷新导航栏（更新自定义面板内容）
                this.refreshNavigation();

                // 如果当前正在查看这个面板的内容，也需要更新右侧内容区域
                const activeNavItem = this.modal.querySelector('.nav-item.active');
                if (activeNavItem && activeNavItem.dataset.nav === id) {
                    // 更新右侧内容面板
                    const contentPanel = this.modal.querySelector(`.content-panel[data-content="${id}"]`);
                    if (contentPanel) {
                        contentPanel.innerHTML = this.createCustomPanelContent(panel);
                        console.log('[InfoBarSettings] 🔄 已更新右侧内容面板显示');
                    }
                }

                console.log('[InfoBarSettings] ✅ 面板属性保存成功:', id, '包含', subItemsData.length, '个子项');

                // 显示保存成功提示
                this.showMessage('面板保存成功', 'success');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 执行保存面板属性操作失败:', error);
            this.showMessage('面板保存失败: ' + error.message, 'error');
        }
    }

    /**
     * 删除面板
     */
    async deletePanel() {
        try {
            if (!this.currentEditingPanel) {
                console.error('[InfoBarSettings] ❌ 没有正在编辑的面板');
                return;
            }

            const { id, type } = this.currentEditingPanel;

            if (type === 'basic') {
                console.error('[InfoBarSettings] ❌ 不能删除基础面板');
                return;
            }

            // 显示删除确认对话框
            this.showDeleteConfirmDialog('面板', id, async () => {
                await this.performDeletePanel(id);
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 删除面板失败:', error);
            this.showMessage('面板删除失败: ' + error.message, 'error');
        }
    }

    /**
     * 执行删除面板操作
     */
    async performDeletePanel(id) {
        try {
            // 从自定义面板中删除
            const customPanels = this.getCustomPanels();
            delete customPanels[id];

            // 保存配置
            window.InfoBarCustomPanels = customPanels;

            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 保存自定义面板数据
            extensionSettings['Information bar integration tool'].customPanels = customPanels;

            // 🔧 修复：也从根级别删除自定义面板配置
            delete extensionSettings['Information bar integration tool'][id];
            console.log(`[InfoBarSettings] 🔧 已从根级别删除自定义面板配置: ${id}`);

            // 触发 SillyTavern 保存设置
            context.saveSettingsDebounced();

            // 清空属性表单
            this.clearPanelProperties();

            // 刷新面板列表
            this.refreshPanelList();

            // 刷新导航栏（移除自定义面板从导航）
            this.refreshNavigation();

            console.log('[InfoBarSettings] 🗑️ 面板删除成功:', id);

            // 显示删除成功提示
            this.showMessage('面板删除成功', 'success');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 执行删除面板操作失败:', error);
            this.showMessage('面板删除失败: ' + error.message, 'error');
        }
    }
    /**
     * 显示子项添加对话框
     */
    showSubItemDialog() {
        try {
            console.log('[InfoBarSettings] 📋 显示子项添加对话框');

            // 检查是否有正在编辑的面板
            if (!this.currentEditingPanel) {
                console.error('[InfoBarSettings] ❌ 没有正在编辑的面板，无法添加子项');
                alert('请先选择要添加子项的面板');
                return;
            }

            // 创建对话框背景
            const dialogOverlay = document.createElement('div');
            dialogOverlay.className = 'sub-item-dialog-overlay';

            // 🔧 设置完美居中样式 - 参考面板规则编辑界面
            dialogOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                opacity: 0;
                visibility: visible;
                transition: opacity 0.3s ease;
            `;

            dialogOverlay.innerHTML = `
                <div class="sub-item-dialog" style="
                    background: var(--theme-bg-primary, #2a2a2a);
                    color: var(--theme-text-primary, #ffffff);
                    border: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                    border-radius: 12px;
                    padding: 0;
                    width: 450px;
                    max-width: 90vw;
                    max-height: 80vh;
                    overflow-y: auto;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                ">
                    <div class="dialog-header" style="
                        padding: 20px 24px 16px;
                        border-bottom: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                    ">
                        <h3 style="margin: 0; color: var(--theme-text-primary, #ffffff); font-size: 18px;">添加子项到面板: ${this.currentEditingPanel.name}</h3>
                        <button class="dialog-close-btn" style="
                            background: none;
                            border: none;
                            color: var(--theme-text-secondary, #aaa);
                            font-size: 24px;
                            cursor: pointer;
                            padding: 0;
                            width: 32px;
                            height: 32px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            border-radius: 4px;
                        ">×</button>
                    </div>
                    <div class="dialog-content" style="padding: 20px 24px;">
                        <div class="form-group" style="margin-bottom: 0;">
                            <label for="subitem-name" style="
                                display: block;
                                margin-bottom: 8px;
                                color: var(--theme-text-primary, #ffffff);
                                font-weight: 500;
                            ">子项名称:</label>
                            <input type="text" id="subitem-name" placeholder="请输入子项名称" value="新建子项" style="
                                width: 100%;
                                padding: 12px;
                                border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                                border-radius: 6px;
                                background: var(--theme-bg-secondary, rgba(255,255,255,0.05));
                                color: var(--theme-text-primary, #ffffff);
                                font-size: 14px;
                                box-sizing: border-box;
                                margin-bottom: 8px;
                            ">
                            <small class="form-help" style="
                                color: var(--theme-text-secondary, #aaa);
                                font-size: 12px;
                                display: block;
                            ">注意：子项名称将直接作为键名使用</small>
                        </div>
                    </div>
                    <div class="dialog-footer" style="
                        padding: 16px 24px 20px;
                        border-top: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                        display: flex;
                        justify-content: flex-end;
                        gap: 12px;
                    ">
                        <button class="btn-cancel" style="
                            padding: 10px 20px;
                            border: 1px solid var(--theme-border-color, rgba(255,255,255,0.2));
                            border-radius: 6px;
                            background: transparent;
                            color: var(--theme-text-secondary, #aaa);
                            cursor: pointer;
                            font-size: 14px;
                        ">关闭</button>
                        <button class="btn-confirm" style="
                            padding: 10px 20px;
                            border: none;
                            border-radius: 6px;
                            background: var(--theme-primary-color, #4299e1);
                            color: var(--theme-text-primary, #ffffff);
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                        ">确认添加</button>
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(dialogOverlay);

            // 🔧 添加显示动画
            setTimeout(() => {
                dialogOverlay.style.opacity = '1';
            }, 10);

            // 不需要生成键名，名称就是键名

            // 绑定事件
            const closeBtn = dialogOverlay.querySelector('.dialog-close-btn');
            const cancelBtn = dialogOverlay.querySelector('.btn-cancel');
            const confirmBtn = dialogOverlay.querySelector('.btn-confirm');

            // 关闭对话框函数
            const closeDialog = () => {
                dialogOverlay.remove();
            };

            // 关闭按钮事件
            closeBtn.addEventListener('click', closeDialog);
            cancelBtn.addEventListener('click', closeDialog);

            // 点击背景关闭
            dialogOverlay.addEventListener('click', (e) => {
                if (e.target === dialogOverlay) {
                    closeDialog();
                }
            });

            // 确认添加事件
            confirmBtn.addEventListener('click', () => {
                const name = document.getElementById('subitem-name').value.trim();

                // 验证输入
                if (!name) {
                    alert('请输入子项名称');
                    return;
                }

                // 检查名称是否已存在（在当前面板的子项中）
                const existingSubItems = this.currentEditingPanel.subItems || [];
                if (existingSubItems.some(item => item.name === name || item.key === name)) {
                    alert('该子项名称在当前面板中已存在，请使用其他名称');
                    return;
                }

                // 创建子项数据（名称就是键名）
                const subItemData = {
                    name: name,
                    key: name,
                    description: ''
                };

                // 关闭对话框
                closeDialog();

                // 执行添加子项
                this.addSubItem(subItemData);
            });

            // 子项名称输入时进行基础验证
            const nameInput = document.getElementById('subitem-name');
            nameInput.addEventListener('input', (e) => {
                // 可以添加一些基础的名称验证逻辑
                const value = e.target.value;
                // 这里可以根据需要添加名称格式验证
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示子项对话框失败:', error);
        }
    }

    /**
     * 从面板名称生成英文键名
     */
    generateKeyFromName(name) {
        // 基础的中文到英文映射
        const chineseToEnglish = {
            '新建': 'new',
            '面板': 'panel',
            '自定义': 'custom',
            '用户': 'user',
            '设置': 'settings',
            '配置': 'config',
            '管理': 'manage',
            '系统': 'system',
            '数据': 'data',
            '信息': 'info',
            '交互': 'interaction',
            '对象': 'object',
            '个人': 'personal',
            '任务': 'task',
            '世界': 'world',
            '组织': 'organization',
            '新闻': 'news',
            '库存': 'inventory',
            '能力': 'ability',
            '剧情': 'plot',
            '修真': 'cultivation',
            '奇幻': 'fantasy',
            '现代': 'modern',
            '历史': 'historical',
            '魔法': 'magic',
            '训练': 'training'
        };

        let key = name.toLowerCase();

        // 替换中文字符为英文（在替换时添加分隔符）
        for (const [chinese, english] of Object.entries(chineseToEnglish)) {
            key = key.replace(new RegExp(chinese, 'g'), `_${english}_`);
        }

        // 移除空格和特殊字符，只保留字母数字下划线
        key = key.replace(/[^a-zA-Z0-9]/g, '_');

        // 移除连续的下划线
        key = key.replace(/_+/g, '_');

        // 移除开头和结尾的下划线
        key = key.replace(/^_+|_+$/g, '');

        // 如果键名为空或以数字开头，添加前缀
        if (!key || /^[0-9]/.test(key)) {
            key = 'custom_' + key;
        }

        return key || 'custom_panel';
    }

    /**
     * 确保键名唯一性
     */
    ensureUniqueKey(baseKey, existingPanels) {
        let uniqueKey = baseKey;
        let counter = 1;

        while (existingPanels[uniqueKey]) {
            uniqueKey = `${baseKey}_${counter}`;
            counter++;
        }

        return uniqueKey;
    }

    /**
     * 显示删除确认对话框
     */
    showDeleteConfirmDialog(type, name, onConfirm) {
        try {
            console.log(`[InfoBarSettings] 📋 显示删除确认对话框: ${type} - ${name}`);

            // 创建对话框背景
            const dialogOverlay = document.createElement('div');
            dialogOverlay.className = 'delete-confirm-dialog-overlay';
            dialogOverlay.innerHTML = `
                <div class="delete-confirm-dialog">
                    <div class="dialog-header">
                        <h3>确认删除</h3>
                        <button class="dialog-close-btn">×</button>
                    </div>
                    <div class="dialog-content">
                        <div class="warning-icon">⚠️</div>
                        <div class="warning-message">
                            <p>您确定要删除${type}"<strong>${name}</strong>"吗？</p>
                            <p class="warning-text">此操作不可撤销，删除后所有相关数据将丢失。</p>
                        </div>
                    </div>
                    <div class="dialog-footer">
                        <button class="btn-cancel">取消</button>
                        <button class="btn-delete">确认删除</button>
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(dialogOverlay);

            // 绑定事件
            const closeBtn = dialogOverlay.querySelector('.dialog-close-btn');
            const cancelBtn = dialogOverlay.querySelector('.btn-cancel');
            const deleteBtn = dialogOverlay.querySelector('.btn-delete');

            // 关闭对话框函数
            const closeDialog = () => {
                dialogOverlay.remove();
            };

            // 关闭按钮事件
            closeBtn.addEventListener('click', closeDialog);
            cancelBtn.addEventListener('click', closeDialog);

            // 点击背景关闭
            dialogOverlay.addEventListener('click', (e) => {
                if (e.target === dialogOverlay) {
                    closeDialog();
                }
            });

            // 确认删除事件
            deleteBtn.addEventListener('click', () => {
                closeDialog();
                if (onConfirm) {
                    onConfirm();
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示删除确认对话框失败:', error);
        }
    }

    /**
     * 显示保存确认对话框
     */
    showSaveConfirmDialog(panelName, onConfirm) {
        try {
            console.log(`[InfoBarSettings] 📋 显示保存确认对话框: ${panelName}`);

            // 创建对话框背景
            const dialogOverlay = document.createElement('div');
            dialogOverlay.className = 'save-confirm-dialog-overlay';
            dialogOverlay.innerHTML = `
                <div class="save-confirm-dialog">
                    <div class="dialog-header">
                        <h3>确认保存</h3>
                        <button class="dialog-close-btn">×</button>
                    </div>
                    <div class="dialog-content">
                        <div class="info-icon">💾</div>
                        <div class="info-message">
                            <p>您确定要保存面板"<strong>${panelName}</strong>"的配置吗？</p>
                            <p class="info-text">保存后新的配置将生效。</p>
                        </div>
                    </div>
                    <div class="dialog-footer">
                        <button class="btn-cancel">取消</button>
                        <button class="btn-save">确认保存</button>
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(dialogOverlay);

            // 绑定事件
            const closeBtn = dialogOverlay.querySelector('.dialog-close-btn');
            const cancelBtn = dialogOverlay.querySelector('.btn-cancel');
            const saveBtn = dialogOverlay.querySelector('.btn-save');

            // 关闭对话框函数
            const closeDialog = () => {
                dialogOverlay.remove();
            };

            // 关闭按钮事件
            closeBtn.addEventListener('click', closeDialog);
            cancelBtn.addEventListener('click', closeDialog);

            // 点击背景关闭
            dialogOverlay.addEventListener('click', (e) => {
                if (e.target === dialogOverlay) {
                    closeDialog();
                }
            });

            // 确认保存事件
            saveBtn.addEventListener('click', () => {
                closeDialog();
                if (onConfirm) {
                    onConfirm();
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示保存确认对话框失败:', error);
        }
    }

    /**
     * 添加子项
     */
    addSubItem(subItemData = null) {
        try {
            // 检查是否有正在编辑的面板
            if (!this.currentEditingPanel) {
                console.error('[InfoBarSettings] ❌ 没有正在编辑的面板，无法添加子项');
                return;
            }

            // 如果没有提供子项数据，显示对话框
            if (!subItemData) {
                this.showSubItemDialog();
                return;
            }

            console.log('[InfoBarSettings] 📝 当前编辑面板:', this.currentEditingPanel);
            console.log('[InfoBarSettings] 📊 添加子项:', subItemData);

            // 创建新的子项
            const newSubItem = {
                id: `sub_${Date.now()}`,
                name: subItemData.name,
                key: subItemData.key,
                description: subItemData.description || ''
            };

            // 添加到子项容器（UI显示）
            this.addSubItemToContainer(newSubItem);

            console.log('[InfoBarSettings] ➕ 添加子项到面板:', this.currentEditingPanel.id, '子项:', newSubItem.id);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加子项失败:', error);
        }
    }

    /**
     * 删除子项
     */
    removeSubItem(buttonElement) {
        try {
            // 找到子项表单元素
            const subItemForm = buttonElement.closest('.sub-item-form');
            if (!subItemForm) {
                console.error('[InfoBarSettings] ❌ 未找到子项表单');
                return;
            }

            const subItemId = subItemForm.dataset.subItemId;
            const subItemName = subItemForm.querySelector('.sub-item-name')?.value || subItemId;

            // 显示删除确认对话框
            this.showDeleteConfirmDialog('子项', subItemName, () => {
                this.performRemoveSubItem(subItemForm, subItemId);
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 删除子项失败:', error);
        }
    }

    /**
     * 执行删除子项操作
     */
    performRemoveSubItem(subItemForm, subItemId) {
        try {
            // 1) 先从UI移除
            subItemForm.remove();

            // 2) 读取当前编辑的面板信息
            const current = this.currentEditingPanel || {};
            const panelId = current.id;
            const panelType = current.type;

            // 3) 获取被删子项的名称/键名，便于多条件匹配
            const nameInput = subItemForm.querySelector?.('.sub-item-name');
            const subItemName = (nameInput?.value || '').trim();
            const subItemKey = subItemName ? subItemName.toLowerCase().replace(/\s+/g, '_') : null;

            // 4) 更新空状态显示
            const container = this.modal.querySelector('.sub-items-container');
            const remainingSubItems = container.querySelectorAll('.sub-item-form');
            const emptyMessage = container.querySelector('.empty-sub-items');
            if (remainingSubItems.length === 0 && emptyMessage) {
                emptyMessage.style.display = 'block';
            }

            // 5) 持久化删除到配置（根因：之前仅删UI，未写入配置，切换后又被配置恢复）
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            if (!panelId) {
                console.warn('[InfoBarSettings] ⚠️ 无法确定当前面板ID，跳过持久化删除');
            } else if (panelType === 'custom') {
                // 自定义面板：从 customPanels 与 根级镜像配置 同步删除
                const customPanels = this.getCustomPanels();
                const panel = customPanels[panelId];
                if (panel && Array.isArray(panel.subItems)) {
                    const before = panel.subItems.length;
                    panel.subItems = panel.subItems.filter(item =>
                        item.id !== subItemId && item.key !== subItemKey && item.name !== subItemName
                    );
                    const after = panel.subItems.length;
                    console.log(`[InfoBarSettings] 🧹 自定义面板 ${panelId} 子项已从内存删除: ${before} -> ${after}`);

                    // 根级镜像（用于数据表格/其他模块读取）
                    const mirrorKey = panel.key || panelId;
                    if (!extensionSettings['Information bar integration tool'][mirrorKey]) {
                        extensionSettings['Information bar integration tool'][mirrorKey] = { enabled: panel.enabled !== false };
                    }
                    extensionSettings['Information bar integration tool'][mirrorKey].subItems = panel.subItems;
                }
            } else if (panelType === 'basic') {
                // 基础面板：写入根级配置的 subItems
                const panelConfig = extensionSettings['Information bar integration tool'][panelId];
                if (panelConfig && Array.isArray(panelConfig.subItems)) {
                    const before = panelConfig.subItems.length;
                    panelConfig.subItems = panelConfig.subItems.filter(item =>
                        item.id !== subItemId && item.key !== subItemKey && item.name !== subItemName
                    );
                    const after = panelConfig.subItems.length;
                    console.log(`[InfoBarSettings] 🧹 基础面板 ${panelId} 子项已从配置删除: ${before} -> ${after}`);
                }
            }

            // 6) 保存并更新计数/通知
            if (typeof context.saveSettingsDebounced === 'function') {
                context.saveSettingsDebounced();
            }

            if (panelId) {
                // 更新面板计数显示
                this.updatePanelConfigCount(panelId);

                // 立即刷新相关UI，避免“影子字段”仍显示
                if (panelType === 'basic') {
                    this.refreshBasicPanelContent(panelId);
                } else if (panelType === 'custom') {
                    // 重新渲染自定义面板区块（导航与内容）
                    this.refreshNavigation();
                }

                // 通知其他模块（如数据表格）
                if (this.eventSystem) {
                    this.eventSystem.emit('panel:config:changed', {
                        panelId,
                        panelType: panelType || 'custom',
                        subItemRemoved: true,
                        removedId: subItemId,
                        timestamp: Date.now()
                    });
                }
            }

            console.log('[InfoBarSettings] 🗑️ 删除子项成功（已持久化）:', { panelId, panelType, subItemId, subItemName });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 执行删除子项操作失败:', error);
        }
    }

    /**
     * 刷新基础面板内容，显示用户添加的子项
     */
    refreshBasicPanelContent(panelId) {
        try {
            if (!this.modal) {
                console.log('[InfoBarSettings] ⚠️ Modal不存在，跳过刷新基础面板内容');
                return;
            }

            // 🔧 修复：检查modal是否已经在DOM中并且可见
            if (!document.body.contains(this.modal) || this.modal.style.display === 'none') {
                console.log(`[InfoBarSettings] ⚠️ Modal未显示或不在DOM中，跳过刷新基础面板 ${panelId} 内容`);
                return;
            }

            // 获取对应的内容面板
            const contentPanel = this.modal.querySelector(`[data-content="${panelId}"]`);
            if (!contentPanel) {
                console.log(`[InfoBarSettings] ⚠️ 未找到基础面板 ${panelId} 的内容面板`);
                return;
            }

            // 🔧 修复：直接从配置中获取该面板的自定义子项，避免交叉污染
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const savedConfig = extensionSettings['Information bar integration tool']?.[panelId];

            // 🔧 修复：只获取当前面板的自定义子项
            const customSubItems = savedConfig?.subItems || [];

            if (customSubItems.length === 0) {
                console.log(`[InfoBarSettings] ℹ️ 基础面板 ${panelId} 没有自定义子项，跳过刷新`);
                // 🔧 修复：清理可能存在的旧自定义子项区域
                const existingCustomArea = contentPanel.querySelector('.custom-sub-items-area');
                if (existingCustomArea) {
                    existingCustomArea.remove();
                    console.log(`[InfoBarSettings] 🧹 已清理基础面板 ${panelId} 的旧自定义子项区域`);
                }
                return;
            }

            // 查找子项容器
            let subItemsContainer = contentPanel.querySelector('.sub-items');
            if (!subItemsContainer) {
                console.log(`[InfoBarSettings] ⚠️ 基础面板 ${panelId} 没有子项容器`);
                return;
            }

            // 🔧 修复：验证自定义子项是否真的属于当前面板
            const validCustomSubItems = customSubItems.filter(subItem => {
                // 检查子项是否有明确的面板归属标记
                if (subItem.panelId && subItem.panelId !== panelId) {
                    console.warn(`[InfoBarSettings] ⚠️ 发现错误归属的自定义子项: ${subItem.name} 属于 ${subItem.panelId}，但被添加到 ${panelId}`);
                    return false;
                }
                return true;
            });

            // 创建自定义子项的HTML
            let customSubItemsHTML = '';
            validCustomSubItems.forEach((subItem, index) => {
                const checkboxId = `${panelId}-custom-${index}`;
                const fieldName = `${panelId}.${subItem.key || subItem.name.toLowerCase().replace(/\s+/g, '_')}.enabled`;

                customSubItemsHTML += `
                    <div class="sub-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox"
                                   id="${checkboxId}"
                                   name="${fieldName}"
                                   ${subItem.enabled !== false ? 'checked' : ''} />
                            <label for="${checkboxId}" class="checkbox-label">${subItem.displayName || subItem.name}</label>
                        </div>
                    </div>
                `;
            });

            if (customSubItemsHTML) {
                // 🔧 修复：先清理所有可能存在的自定义子项区域，避免重复添加
                const existingCustomAreas = contentPanel.querySelectorAll('.custom-sub-items-area');
                existingCustomAreas.forEach(area => area.remove());

                // 创建自定义子项区域
                const customArea = document.createElement('div');
                customArea.className = 'custom-sub-items-area';
                customArea.setAttribute('data-panel-id', panelId); // 🔧 修复：添加面板ID标记
                customArea.innerHTML = `
                    <div class="sub-item-section">
                        <h4 class="section-title">🔧 自定义子项</h4>
                        <div class="sub-item-row">
                            ${customSubItemsHTML}
                        </div>
                    </div>
                `;

                // 插入到子项容器的末尾
                subItemsContainer.appendChild(customArea);

                // 🔧 修复：应用当前主题样式到自定义子项区域
                this.applyThemeToCustomSubItems(customArea, panelId);

                console.log(`[InfoBarSettings] ✅ 已为基础面板 ${panelId} 添加 ${validCustomSubItems.length} 个自定义子项`);

                // 更新面板计数
                this.updatePanelConfigCount(panelId);
            } else {
                console.log(`[InfoBarSettings] ℹ️ 基础面板 ${panelId} 没有有效的自定义子项`);
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 刷新基础面板 ${panelId} 内容失败:`, error);
        }
    }

    /**
     * 🔧 新增：刷新所有基础面板内容，确保新增子项立即显示
     */
    refreshAllBasicPanelContent() {
        try {
            console.log('[InfoBarSettings] 🔄 开始刷新所有基础面板内容...');

            const basicPanelIds = ['personal', 'interaction', 'tasks', 'world', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];

            let refreshedCount = 0;
            basicPanelIds.forEach(panelId => {
                const panelData = this.getBasicPanelData(panelId);
                if (panelData && panelData.subItems && panelData.subItems.length > 0) {
                    // 临时移除modal可见性检查，强制刷新
                    this.forceRefreshBasicPanelContent(panelId);
                    refreshedCount++;
                }
            });

            console.log(`[InfoBarSettings] ✅ 已刷新 ${refreshedCount} 个基础面板的内容`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新所有基础面板内容失败:', error);
        }
    }

    /**
     * 🔧 新增：强制刷新基础面板内容（忽略modal可见性检查）
     */
    forceRefreshBasicPanelContent(panelId) {
        try {
            if (!this.modal) {
                console.log('[InfoBarSettings] ⚠️ Modal不存在，跳过强制刷新基础面板内容');
                return;
            }

            // 获取对应的内容面板
            const contentPanel = this.modal.querySelector(`[data-content="${panelId}"]`);
            if (!contentPanel) {
                console.log(`[InfoBarSettings] ⚠️ 未找到基础面板 ${panelId} 的内容面板`);
                return;
            }

            // 🔧 修复：直接从配置中获取该面板的自定义子项，避免交叉污染
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const savedConfig = extensionSettings['Information bar integration tool']?.[panelId];

            // 🔧 修复：只获取当前面板的自定义子项
            const customSubItems = savedConfig?.subItems || [];

            if (customSubItems.length === 0) {
                console.log(`[InfoBarSettings] ℹ️ 基础面板 ${panelId} 没有自定义子项，跳过强制刷新`);
                return;
            }

            // 查找子项容器
            let subItemsContainer = contentPanel.querySelector('.sub-items');
            if (!subItemsContainer) {
                console.log(`[InfoBarSettings] ⚠️ 基础面板 ${panelId} 没有子项容器`);
                return;
            }

            // 创建自定义子项的HTML
            let customSubItemsHTML = '';
            panelData.subItems.forEach((subItem, index) => {
                const checkboxId = `${panelId}-custom-${index}`;
                const fieldName = `${panelId}.${subItem.key || subItem.name.toLowerCase().replace(/\s+/g, '_')}.enabled`;

                customSubItemsHTML += `
                    <div class="sub-item">
                        <div class="checkbox-wrapper">
                            <input type="checkbox"
                                   id="${checkboxId}"
                                   name="${fieldName}"
                                   ${subItem.enabled !== false ? 'checked' : ''} />
                            <label for="${checkboxId}" class="checkbox-label">${subItem.displayName || subItem.name}</label>
                        </div>
                    </div>
                `;
            });

            if (customSubItemsHTML) {
                // 如果已经存在自定义子项区域，先删除
                const existingCustomArea = contentPanel.querySelector('.custom-sub-items-area');
                if (existingCustomArea) {
                    existingCustomArea.remove();
                }

                // 创建自定义子项区域
                const customArea = document.createElement('div');
                customArea.className = 'custom-sub-items-area';
                customArea.innerHTML = `
                    <div class="sub-item-section">
                        <h4 class="section-title">🔧 自定义子项</h4>
                        <div class="sub-item-row">
                            ${customSubItemsHTML}
                        </div>
                    </div>
                `;

                // 插入到子项容器的末尾
                subItemsContainer.appendChild(customArea);

                // 🔧 修复：应用当前主题样式到自定义子项区域
                this.applyThemeToCustomSubItems(customArea, panelId);

                console.log(`[InfoBarSettings] ✅ 已强制为基础面板 ${panelId} 添加 ${panelData.subItems.length} 个自定义子项`);

                // 更新面板计数
                this.updatePanelConfigCount(panelId);
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 强制刷新基础面板 ${panelId} 内容失败:`, error);
        }
    }

    /**
     * 刷新导航栏（添加/移除自定义面板）
     */
    refreshNavigation() {
        try {
            // 检查modal是否存在
            if (!this.modal) {
                console.log('[InfoBarSettings] ⚠️ Modal不存在，跳过刷新导航栏');
                return;
            }

            const sidebar = this.modal.querySelector('.sidebar-nav');
            const contentArea = this.modal.querySelector('.content-area');
            if (!sidebar || !contentArea) {
                console.error('[InfoBarSettings] ❌ 未找到导航栏或内容区域');
                console.log('[InfoBarSettings] 🔍 模态框结构:', this.modal ? '存在' : '不存在');
                if (this.modal) {
                    console.log('[InfoBarSettings] 🔍 查找 .sidebar-nav:', !!this.modal.querySelector('.sidebar-nav'));
                    console.log('[InfoBarSettings] 🔍 查找 .content-area:', !!this.modal.querySelector('.content-area'));
                }
                return;
            }

            // 获取自定义面板
            const customPanels = this.getCustomPanels();
            const customPanelArray = Object.values(customPanels);

            // 🔧 更稳健的去重清理：按ID集合和标记清理，避免重复
            const customIds = new Set(customPanelArray.map(p => p.id));

            // 1) 清理带标记的数据
            sidebar.querySelectorAll('.nav-item[data-custom="true"]').forEach(nav => nav.remove());
            contentArea.querySelectorAll('.content-panel[data-custom="true"]').forEach(panel => panel.remove());

            // 2) 兼容旧元素：按ID匹配清理
            sidebar.querySelectorAll('.nav-item').forEach(nav => {
                const id = nav.dataset.nav;
                if (id && customIds.has(id)) {
                    nav.remove();
                }
            });
            contentArea.querySelectorAll('.content-panel').forEach(panel => {
                const id = panel.dataset.content;
                if (id && customIds.has(id)) {
                    panel.remove();
                }
            });

            console.log('[InfoBarSettings] 📊 获取到的自定义面板数据:', customPanels);
            console.log('[InfoBarSettings] 📊 转换后的数组长度:', customPanelArray.length);

            // 找到主题设置导航项，在它之前插入自定义面板
            const themeNavItem = sidebar.querySelector('.nav-item[data-nav="theme"]');

            // 为每个自定义面板创建导航项和内容面板
            console.log('[InfoBarSettings] 🔧 开始创建自定义面板导航，数组长度:', customPanelArray.length);

            customPanelArray.forEach((panel, index) => {
                console.log(`[InfoBarSettings] 🔧 创建第${index + 1}个自定义面板:`, panel.id, panel.name);

                // 创建导航项
                const navItem = document.createElement('div');
                navItem.className = 'nav-item';
                navItem.dataset.nav = panel.id;
                navItem.dataset.custom = 'true';
                navItem.innerHTML = `

                    <span class="nav-text">${panel.name}</span>
                `;

                // 在主题设置之前插入导航项
                if (themeNavItem) {
                    sidebar.insertBefore(navItem, themeNavItem);
                } else {
                    sidebar.appendChild(navItem);
                }

                // 创建内容面板
                const contentPanel = document.createElement('div');
                contentPanel.className = 'content-panel';
                contentPanel.dataset.content = panel.id;
                contentPanel.dataset.custom = 'true';
                contentPanel.innerHTML = this.createCustomPanelContent(panel);

                // 添加到内容区域
                contentArea.appendChild(contentPanel);

                // 应用主题并绑定自定义子项交互（确保复选框事件与样式）
                this.applyThemeToCustomSubItems(contentPanel, panel.id);

                console.log(`[InfoBarSettings] ✅ 第${index + 1}个自定义面板创建完成`);
            });

            // 应用当前主题到新创建的自定义面板
            this.applyCurrentThemeToCustomPanels();

            console.log('[InfoBarSettings] 🔄 导航栏已刷新，添加了', customPanelArray.length, '个自定义面板');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新导航栏失败:', error);
        }
    }

    /**
     * 应用当前主题样式到自定义子项区域
     */
    applyThemeToCustomSubItems(customArea, panelId) {
        try {
            if (!customArea) return;

            // 获取当前主题配置
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};
            const currentTheme = configs.theme?.current || 'neon-blue';

            // 应用主题样式到自定义子项区域
            const subItemSection = customArea.querySelector('.sub-item-section');
            if (subItemSection) {
                subItemSection.setAttribute('data-theme', currentTheme);

                // 应用主题到所有复选框
                const checkboxes = customArea.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    checkbox.setAttribute('data-theme', currentTheme);

                    // 🔧 修复：为每个自定义子项复选框绑定变更事件，同步数据表格
                    checkbox.addEventListener('change', (e) => {
                        this.handleCustomSubItemChange(e, panelId);
                    });
                });

                // 应用主题到标签
                const labels = customArea.querySelectorAll('.checkbox-label');
                labels.forEach(label => {
                    label.setAttribute('data-theme', currentTheme);
                });

                console.log(`[InfoBarSettings] 🎨 已应用主题 ${currentTheme} 到自定义子项区域`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用主题到自定义子项失败:', error);
        }
    }

    /**
     * 处理自定义子项复选框变更事件，同步数据表格
     */
    handleCustomSubItemChange(event, panelId) {
        try {
            const checkbox = event.target;
            const fieldName = checkbox.name;
            const isEnabled = checkbox.checked;

            console.log(`[InfoBarSettings] 🔄 基础面板 ${panelId} 自定义子项变更: ${fieldName} = ${isEnabled}`);

            // 触发面板配置变更事件，通知数据表格更新
            if (this.eventSystem) {
                this.eventSystem.emit('panel:config:changed', {
                    panelId: panelId,
                    panelType: 'basic',
                    subItemChanged: true,
                    fieldName: fieldName,
                    enabled: isEnabled,
                    timestamp: Date.now()
                });
                console.log('[InfoBarSettings] 📋 已触发面板配置变更事件，通知数据表格更新');
            }

            // 立即保存变更到配置中
            this.saveCustomSubItemState(panelId, fieldName, isEnabled);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理自定义子项变更失败:', error);
        }
    }

    /**
     * 保存自定义子项状态到配置
     */
    saveCustomSubItemState(panelId, fieldName, isEnabled) {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 获取基础面板配置
            const panelConfig = extensionSettings['Information bar integration tool'][panelId];
            if (panelConfig && panelConfig.subItems) {
                // 查找对应的子项并更新状态
                const subItemKey = fieldName.split('.')[1]; // 从 'panelId.key.enabled' 中提取 key
                const subItem = panelConfig.subItems.find(item =>
                    item.key === subItemKey ||
                    item.name.toLowerCase().replace(/\s+/g, '_') === subItemKey
                );

                if (subItem) {
                    subItem.enabled = isEnabled;
                    console.log(`[InfoBarSettings] 💾 已保存自定义子项状态: ${subItem.name} = ${isEnabled}`);

                    // 保存到 SillyTavern
                    context.saveSettingsDebounced();
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存自定义子项状态失败:', error);
        }
    }

    /**
     * 应用当前主题到自定义面板
     */
    applyCurrentThemeToCustomPanels() {
        try {
            // 获取当前主题
            const activeThemeCard = this.modal.querySelector('.theme-preview-card.active');
            if (!activeThemeCard) {
                console.log('[InfoBarSettings] 🎨 未找到激活的主题，跳过自定义面板主题应用');
                return;
            }

            const themeId = activeThemeCard.getAttribute('data-theme');
            const theme = this.getThemeById(themeId);
            if (!theme) {
                console.log('[InfoBarSettings] 🎨 未找到主题配置，跳过自定义面板主题应用');
                return;
            }

            // 🔧 修复：查找所有自定义面板导航项（使用键名ID格式）
            const customNavItems = this.modal.querySelectorAll('.nav-item[data-nav^="Custom"]');
            const customContentPanels = this.modal.querySelectorAll('.content-panel[data-content^="Custom"]');

            console.log('[InfoBarSettings] 🎨 应用主题到', customNavItems.length, '个自定义导航项');

            // 应用主题到自定义导航项
            customNavItems.forEach(navItem => {
                navItem.style.backgroundColor = theme.colors.bg;
                navItem.style.color = theme.colors.text;
                navItem.style.borderColor = theme.colors.border;
            });

            // 应用主题到自定义内容面板
            customContentPanels.forEach(contentPanel => {
                contentPanel.style.backgroundColor = theme.colors.bg;
                contentPanel.style.color = theme.colors.text;
                contentPanel.style.borderColor = theme.colors.border;
            });

            console.log('[InfoBarSettings] ✅ 自定义面板主题应用完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用自定义面板主题失败:', error);
        }
    }

    /**
     * 创建自定义面板内容
     */
    createCustomPanelContent(panel) {
        // 计算子项配置状态
        const subItems = panel.subItems || [];
        const enabledSubItems = subItems.filter(item => item.enabled !== false);
        const statusText = `${enabledSubItems.length}/${subItems.length} 项已配置`;

        return `
            <div class="content-header">
                <h3>${panel.name}</h3>
            </div>

            <div class="content-body">
                <!-- 自定义面板卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">📄</div>
                            <div class="card-text">
                                <div class="card-title">${panel.name}</div>
                                <div class="card-subtitle">${panel.description}</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" name="${panel.key}.enabled" id="${panel.id}-enabled" ${panel.enabled ? 'checked' : ''} />
                                <label for="${panel.id}-enabled" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge ${panel.enabled ? 'enabled' : 'disabled'}">${panel.enabled ? '已启用' : '未启用'}</span>
                            <span class="status-count" id="${panel.id}-panel-count">${statusText}</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    ${this.createCustomPanelSubItems(panel.subItems || [])}
                </div>
            </div>
        `;
    }

    /**
     * 创建自定义面板子项（与基础面板一致的两列布局）
     */
    createCustomPanelSubItems(subItems) {
        if (!subItems || subItems.length === 0) {
            return `
                <div class="empty-sub-items">
                    <div class="empty-icon">📝</div>
                    <div class="empty-text">暂无子项配置</div>
                </div>
            `;
        }

        // 将子项按两个一组分组，实现两列布局
        const rows = [];
        for (let i = 0; i < subItems.length; i += 2) {
            const leftItem = subItems[i];
            const rightItem = subItems[i + 1];

            const leftItemHtml = this.createSubItemHtml(leftItem);
            const rightItemHtml = rightItem ? this.createSubItemHtml(rightItem) : '<div class="sub-item"></div>'; // 空占位符

            rows.push(`
                <div class="sub-item-row">
                    ${leftItemHtml}
                    ${rightItemHtml}
                </div>
            `);
        }

        return rows.join('');
    }

    /**
     * 创建单个子项HTML（增强版：支持多行数据配置）
     */
    createSubItemHtml(subItem) {
        if (!subItem) return '<div class="sub-item"></div>';

        // 确保子项有enabled属性，默认为true
        const isEnabled = subItem.enabled !== false;
        // 使用子项的name作为表单字段名，确保能被collectFormData收集
        const fieldName = subItem.name || subItem.key || subItem.id;

        return `
            <div class="sub-item">
                <div class="checkbox-wrapper">
                    <input type="checkbox"
                           id="${subItem.id}"
                           name="${fieldName}"
                           ${isEnabled ? 'checked' : ''} />
                    <label for="${subItem.id}" class="checkbox-label">
                        ${subItem.name}
                    </label>
                </div>
            </div>
        `;
    }



    /**
     * 收集基础面板表单数据（不包含子项）
     */
    collectBasicPanelFormData() {
        try {
            const form = this.modal.querySelector('.panel-properties-form');
            const formData = {};

            // 基本信息（基础面板的name和key不保存，使用默认值）
            // formData.name = form.querySelector('#panel-name')?.value || '';  // 基础面板名称不可修改
            // formData.key = form.querySelector('#panel-key')?.value || '';    // 基础面板键名不可修改
            formData.description = form.querySelector('#panel-description')?.value || '';
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // formData.icon = form.querySelector('#panel-icon')?.value || '🎨';

            // 配置选项
            formData.required = form.querySelector('#panel-required')?.checked || false;
            formData.memoryInject = form.querySelector('#panel-memory-inject')?.checked || false;


            // 提示词配置
            formData.prompts = {
                init: form.querySelector('#panel-prompt-init')?.value || '',
                insert: form.querySelector('#panel-prompt-insert')?.value || '',
                update: form.querySelector('#panel-prompt-update')?.value || '',
                delete: form.querySelector('#panel-prompt-delete')?.value || ''
            };

            // 🔧 修复：基础面板也需要保存用户添加的子项数据
            formData.subItems = this.collectSubItemsData();

            console.log('[InfoBarSettings] 📊 基础面板表单数据（含子项）:', formData);
            return formData;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 收集基础面板表单数据失败:', error);
            return {};
        }
    }

    /**
     * 收集面板表单数据
     */
    collectPanelFormData() {
        try {
            const form = this.modal.querySelector('.panel-properties-form');
            const formData = {};

            // 基本信息
            formData.name = form.querySelector('#panel-name')?.value || '';
            formData.key = form.querySelector('#panel-key')?.value || '';
            formData.description = form.querySelector('#panel-description')?.value || '';
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // formData.icon = form.querySelector('#panel-icon')?.value || '🎨';

            // 配置选项
            formData.required = form.querySelector('#panel-required')?.checked || false;
            formData.memoryInject = form.querySelector('#panel-memory-inject')?.checked || false;


            // 提示词配置
            formData.prompts = {
                init: form.querySelector('#panel-prompt-init')?.value || '',
                insert: form.querySelector('#panel-prompt-insert')?.value || '',
                update: form.querySelector('#panel-prompt-update')?.value || '',
                delete: form.querySelector('#panel-prompt-delete')?.value || ''
            };

            // 子项配置（从子项容器收集）
            formData.subItems = this.collectSubItemsData();

            return formData;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 收集面板表单数据失败:', error);
            return {};
        }
    }

    /**
     * 收集子项数据（增强版：支持多行数据配置）
     */
    collectSubItemsData() {
        try {
            const subItems = [];

            // 🔧 修复：获取当前正在编辑的面板ID，确保子项归属正确
            const currentPanelId = this.currentEditingPanel?.id;
            if (!currentPanelId) {
                console.warn('[InfoBarSettings] ⚠️ 无法确定当前编辑的面板ID，跳过子项收集');
                return [];
            }

            const subItemElements = this.modal.querySelectorAll('.sub-item-form');

            subItemElements.forEach(element => {
                const name = element.querySelector('.sub-item-name')?.value || '';
                if (name.trim()) { // 只有名称不为空才添加
                    const subItemId = element.dataset.subItemId;
                    const subItemName = name.trim();

                    // 🔧 修复：正确获取自定义面板子项的启用状态
                    // 自定义面板子项的复选框name就是子项名称本身
                    const checkbox = this.modal.querySelector(`input[name="${subItemName}"]`);
                    const isEnabled = checkbox ? checkbox.checked : true; // 如果找不到复选框，默认启用

                    const subItem = {
                        id: subItemId,
                        name: subItemName,
                        key: subItemName.toLowerCase().replace(/\s+/g, '_'), // 名称转换为键名
                        displayName: subItemName, // 保存用户输入的显示名称
                        enabled: isEnabled, // 🔧 修复：使用复选框的真实状态
                        value: '', // 添加默认值字段
                        panelId: currentPanelId // 🔧 修复：添加面板归属标记
                    };

                    console.log(`[InfoBarSettings] 📊 收集子项: ${subItemName} enabled=${isEnabled} panelId=${currentPanelId}`);
                    subItems.push(subItem);
                }
            });

            // 🔧 修复：只从当前面板的自定义子项区域收集子项设置
            const currentPanelContent = this.modal.querySelector(`[data-content="${currentPanelId}"]`);
            if (currentPanelContent) {
                const customSubItemsArea = currentPanelContent.querySelector('.custom-sub-items-area');
                if (customSubItemsArea) {
                    const existingSubItems = customSubItemsArea.querySelectorAll('.sub-item');
                    existingSubItems.forEach(subItemElement => {
                        const checkbox = subItemElement.querySelector('input[type="checkbox"]');

                        if (checkbox) {
                            const fieldName = checkbox.getAttribute('name');
                            const isEnabled = checkbox.checked;

                            // 🔧 修复：提取子项名称，去除面板前缀
                            const subItemName = fieldName.replace(`${currentPanelId}.`, '').replace('.enabled', '');

                            // 查找是否已在subItems中存在
                            let existingSubItem = subItems.find(item =>
                                item.name === subItemName || item.key === subItemName
                            );

                            if (existingSubItem) {
                                // 更新已存在的子项
                                existingSubItem.enabled = isEnabled;
                            } else {
                                // 🔧 修复：只添加属于当前面板的子项
                                if (fieldName.startsWith(`${currentPanelId}.`)) {
                                    const subItem = {
                                        id: `existing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                                        name: subItemName,
                                        key: subItemName.toLowerCase().replace(/\s+/g, '_'),
                                        displayName: subItemName,
                                        enabled: isEnabled,
                                        value: '',
                                        panelId: currentPanelId // 🔧 修复：添加面板归属标记
                                    };
                                    subItems.push(subItem);
                                    console.log(`[InfoBarSettings] 📊 收集现有子项配置: ${subItemName} enabled=${isEnabled} panelId=${currentPanelId}`);
                                }
                            }
                        }
                    });
                }
            }

            console.log('[InfoBarSettings] 📊 收集到的子项数据详情:', subItems);
            return subItems;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 收集子项数据失败:', error);
            return [];
        }
    }

    /**
     * 获取子项默认值
     */
    getSubItemDefaultValue(element) {
        const type = element.querySelector('.sub-item-type')?.value;
        const defaultInput = element.querySelector('.sub-item-default');

        switch (type) {
            case 'checkbox':
                return defaultInput?.checked || false;
            case 'number':
                return parseFloat(defaultInput?.value) || 0;
            default:
                return defaultInput?.value || '';
        }
    }
    /**
     * 获取子项选项（用于select类型）
     */
    getSubItemOptions(element) {
        try {
            const optionsContainer = element.querySelector('.sub-item-options');
            const optionInputs = optionsContainer?.querySelectorAll('.option-input');
            const options = [];

            optionInputs?.forEach(input => {
                const value = input.value.trim();
                if (value) {
                    options.push(value);
                }
            });

            return options;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取子项选项失败:', error);
            return [];
        }
    }

    /**
     * 加载面板数据到表单
     */
    loadPanelDataToForm(panelId, panelType) {
        try {
            let panelData = null;

            if (panelType === 'basic') {
                // 获取基础面板数据
                panelData = this.getBasicPanelData(panelId);
            } else {
                // 获取自定义面板数据
                const customPanels = this.getCustomPanels();
                panelData = customPanels[panelId];
            }

            if (!panelData) {
                console.error('[InfoBarSettings] ❌ 未找到面板数据:', panelId);
                return;
            }

            // 填充基本信息
            this.fillBasicPanelInfo(panelData, panelType);

            // 填充提示词配置
            this.fillPanelPrompts(panelData, panelType);

            // 填充子项配置
            this.fillSubItems(panelData.subItems || []);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载面板数据失败:', error);
        }
    }

    /**
     * 获取基础面板数据
     */
    getBasicPanelData(panelId) {
        // 默认基础面板数据
        const defaultBasicPanelsData = {
            // 移除基础设置面板，它是系统设置，不是面板
            personal: { name: '个人信息', key: 'personal', description: '个人相关信息配置', icon: '👤', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            interaction: { name: '交互对象', key: 'interaction', description: '交互对象相关配置', icon: '👥', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            tasks: { name: '任务系统', key: 'tasks', description: '任务系统相关配置', icon: '📋', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            world: { name: '世界设定', key: 'world', description: '世界设定相关配置', icon: '🌍', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            organization: { name: '组织架构', key: 'organization', description: '组织架构相关配置', icon: '🏢', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            news: { name: '新闻事件', key: 'news', description: '新闻事件相关配置', icon: '📰', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            inventory: { name: '物品清单', key: 'inventory', description: '物品清单相关配置', icon: '🎒', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            abilities: { name: '能力技能', key: 'abilities', description: '能力技能相关配置', icon: '⚡', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            plot: { name: '剧情发展', key: 'plot', description: '剧情发展相关配置', icon: '📖', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            cultivation: { name: '修炼系统', key: 'cultivation', description: '修炼系统相关配置', icon: '🧘', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            fantasy: { name: '玄幻世界', key: 'fantasy', description: '玄幻世界相关配置', icon: '🔮', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            modern: { name: '现代都市', key: 'modern', description: '现代都市相关配置', icon: '🏙️', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            historical: { name: '历史古代', key: 'historical', description: '历史古代相关配置', icon: '🏛️', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            magic: { name: '魔法能力', key: 'magic', description: '魔法能力相关配置', icon: '🪄', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] },
            training: { name: '调教系统', key: 'training', description: '调教系统相关配置', icon: '🎯', prompts: { init: '', insert: '', update: '', delete: '' }, subItems: [] }
        };

        // 🔧 修复：获取默认数据
        const defaultPanelData = defaultBasicPanelsData[panelId];
        if (!defaultPanelData) {
            return null;
        }

        try {
            // 🔧 修复：从 extensionSettings 读取已保存的基础面板配置
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const savedConfig = extensionSettings['Information bar integration tool']?.[panelId];

            if (savedConfig) {
                console.log('[InfoBarSettings] 📊 从配置读取基础面板数据:', panelId);

                // 合并默认数据和已保存的配置，确保所有必需字段都存在
                const mergedData = {
                    ...defaultPanelData, // 默认结构
                    ...savedConfig, // 用户保存的配置覆盖默认值
                    name: defaultPanelData.name, // 基础面板名称不能修改
                    key: defaultPanelData.key, // 基础面板键名不能修改
                    subItems: savedConfig.subItems || [], // 🔧 修复：从配置中读取用户添加的子项
                    prompts: {
                        ...defaultPanelData.prompts, // 默认提示词结构
                        ...savedConfig.prompts // 用户的提示词配置
                    }
                };

                return mergedData;
            } else {
                console.log('[InfoBarSettings] 📊 使用默认基础面板数据:', panelId);
                return defaultPanelData;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取基础面板配置失败，使用默认数据:', error);
            return defaultPanelData;
        }
    }

    /**
     * 填充基本面板信息
     */
    fillBasicPanelInfo(panelData, panelType) {
        const form = this.modal.querySelector('.panel-properties-form');

        form.querySelector('#panel-name').value = panelData.name || '';
        form.querySelector('#panel-key').value = panelData.key || '';
        form.querySelector('#panel-description').value = panelData.description || '';
        // 🔧 修复：删除图标字段引用，因为已从表单中移除
        // form.querySelector('#panel-icon').value = panelData.icon || '🎨';

        form.querySelector('#panel-required').checked = !!panelData.required;
        form.querySelector('#panel-memory-inject').checked = !!panelData.memoryInject;


        // 基础面板只限制名称和键名不可修改
        const isBasicPanel = panelType === 'basic';
        if (isBasicPanel) {
            // 只限制名称和键名
            form.querySelector('#panel-name').readOnly = true;
            form.querySelector('#panel-key').readOnly = true;

            // 其他字段可以编辑
            form.querySelector('#panel-description').readOnly = false;
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // form.querySelector('#panel-icon').readOnly = false;
            form.querySelector('#panel-required').disabled = false;
            form.querySelector('#panel-memory-inject').disabled = false;

            // 为只读输入框添加样式类
            form.querySelector('#panel-name').classList.add('readonly-input');
            form.querySelector('#panel-key').classList.add('readonly-input');

            // 移除其他字段的只读样式
            form.querySelector('#panel-description').classList.remove('readonly-input');
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // form.querySelector('#panel-icon').classList.remove('readonly-input');
        } else {
            // 自定义面板移除只读状态
            form.querySelector('#panel-name').readOnly = false;
            form.querySelector('#panel-key').readOnly = false;
            form.querySelector('#panel-description').readOnly = false;
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // form.querySelector('#panel-icon').readOnly = false;
            form.querySelector('#panel-required').disabled = false;
            form.querySelector('#panel-memory-inject').disabled = false;

            // 移除只读样式类
            form.querySelector('#panel-name').classList.remove('readonly-input');
            form.querySelector('#panel-key').classList.remove('readonly-input');
            form.querySelector('#panel-description').classList.remove('readonly-input');
            // 🔧 修复：删除图标字段引用，因为已从表单中移除
            // form.querySelector('#panel-icon').classList.remove('readonly-input');
        }
    }

    /**
     * 填充提示词配置
     */
    fillPanelPrompts(panelData, panelType) {
        const form = this.modal.querySelector('.panel-properties-form');
        const prompts = panelData.prompts || {};

        const initInput = form.querySelector('#panel-prompt-init');
        const insertInput = form.querySelector('#panel-prompt-insert');
        const updateInput = form.querySelector('#panel-prompt-update');
        const deleteInput = form.querySelector('#panel-prompt-delete');

        if (initInput) initInput.value = prompts.init || '';
        if (insertInput) insertInput.value = prompts.insert || '';
        if (updateInput) updateInput.value = prompts.update || '';
        if (deleteInput) deleteInput.value = prompts.delete || '';

        // 基础面板的提示词可以编辑（移除只读限制）
        const isBasicPanel = panelType === 'basic';
        if (isBasicPanel) {
            // 基础面板的提示词也可以编辑
            if (initInput) {
                initInput.readOnly = false;
                initInput.classList.remove('readonly-input');
            }
            if (insertInput) {
                insertInput.readOnly = false;
                insertInput.classList.remove('readonly-input');
            }
            if (updateInput) {
                updateInput.readOnly = false;
                updateInput.classList.remove('readonly-input');
            }
            if (deleteInput) {
                deleteInput.readOnly = false;
                deleteInput.classList.remove('readonly-input');
            }
        } else {
            // 自定义面板移除只读状态
            if (initInput) {
                initInput.readOnly = false;
                initInput.classList.remove('readonly-input');
            }
            if (insertInput) {
                insertInput.readOnly = false;
                insertInput.classList.remove('readonly-input');
            }
            if (updateInput) {
                updateInput.readOnly = false;
                updateInput.classList.remove('readonly-input');
            }
            if (deleteInput) {
                deleteInput.readOnly = false;
                deleteInput.classList.remove('readonly-input');
            }
        }
    }

    /**
     * 填充子项配置
     */
    fillSubItems(subItems) {
        try {
            const container = this.modal.querySelector('.sub-items-container');
            const emptyMessage = container.querySelector('.empty-sub-items');

            // 🔧 修复：无论是否有子项，都先清空现有子项，防止UI污染
            container.querySelectorAll('.sub-item-form').forEach(item => item.remove());

            if (subItems.length === 0) {
                emptyMessage.style.display = 'block';
                console.log('[InfoBarSettings] 🧹 子项容器已清理，显示空消息');
                return;
            }

            emptyMessage.style.display = 'none';

            // 添加子项
            subItems.forEach(subItem => {
                this.addSubItemToContainer(subItem);
            });

            console.log(`[InfoBarSettings] 📊 已填充 ${subItems.length} 个子项到容器`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 填充子项配置失败:', error);
        }
    }

    /**
     * 添加子项到容器
     */
    addSubItemToContainer(subItem) {
        try {
            const container = this.modal.querySelector('.sub-items-container');
            const emptyMessage = container.querySelector('.empty-sub-items');

            // 隐藏空消息
            emptyMessage.style.display = 'none';

            // 创建子项表单
            const subItemForm = this.createSubItemForm(subItem);
            container.appendChild(subItemForm);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加子项到容器失败:', error);
        }
    }

    /**
     * 创建子项表单（简化版本）
     */
    createSubItemForm(subItem) {
        const formElement = document.createElement('div');
        formElement.className = 'sub-item-form simplified';
        formElement.dataset.subItemId = subItem.id;

        formElement.innerHTML = `
            <div class="sub-item-simple">
                <div class="sub-item-input-group">
                    <input type="text" class="sub-item-name" value="${subItem.name || ''}" placeholder="子项名称" />
                </div>
                <button type="button" class="btn-icon btn-remove-sub-item" data-action="remove-sub-item" title="删除子项">
                    <span style="pointer-events: none;">🗑️</span>
                </button>
            </div>
        `;

        return formElement;
    }

    /**
     * 创建子项默认值输入
     */
    createSubItemDefaultInput(subItem) {
        switch (subItem.type) {
            case 'checkbox':
                return `<input type="checkbox" class="sub-item-default" ${subItem.defaultValue ? 'checked' : ''} />`;
            case 'number':
                return `<input type="number" class="sub-item-default" value="${subItem.defaultValue || 0}" />`;
            case 'textarea':
                return `<textarea class="sub-item-default" rows="3">${subItem.defaultValue || ''}</textarea>`;
            default:
                return `<input type="text" class="sub-item-default" value="${subItem.defaultValue || ''}" />`;
        }
    }

    /**
     * 创建子项选项区域（用于select类型）
     */
    createSubItemOptionsSection(options) {
        const optionsHtml = options.map((option, index) => `
            <div class="option-item">
                <input type="text" class="option-input" value="${option}" placeholder="选项${index + 1}" />
                <button type="button" class="btn-icon btn-remove-option">🗑️</button>
            </div>
        `).join('');

        return `
            <div class="form-group sub-item-options-section">
                <label>选项配置</label>
                <div class="sub-item-options">
                    ${optionsHtml}
                </div>
                <button type="button" class="btn-small btn-add-option">添加选项</button>
            </div>
        `;
    }

    /**
     * 清空面板属性
     */
    clearPanelProperties() {
        try {
            // 检查modal是否存在
            if (!this.modal) {
                console.log('[InfoBarSettings] ⚠️ Modal不存在，跳过清空面板属性');
                return;
            }

            const noSelectionMessage = this.modal.querySelector('.no-selection-message');
            const propertiesForm = this.modal.querySelector('.panel-properties-form');
            const saveBtn = this.modal.querySelector('[data-action="save-panel-properties"]');
            const deleteBtn = this.modal.querySelector('[data-action="delete-panel"]');

            // 显示无选择消息，隐藏属性表单
            if (noSelectionMessage) noSelectionMessage.style.display = 'block';
            if (propertiesForm) propertiesForm.style.display = 'none';

            // 禁用按钮
            if (saveBtn) saveBtn.disabled = true;
            if (deleteBtn) deleteBtn.disabled = true;

            // 清空当前编辑面板信息
            this.currentEditingPanel = null;

            // 清除面板列表选中状态
            this.modal.querySelectorAll('.panel-list-item').forEach(item => {
                item.classList.remove('selected');
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清空面板属性失败:', error);
        }
    }

    /**
     * 切换内容面板
     */
    switchToContent(contentType) {
        try {
            // 更新导航状态
            this.modal.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            this.modal.querySelector(`[data-nav="${contentType}"]`).classList.add('active');

            // 🔧 修复：重新应用导航项主题样式
            this.applyNavItemTheme();

            // 更新内容面板
            this.modal.querySelectorAll('.content-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            this.modal.querySelector(`[data-content="${contentType}"]`).classList.add('active');

            // 🔧 新增：总结面板特殊处理
            if (contentType === 'summary') {
                this.initSummaryPanelContent();
            }

            // 🧠 新增：记忆增强面板特殊处理
            if (contentType === 'memoryEnhancement') {
                this.initMemoryEnhancementPanelContent();
            }

            // 🎭 新增：NPC管理面板特殊处理
            if (contentType === 'npc-management') {
                this.initNPCManagementPanelContent();
            }

            console.log(`[InfoBarSettings] 📑 切换到内容: ${contentType}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换内容失败:', error);
        }
    }

    /**
     * 初始化总结面板内容
     */
    initSummaryPanelContent() {
        try {
            console.log('[InfoBarSettings] 📊 初始化总结面板内容...');

            // 获取总结管理器实例
            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool || !infoBarTool.modules || !infoBarTool.modules.summaryManager) {
                console.error('[InfoBarSettings] ❌ 总结管理器未初始化');
                this.showMessage('总结管理器未初始化', 'error');
                return;
            }

            const summaryManager = infoBarTool.modules.summaryManager;

            // 加载当前设置
            this.loadSummarySettings();

            // 加载总结历史
            this.loadSummaryHistory();

            // 绑定总结面板事件
            this.bindSummaryPanelEvents();

            console.log('[InfoBarSettings] ✅ 总结面板内容初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化总结面板内容失败:', error);
            this.showMessage('初始化总结面板失败', 'error');
        }
    }

    /**
     * 处理操作按钮
     */
    handleAction(action, event = null) {
        try {
            switch (action) {
                case 'close':
                    this.hide();
                    break;
                case 'save':
                    this.saveSettings();
                    break;
                case 'clear-cache':
                    this.clearAllCaches();
                    break;
                case 'initialize-plugin':
                    this.initializePlugin();
                    break;
                case 'clear-panel-data':
                    this.clearPanelData();
                    break;
                case 'export':
                    this.exportSettings();
                    break;
                case 'export-custom':
                    this.exportCustomSettings();
                    break;
                case 'import':
                    this.importSettings();
                    break;
                case 'open-data-cleanup':
                    this.openDataCleanupTool();
                    break;
                case 'open-error-log':
                    this.openErrorLogModal();
                    break;
                case 'open-project-link':
                    this.openProjectLink();
                    break;
                case 'save-profile':
                    this.saveSettingsProfile();
                    break;
                case 'load-profile':
                    this.loadSettingsProfile();
                    break;
                case 'delete-profile':
                    this.deleteSettingsProfile();
                    break;
                case 'export-data':
                    console.log('[InfoBarSettings] 🚀 开始执行导出数据...');
                    this.exportData().catch(error => {
                        console.error('[InfoBarSettings] ❌ 导出数据事件处理失败:', error);
                        this.showMessage('导出数据失败: ' + error.message, 'error');
                    });
                    break;
                case 'import-data':
                    console.log('[InfoBarSettings] 🚀 开始执行导入数据...');
                    this.importData().catch(error => {
                        console.error('[InfoBarSettings] ❌ 导入数据事件处理失败:', error);
                        this.showMessage('导入数据失败: ' + error.message, 'error');
                    });
                    break;
                case 'open-variable-manager':
                    console.log('[InfoBarSettings] 🔧 打开变量管理器...');
                    this.openVariableManager();
                    break;
                case 'open-status-bar-editor':
                    console.log('[InfoBarSettings] 🎨 打开状态栏编辑器...');
                    this.openStatusBarEditor();
                    break;

                case 'show-data-info':
                    console.log('[InfoBarSettings] 📊 显示数据信息...');
                    this.showDataInfoPanel();
                    break;
                case 'open-npc-management':
                    console.log('[InfoBarSettings] 🧑‍🤝‍🧑 打开NPC管理面板...');
                    try {
                        const panel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
                        if (panel && typeof panel.show === 'function') {
                            panel.show();
                        } else {
                            console.warn('[InfoBarSettings] ⚠️ 未找到NPC管理面板实例');
                        }
                    } catch (e) {
                        console.error('[InfoBarSettings] ❌ 打开NPC管理面板失败:', e);
                    }
                    break;
                case 'clear-memory-database':
                    console.log('[InfoBarSettings] 🧹 清空AI记忆数据库...');
                    this.clearMemoryDatabaseUI();
                    break;
                default:
                    console.log(`[InfoBarSettings] 🔘 处理操作: ${action}`);
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理操作失败:', error);
        }
    }

    /**
     * 🆕 清空AI记忆数据库（UI方法）
     */
    async clearMemoryDatabaseUI() {
        try {
            console.log('[InfoBarSettings] 🧹 准备清空AI记忆数据库...');

            // 显示确认对话框
            const confirmed = confirm(
                '确定要清空AI记忆数据库吗？\n\n' +
                '此操作将删除所有记忆数据，包括：\n' +
                '• 感知记忆（最新记忆）\n' +
                '• 短期记忆（近期记忆）\n' +
                '• 长期记忆（重要记忆）\n' +
                '• 深度归档（历史记忆）\n\n' +
                '此操作不可撤销！清空后AI将不再记得之前的对话内容。'
            );

            if (!confirmed) {
                console.log('[InfoBarSettings] 🚫 用户取消清空操作');
                return;
            }

            // 获取AI记忆注入器模块
            const aiMemoryInjector = window.SillyTavernInfobar?.modules?.aiMemoryDatabaseInjector;

            if (!aiMemoryInjector) {
                console.error('[InfoBarSettings] ❌ AI记忆数据库模块不可用');
                this.showNotification('❌ AI记忆数据库模块不可用', 'error');
                return;
            }

            // 执行清空操作
            console.log('[InfoBarSettings] 🔄 开始清空AI记忆数据库...');
            const success = aiMemoryInjector.clearMemoryDatabase();

            if (success) {
                console.log('[InfoBarSettings] ✅ AI记忆数据库已清空');
                this.showNotification('✅ AI记忆数据库已成功清空', 'success');

                // 🔧 刷新记忆增强面板的状态显示（如果存在）
                if (this.visible && this.modal) {
                    const refreshBtn = this.modal.querySelector('#refresh-memory-status');
                    if (refreshBtn) {
                        console.log('[InfoBarSettings] 🔄 刷新记忆状态显示...');
                        this.refreshMemoryStatus();
                    }
                }
            } else {
                console.error('[InfoBarSettings] ❌ 清空AI记忆数据库失败');
                this.showNotification('❌ 清空AI记忆数据库失败', 'error');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清空AI记忆数据库失败:', error);
            this.showNotification('❌ 清空失败: ' + error.message, 'error');
        }
    }

    /**
     * 处理复选框变更
     */
    handleCheckboxChange(e) {
        try {
            const name = e.target.name;
            const checked = e.target.checked;

            console.log(`[InfoBarSettings] ☑️ 复选框变更: ${name} = ${checked}`);

            // 🔧 修复：处理自定义面板启用/禁用状态
            if (name && name.endsWith('.enabled')) {
                const panelId = name.replace('.enabled', '');

                // 检查是否是自定义面板
                const customPanels = this.getCustomPanels();
                if (customPanels[panelId]) {
                    console.log(`[InfoBarSettings] 🔧 更新自定义面板状态: ${panelId}.enabled = ${checked}`);
                    customPanels[panelId].enabled = checked;
                    customPanels[panelId].updatedAt = Date.now();

                    // 立即保存到配置
                    this.saveCustomPanel(customPanels[panelId]);
                    console.log(`[InfoBarSettings] ✅ 自定义面板 ${panelId} 状态已保存: ${checked ? '启用' : '禁用'}`);

                    // 🔧 修复：正确更新状态徽章（使用当前面板的状态徽章）
                    const activeContentPanel = this.modal.querySelector(`.content-panel[data-content="${panelId}"]`);
                    if (activeContentPanel) {
                        const statusBadge = activeContentPanel.querySelector('.status-badge');
                        if (statusBadge) {
                            statusBadge.textContent = checked ? '已启用' : '未启用';
                            statusBadge.className = `status-badge ${checked ? 'enabled' : 'disabled'}`;
                            console.log(`[InfoBarSettings] 🎨 更新状态徽章: ${panelId} -> ${checked ? '已启用' : '未启用'}`);
                        } else {
                            console.log(`[InfoBarSettings] ⚠️ 未找到状态徽章: ${panelId}`);
                        }

                        // 子项区域始终保持可见，不根据启用状态隐藏
                        console.log(`[InfoBarSettings] 📋 子项区域保持可见，用户可以查看所有可配置项`);
                    } else {
                        console.log(`[InfoBarSettings] ⚠️ 未找到当前面板容器: ${panelId}`);
                    }
                }
            }

            // 特殊处理API配置开关
            if (name === 'apiConfig.enabled') {
                const apiConfigContent = this.modal.querySelector('.api-config-content');
                if (apiConfigContent) {
                    apiConfigContent.style.display = checked ? 'block' : 'none';
                    console.log(`[InfoBarSettings] 🔌 API配置区域${checked ? '显示' : '隐藏'}`);
                }
            }

            // 🆕 特殊处理破甲提示词开关
            if (name === 'apiConfig.enableArmorBreaking') {
                const armorBreakingSection = this.modal.querySelector('.armor-breaking-config-section');
                if (armorBreakingSection) {
                    armorBreakingSection.style.display = checked ? 'block' : 'none';
                    console.log(`[InfoBarSettings] 🛡️ 破甲提示词配置区域${checked ? '显示' : '隐藏'}`);
                }
            }

            // 如果是主开关，控制相关子项
            if (name && name.includes('.enabled')) {
                const baseName = name.replace('.enabled', '');
                const relatedInputs = this.modal.querySelectorAll(`[name^="${baseName}."]`);
                relatedInputs.forEach(input => {
                    if (input !== e.target) {
                        input.disabled = !checked;
                    }
                });
            }

            // 更新对应面板的配置计数
            this.updatePanelCounts(e.target);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理复选框变更失败:', error);
        }
    }
    /**
     * 创建API配置面板
     */
    createAPIPanel() {
        return `
            <div class="content-header">
                <h3>🔌 自定义API配置</h3>
                <div class="toggle-switch">
                    <input type="checkbox" id="api-enabled" name="apiConfig.enabled" />
                    <label for="api-enabled" class="switch-slider"></label>
                </div>
            </div>

            <div class="content-body">


                <!-- API提供商选择 -->
                <div class="settings-group">
                    <h4>1. 选择API提供商</h4>
                    <div class="form-group">
                        <label>API提供商</label>
                        <select id="api-provider" name="apiConfig.provider">
                            <option value="">请选择提供商</option>
                            <option value="gemini">Google Gemini</option>
                            <option value="localproxy">通用全兼容（Silly Tavern后端）</option>
                            <option value="custom">自定义API</option>
                        </select>
                        <small>选择您要使用的AI模型提供商</small>
                    </div>
                </div>

                <!-- 接口类型选择 -->
                <div class="settings-group">
                    <h4>2. 选择接口类型</h4>
                    <div class="form-group">
                        <label>接口类型</label>
                        <select id="interface-type" name="apiConfig.format">
                            <option value="">请先选择提供商</option>
                        </select>
                        <small>选择API接口的调用方式</small>
                    </div>
                </div>

                <!-- 基础URL配置 -->
                <div class="settings-group">
                    <h4>3. 基础URL</h4>
                    <div class="form-group">
                        <label>API基础URL</label>
                        <input type="url" id="api-base-url" name="apiConfig.baseUrl" placeholder="https://api.example.com" />
                        <small>API服务的基础地址</small>
                    </div>
                </div>

                <!-- API密钥配置 -->
                <div class="settings-group">
                    <h4>4. API密钥</h4>
                    <div class="form-group">
                        <label>API密钥</label>
                        <input type="password" id="api-key" name="apiConfig.apiKey" placeholder="输入您的API密钥" />
                        <small>从API提供商获取的访问密钥</small>
                    </div>
                </div>

                <!-- 模型选择 -->
                <div class="settings-group">
                    <h4>5. 模型选择</h4>
                    <div class="form-group">
                        <label>AI模型</label>
                        <select id="api-model" name="apiConfig.model">
                            <option value="">请先加载模型列表</option>
                        </select>
                        <small>选择要使用的AI模型</small>
                    </div>
                </div>

                <!-- 加载模型列表按钮 -->
                <div class="settings-group">
                    <h4>6. 模型列表管理</h4>
                    <div class="form-group">
                        <button type="button" id="load-models-btn" class="btn btn-primary">🔄 重新加载模型列表</button>
                        <small>重新从API获取最新的模型列表（会消耗API额度）</small>
                    </div>
                </div>

                <!-- 测试连接按钮 -->
                <div class="settings-group">
                    <h4>7. 测试连接</h4>
                    <div class="form-group">
                        <button type="button" id="test-connection-btn" class="btn btn-secondary">🔍 测试连接</button>
                        <small>测试API连接是否正常</small>
                    </div>
                </div>

                <!-- 模型参数配置 -->
                <div class="settings-group">
                    <h4>8. 模型参数</h4>
                    <div class="form-group">
                        <label>温度 (0-2)</label>
                        <input type="range" name="apiConfig.temperature" min="0" max="2" step="0.1" value="0.7" />
                        <span class="range-value">0.7</span>
                        <small>控制生成文本的随机性，值越高越随机</small>
                    </div>
                    <div class="form-group">
                        <label>最大令牌数</label>
                        <input type="number" name="apiConfig.maxTokens" min="1" max="100000" step="100" value="2048" />
                        <small>生成文本的最大长度</small>
                    </div>
                </div>

                <!-- 连接设置 -->
                <div class="settings-group">
                    <h4>9. 连接设置</h4>
                    <div class="form-group">
                        <label>请求超时 (秒)</label>
                        <input type="number" name="apiConfig.timeout" min="5" max="300" step="5" value="30" />
                        <small>API请求的超时时间</small>
                    </div>
                    <div class="form-group">
                        <label>重试次数</label>
                        <input type="number" name="apiConfig.retryCount" min="0" max="10" step="1" value="3" />
                        <small>请求失败时的重试次数</small>
                    </div>
                    <div class="form-group">
                        <label>最小消息字数阈值</label>
                        <input type="number" id="api-min-message-length" name="apiConfig.minMessageLength" min="0" max="10000" step="50" value="500" />
                        <small>AI消息字数低于此阈值时，跳过信息栏数据生成（默认500字）。设置为0表示不检查字数。</small>
                    </div>
                    <div class="form-group">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="api-merge-messages" name="apiConfig.mergeMessages" checked />
                            <label for="api-merge-messages" class="checkbox-label">合并消息</label>
                        </div>
                        <small>启用时将API返回数据合并到AI消息中再解析，禁用时直接解析API返回数据</small>
                    </div>
                    <div class="form-group">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="api-include-worldbook" name="apiConfig.includeWorldBook" />
                            <label for="api-include-worldbook" class="checkbox-label">读取世界书</label>
                        </div>
                        <small>启用时将SillyTavern世界书内容注入到自定义API请求中</small>
                    </div>
                    <div class="form-group">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="api-enable-armor-breaking" name="apiConfig.enableArmorBreaking" />
                            <label for="api-enable-armor-breaking" class="checkbox-label">启用破甲提示词</label>
                        </div>
                        <small>启用后在智能提示词顶部显示破甲提示词，用于突破AI限制</small>
                    </div>
                    <div class="form-group">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="api-request-confirmation" name="apiConfig.requestConfirmation" />
                            <label for="api-request-confirmation" class="checkbox-label">请求询问</label>
                        </div>
                        <small>启用后，在调用自定义API生成数据前会弹出确认对话框，询问是否继续生成</small>
                    </div>
                </div>

                <!-- 🆕 破甲提示词配置区域 -->
                <div class="settings-group armor-breaking-config-section" style="display: none;">
                    <h4>🛡️ 破甲提示词配置</h4>
                    <div class="form-group">
                        <label>破甲提示词内容</label>
                        <textarea id="armor-breaking-prompt" name="apiConfig.armorBreakingPrompt"
                                  rows="6"
                                  placeholder="请输入破甲提示词内容，将在智能提示词顶部显示..."
                                  style="width: 100%; min-height: 120px; resize: vertical; font-family: monospace; font-size: 13px;"></textarea>
                        <small>此提示词将在智能提示词的最顶部显示，用于突破AI的某些限制。请谨慎使用。</small>
                    </div>
                    <div class="form-group">
                        <div class="armor-breaking-stats">
                            <span class="char-count">字符数: <span id="armor-breaking-char-count">0</span></span>
                            <span class="word-count">单词数: <span id="armor-breaking-word-count">0</span></span>
                        </div>
                    </div>
                </div>

                <!-- 🆕 世界书配置面板 -->
                <div class="settings-group worldbook-config-section" style="display: none;">
                    <h4>📚 世界书管理配置</h4>
                    <div id="worldbook-config-container">
                        <!-- 世界书配置面板将在这里动态加载 -->
                        <div style="padding: 20px; text-align: center; color: var(--theme-text-secondary, #aaa);">
                            正在加载世界书配置...
                        </div>
                    </div>
                </div>

                <!-- 连接状态显示 -->
                <div class="settings-group">
                    <h4>10. 连接状态</h4>
                    <div class="form-group">
                        <div id="connection-status" class="connection-status">
                            ⏳ 未测试连接
                        </div>
                        <small>显示API连接和模型加载状态</small>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建记忆增强面板
     */
    createMemoryEnhancementPanel() {
        return `
            <div class="content-header">
                <h3>🧠 记忆增强</h3>
                <div class="header-description">
                    <p>配置四层记忆架构：AI记忆总结、语义搜索、深度记忆管理、智能记忆分类器</p>
                </div>
            </div>

            <div class="content-body">
                <!-- 🎯 记忆系统状态可视化 -->
                <div class="memory-status-visualization" id="memory-status-visualization">
                    <div class="status-header">
                        <h4>📊 记忆状态显示</h4>
                        <button class="refresh-status-btn" id="refresh-memory-status" title="刷新状态">🔄</button>
                    </div>

                    <!-- 四层记忆状态卡片 -->
                    <div class="memory-layers-status">
                        <div class="memory-layer-card" data-layer="sensory">
                            <div class="layer-header">
                                <span class="layer-icon">👁️</span>
                                <span class="layer-name">感知记忆层</span>
                                <span class="layer-status" id="sensory-status">●</span>
                            </div>
                            <div class="layer-stats">
                                <div class="stat-item">
                                    <span class="stat-label">数量:</span>
                                    <span class="stat-value" id="sensory-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">容量:</span>
                                    <span class="stat-value" id="sensory-capacity">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="memory-layer-card" data-layer="shortTerm">
                            <div class="layer-header">
                                <span class="layer-icon">⚡</span>
                                <span class="layer-name">短期记忆层</span>
                                <span class="layer-status" id="shortterm-status">●</span>
                            </div>
                            <div class="layer-stats">
                                <div class="stat-item">
                                    <span class="stat-label">数量:</span>
                                    <span class="stat-value" id="shortterm-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">重要性:</span>
                                    <span class="stat-value" id="shortterm-importance">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="memory-layer-card" data-layer="longTerm">
                            <div class="layer-header">
                                <span class="layer-icon">🧠</span>
                                <span class="layer-name">长期记忆层</span>
                                <span class="layer-status" id="longterm-status">●</span>
                            </div>
                            <div class="layer-stats">
                                <div class="stat-item">
                                    <span class="stat-label">数量:</span>
                                    <span class="stat-value" id="longterm-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">迁移:</span>
                                    <span class="stat-value" id="longterm-migrations">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="memory-layer-card" data-layer="deepArchive">
                            <div class="layer-header">
                                <span class="layer-icon">📚</span>
                                <span class="layer-name">深度归档层</span>
                                <span class="layer-status" id="archive-status">●</span>
                            </div>
                            <div class="layer-stats">
                                <div class="stat-item">
                                    <span class="stat-label">数量:</span>
                                    <span class="stat-value" id="archive-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">压缩:</span>
                                    <span class="stat-value" id="archive-compression">-</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 模块状态概览 -->
                    <div class="modules-status">
                        <div class="module-status-card" data-module="aiSummarizer">
                            <div class="module-header">
                                <span class="module-icon">🤖</span>
                                <span class="module-name">AI记忆总结</span>
                                <span class="module-status" id="ai-summarizer-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">队列:</span>
                                    <span class="stat-value" id="ai-summarizer-queue">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">缓存:</span>
                                    <span class="stat-value" id="ai-summarizer-cache">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="vectorSearch">
                            <div class="module-header">
                                <span class="module-icon">🔍</span>
                                <span class="module-name">语义搜索</span>
                                <span class="module-status" id="vector-search-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">索引:</span>
                                    <span class="stat-value" id="vector-search-index">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">命中率:</span>
                                    <span class="stat-value" id="vector-search-hitrate">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="classifier">
                            <div class="module-header">
                                <span class="module-icon">🎯</span>
                                <span class="module-name">智能分类</span>
                                <span class="module-status" id="classifier-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">分类:</span>
                                    <span class="stat-value" id="classifier-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">置信度:</span>
                                    <span class="stat-value" id="classifier-confidence">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="injector">
                            <div class="module-header">
                                <span class="module-icon">💉</span>
                                <span class="module-name">记忆注入</span>
                                <span class="module-status" id="injector-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">注入:</span>
                                    <span class="stat-value" id="injector-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">错误:</span>
                                    <span class="stat-value" id="injector-errors">-</span>
                                </div>
                            </div>
                        </div>

                        <!-- 🆕 新增六大核心功能模块状态 -->
                        <div class="module-status-card" data-module="memoryMaintenance">
                            <div class="module-header">
                                <span class="module-icon">🔧</span>
                                <span class="module-name">记忆自动维护</span>
                                <span class="module-status" id="memory-maintenance-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">清理:</span>
                                    <span class="stat-value" id="memory-maintenance-cleanups">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">压缩:</span>
                                    <span class="stat-value" id="memory-maintenance-compressions">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="contextualRetrieval">
                            <div class="module-header">
                                <span class="module-icon">🔍</span>
                                <span class="module-name">上下文感知检索</span>
                                <span class="module-status" id="contextual-retrieval-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">查询:</span>
                                    <span class="stat-value" id="contextual-retrieval-queries">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">缓存:</span>
                                    <span class="stat-value" id="contextual-retrieval-cache-hits">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="userProfile">
                            <div class="module-header">
                                <span class="module-icon">👤</span>
                                <span class="module-name">用户画像</span>
                                <span class="module-status" id="user-profile-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">画像:</span>
                                    <span class="stat-value" id="user-profile-count">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">置信度:</span>
                                    <span class="stat-value" id="user-profile-confidence">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="knowledgeGraph">
                            <div class="module-header">
                                <span class="module-icon">🕸️</span>
                                <span class="module-name">知识图谱</span>
                                <span class="module-status" id="knowledge-graph-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">三元组:</span>
                                    <span class="stat-value" id="knowledge-graph-triples">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">实体:</span>
                                    <span class="stat-value" id="knowledge-graph-entities">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="timeAware">
                            <div class="module-header">
                                <span class="module-icon">⏰</span>
                                <span class="module-name">时间感知记忆</span>
                                <span class="module-status" id="time-aware-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">事件:</span>
                                    <span class="stat-value" id="time-aware-events">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">衰减:</span>
                                    <span class="stat-value" id="time-aware-decayed">-</span>
                                </div>
                            </div>
                        </div>

                        <div class="module-status-card" data-module="stIntegration">
                            <div class="module-header">
                                <span class="module-icon">🔗</span>
                                <span class="module-name">SillyTavern集成</span>
                                <span class="module-status" id="st-integration-status">●</span>
                            </div>
                            <div class="module-stats">
                                <div class="stat-item">
                                    <span class="stat-label">注入:</span>
                                    <span class="stat-value" id="st-integration-injections">-</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">耗时:</span>
                                    <span class="stat-value" id="st-integration-avg-time">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 🆕 六大核心功能模块启用选项 -->
                <div class="setting-row enhancement-modules-section">
                    <h5 style="color: #FF9800; margin: 15px 0 10px 0; font-size: 14px; font-weight: 600;">🚀 记忆增强核心功能</h5>
                    <div class="setting-hint" style="margin-bottom: 15px;">以下功能默认禁用，请根据需要启用</div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-maintenance-enabled" />
                            <span class="checkbox-text">🔧 记忆自动维护系统</span>
                        </label>
                        <div class="setting-hint">自动清理、压缩和质量评估记忆数据</div>
                    </div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="contextual-retrieval-enabled" />
                            <span class="checkbox-text">🔍 上下文感知检索</span>
                        </label>
                        <div class="setting-hint">混合检索、重排序和语义缓存</div>
                    </div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="user-profile-enabled" />
                            <span class="checkbox-text">👤 用户画像管理</span>
                        </label>
                        <div class="setting-hint">自动学习用户偏好和个性化记忆</div>
                    </div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="knowledge-graph-enabled" />
                            <span class="checkbox-text">🕸️ 知识图谱管理</span>
                        </label>
                        <div class="setting-hint">三元组提取、图谱查询和推理</div>
                    </div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="time-aware-enabled" />
                            <span class="checkbox-text">⏰ 时间感知记忆</span>
                        </label>
                        <div class="setting-hint">时间线管理、遗忘曲线和间隔重复</div>
                    </div>

                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="st-integration-enabled" />
                            <span class="checkbox-text">🔗 SillyTavern深度集成</span>
                        </label>
                        <div class="setting-hint">自动记忆注入和事件集成</div>
                    </div>
                </div>

                <!-- 🚀 AI记忆总结设置 -->
                <div class="setting-row ai-memory-section">
                    <h5 style="color: #4CAF50; margin: 0 0 10px 0; font-size: 14px; font-weight: 600;">🧠 AI记忆总结</h5>
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-ai-memory-enabled" />
                            <span class="checkbox-text">启用AI记忆总结</span>
                        </label>
                        <div class="setting-hint">使用AI智能分析和总结消息内容</div>
                    </div>
                </div>

                <div class="setting-row ai-memory-options" id="memory-ai-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #4CAF50; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-ai-message-level-summary" />
                            <span class="checkbox-text">消息级别总结</span>
                        </label>
                        <div class="setting-hint">为每条重要消息生成智能总结</div>
                    </div>
                </div>

                <div class="setting-row ai-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #4CAF50; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-ai-importance-threshold">重要性阈值</label>
                        <div class="input-group">
                            <input type="range" id="memory-ai-importance-threshold" min="0.1" max="1.0" step="0.1" value="0.6" />
                            <span class="input-unit" id="memory-ai-importance-value">60%</span>
                        </div>
                        <div class="setting-hint">只总结重要性超过此阈值的消息</div>
                    </div>
                </div>

                <!-- 🔍 语义搜索设置 -->
                <div class="setting-row vectorized-memory-section">
                    <h5 style="color: #2196F3; margin: 15px 0 10px 0; font-size: 14px; font-weight: 600;">🔍 语义搜索</h5>
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-vectorized-memory-enabled" />
                            <span class="checkbox-text">启用语义搜索</span>
                        </label>
                        <div class="setting-hint">使用向量化技术进行智能语义搜索</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options" id="memory-vectorized-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-vector-storage-mode">向量数据存储方式</label>
                        <select id="memory-vector-storage-mode" class="setting-select">
                            <option value="local">聊天文件存储（默认）</option>
                            <option value="native">原生向量API（推荐）</option>
                            <option value="custom">自定义向量API</option>
                        </select>
                        <div class="setting-hint">选择向量数据的存储位置和方式</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options vector-storage-hint" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <div class="setting-hint" id="vector-storage-hint-text" style="padding: 10px; background: #f5f5f5; border-radius: 4px; font-size: 12px;">
                            <strong>聊天文件存储：</strong>向量数据存储在聊天文件中，无需额外配置，但数据量大时可能影响性能。
                        </div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options local-storage-options" id="local-storage-size-limit" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-vector-storage-size-limit">向量存储大小限制</label>
                        <div class="input-group">
                            <input type="number" id="memory-vector-storage-size-limit" min="1" max="100" value="10" />
                            <span class="input-unit">MB</span>
                        </div>
                        <div class="setting-hint">当向量数据超过此大小时，自动删除最旧的数据。设置为0表示不限制。</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options custom-vector-api-options" id="custom-vector-api-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-custom-vector-api-url">自定义API地址</label>
                        <input type="text" id="memory-custom-vector-api-url" class="setting-input" placeholder="https://api.example.com/embeddings" />
                        <div class="setting-hint">外部向量化API的完整URL地址</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options custom-vector-api-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-custom-vector-api-key">API密钥</label>
                        <input type="password" id="memory-custom-vector-api-key" class="setting-input" placeholder="sk-..." />
                        <div class="setting-hint">访问自定义API所需的密钥</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options custom-vector-api-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-custom-vector-model">模型名称</label>
                        <input type="text" id="memory-custom-vector-model" class="setting-input" placeholder="text-embedding-ada-002" />
                        <div class="setting-hint">使用的嵌入模型名称</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-vector-engine">向量化引擎</label>
                        <select id="memory-vector-engine" class="setting-select">
                            <option value="transformers">Transformers.js (本地)</option>
                            <option value="openai">OpenAI (在线)</option>
                        </select>
                        <div class="setting-hint">选择向量化引擎类型</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-similarity-threshold">相似度阈值</label>
                        <div class="input-group">
                            <input type="range" id="memory-similarity-threshold" min="0.1" max="1.0" step="0.05" value="0.7" />
                            <span class="input-unit" id="memory-similarity-value">70%</span>
                        </div>
                        <div class="setting-hint">语义搜索的最低相似度要求</div>
                    </div>
                </div>

                <div class="setting-row vectorized-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #2196F3; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-max-search-results">最大搜索结果</label>
                        <div class="input-group">
                            <input type="number" id="memory-max-search-results" min="5" max="50" value="10" />
                            <span class="input-unit">个结果</span>
                        </div>
                        <div class="setting-hint">语义搜索返回的最大结果数量</div>
                    </div>
                </div>

                <!-- 🧠 深度记忆管理设置 -->
                <div class="setting-row deep-memory-section">
                    <h5 style="color: #9C27B0; margin: 15px 0 10px 0; font-size: 14px; font-weight: 600;">🧠 深度记忆管理</h5>
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-deep-memory-enabled" />
                            <span class="checkbox-text">启用深度记忆管理</span>
                        </label>
                        <div class="setting-hint">基于认知心理学的四层记忆架构管理</div>
                    </div>
                </div>

                <div class="setting-row deep-memory-options" id="memory-deep-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #9C27B0; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-auto-memory-migration" />
                            <span class="checkbox-text">自动记忆迁移</span>
                        </label>
                        <div class="setting-hint">根据重要性自动在记忆层级间迁移</div>
                    </div>
                </div>

                <div class="setting-row deep-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #9C27B0; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-memory-importance-threshold">记忆重要性阈值</label>
                        <div class="input-group">
                            <input type="range" id="memory-memory-importance-threshold" min="0.1" max="1.0" step="0.05" value="0.6" />
                            <span class="input-unit" id="memory-memory-importance-value">60%</span>
                        </div>
                        <div class="setting-hint">短期记忆升级为长期记忆的重要性阈值</div>
                    </div>
                </div>

                <div class="setting-row deep-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #9C27B0; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-memory-conflict-resolution" />
                            <span class="checkbox-text">记忆冲突解决</span>
                        </label>
                        <div class="setting-hint">自动检测和解决矛盾的记忆内容</div>
                    </div>
                </div>

                <div class="setting-row deep-memory-options" style="display: none; margin-left: 20px; border-left: 2px solid #9C27B0; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-memory-capacity">记忆容量设置</label>
                        <div class="memory-capacity-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 10px;">
                            <div>
                                <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">感知记忆</label>
                                <input type="number" id="memory-sensory-capacity" min="50" max="500" value="100" style="width: 100%;" />
                            </div>
                            <div>
                                <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">短期记忆</label>
                                <input type="number" id="memory-short-term-capacity" min="200" max="2000" value="500" style="width: 100%;" />
                            </div>
                            <div>
                                <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">长期记忆</label>
                                <input type="number" id="memory-long-term-capacity" min="1000" max="10000" value="5000" style="width: 100%;" />
                            </div>
                            <div>
                                <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">深度归档</label>
                                <input type="number" id="memory-deep-archive-capacity" min="10000" max="100000" value="50000" style="width: 100%;" />
                            </div>
                        </div>
                        <div class="setting-hint">各记忆层级的最大容量设置</div>
                    </div>
                </div>

                <!-- 🤖 智能记忆分类器设置 -->
                <div class="setting-row intelligent-classifier-section">
                    <h5 style="color: #FF5722; margin: 15px 0 10px 0; font-size: 14px; font-weight: 600;">🤖 智能记忆分类器</h5>
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-intelligent-classifier-enabled" />
                            <span class="checkbox-text">启用智能记忆分类器</span>
                        </label>
                        <div class="setting-hint">AI驱动的智能记忆分类系统</div>
                    </div>
                </div>

                <div class="setting-row intelligent-classifier-options" id="memory-intelligent-classifier-options" style="display: none; margin-left: 20px; border-left: 2px solid #FF5722; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-semantic-clustering" />
                            <span class="checkbox-text">语义聚类分析</span>
                        </label>
                        <div class="setting-hint">基于向量空间的语义聚类</div>
                    </div>
                </div>

                <div class="setting-row intelligent-classifier-options" style="display: none; margin-left: 20px; border-left: 2px solid #FF5722; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-temporal-pattern-recognition" />
                            <span class="checkbox-text">时序模式识别</span>
                        </label>
                        <div class="setting-hint">识别记忆的时间模式和周期性</div>
                    </div>
                </div>

                <div class="setting-row intelligent-classifier-options" style="display: none; margin-left: 20px; border-left: 2px solid #FF5722; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-importance-prediction" />
                            <span class="checkbox-text">重要性预测</span>
                        </label>
                        <div class="setting-hint">预测记忆的未来重要性</div>
                    </div>
                </div>

                <div class="setting-row intelligent-classifier-options" style="display: none; margin-left: 20px; border-left: 2px solid #FF5722; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label" for="memory-classification-confidence-threshold">分类置信度阈值</label>
                        <div class="input-group">
                            <input type="range" id="memory-classification-confidence-threshold" min="0.5" max="1.0" step="0.05" value="0.7" />
                            <span class="input-unit" id="memory-classification-confidence-value">70%</span>
                        </div>
                        <div class="setting-hint">分类决策的最低置信度要求</div>
                    </div>
                </div>

                <div class="setting-row intelligent-classifier-options" style="display: none; margin-left: 20px; border-left: 2px solid #FF5722; padding-left: 15px;">
                    <div class="setting-group">
                        <label class="setting-label">
                            <input type="checkbox" id="memory-adaptive-learning" />
                            <span class="checkbox-text">自适应学习</span>
                        </label>
                        <div class="setting-hint">从用户反馈中学习和改进</div>
                    </div>
                </div>

                <!-- 🗑️ 数据清理工具 -->
                <div class="setting-row memory-cleanup-section" style="margin-top: 30px; border-top: 2px solid var(--SmartThemeBorderColor, #333); padding-top: 20px;">
                    <h5 style="color: #F44336; margin: 0 0 15px 0; font-size: 14px; font-weight: 600;">🗑️ 数据清理工具</h5>
                    <div class="setting-hint" style="margin-bottom: 15px; color: #FF9800;">
                        ⚠️ 警告：清理操作不可撤销，请谨慎使用！建议在清理前先导出备份数据。
                    </div>

                    <div class="cleanup-buttons-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;">
                        <!-- 清理AI记忆数据库 -->
                        <div class="cleanup-button-wrapper">
                            <button class="cleanup-btn" id="cleanup-ai-memory-database" style="
                                width: 100%;
                                padding: 12px 20px;
                                background: linear-gradient(135deg, #FF5722 0%, #F44336 100%);
                                color: white;
                                border: none;
                                border-radius: 8px;
                                font-size: 14px;
                                font-weight: 600;
                                cursor: pointer;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 8px rgba(244, 67, 54, 0.3);
                            ">
                                🗑️ 清理AI记忆数据库
                            </button>
                            <div class="setting-hint" style="margin-top: 8px; font-size: 12px;">
                                清空所有AI记忆总结数据（感知层、短期、长期、归档）
                            </div>
                        </div>

                        <!-- 清理向量化数据 -->
                        <div class="cleanup-button-wrapper">
                            <button class="cleanup-btn" id="cleanup-vector-data" style="
                                width: 100%;
                                padding: 12px 20px;
                                background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
                                color: white;
                                border: none;
                                border-radius: 8px;
                                font-size: 14px;
                                font-weight: 600;
                                cursor: pointer;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
                            ">
                                🗑️ 清理向量化数据
                            </button>
                            <div class="setting-hint" style="margin-top: 8px; font-size: 12px;">
                                清空所有向量索引和嵌入数据
                            </div>
                        </div>

                        <!-- 清理深度记忆数据 -->
                        <div class="cleanup-button-wrapper">
                            <button class="cleanup-btn" id="cleanup-deep-memory" style="
                                width: 100%;
                                padding: 12px 20px;
                                background: linear-gradient(135deg, #9C27B0 0%, #7B1FA2 100%);
                                color: white;
                                border: none;
                                border-radius: 8px;
                                font-size: 14px;
                                font-weight: 600;
                                cursor: pointer;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 8px rgba(156, 39, 176, 0.3);
                            ">
                                🗑️ 清理深度记忆数据
                            </button>
                            <div class="setting-hint" style="margin-top: 8px; font-size: 12px;">
                                清空四层记忆架构中的所有数据
                            </div>
                        </div>

                        <!-- 清理知识图谱数据 -->
                        <div class="cleanup-button-wrapper">
                            <button class="cleanup-btn" id="cleanup-knowledge-graph" style="
                                width: 100%;
                                padding: 12px 20px;
                                background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
                                color: white;
                                border: none;
                                border-radius: 8px;
                                font-size: 14px;
                                font-weight: 600;
                                cursor: pointer;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);
                            ">
                                🗑️ 清理知识图谱
                            </button>
                            <div class="setting-hint" style="margin-top: 8px; font-size: 12px;">
                                清空所有知识图谱三元组和关系数据
                            </div>
                        </div>
                    </div>

                    <!-- 危险操作：清空所有记忆数据 -->
                    <div class="cleanup-danger-zone" style="margin-top: 25px; padding: 15px; background: rgba(244, 67, 54, 0.1); border: 2px solid #F44336; border-radius: 8px;">
                        <h6 style="color: #F44336; margin: 0 0 10px 0; font-size: 13px; font-weight: 600;">
                            ⚠️ 危险操作区域
                        </h6>
                        <button class="cleanup-btn-danger" id="cleanup-all-memory-data" style="
                            width: 100%;
                            padding: 12px 20px;
                            background: linear-gradient(135deg, #D32F2F 0%, #B71C1C 100%);
                            color: white;
                            border: 2px solid #F44336;
                            border-radius: 8px;
                            font-size: 14px;
                            font-weight: 700;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 2px 8px rgba(211, 47, 47, 0.4);
                        ">
                            💥 清空所有记忆数据（危险）
                        </button>
                        <div class="setting-hint" style="margin-top: 10px; font-size: 12px; color: #F44336;">
                            ⚠️ 此操作将清空所有记忆增强相关数据，包括AI记忆、向量数据、深度记忆、知识图谱、用户画像等。此操作不可撤销！
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建提示词设置面板
     */
    createPromptSettingsPanel() {
        return `
            <div class="content-header">
                <h3>🧠 提示词设置</h3>
                <div class="header-description">
                    <p>配置AI提示词的生成方式：智能提示词或自定义提示词</p>
                </div>
            </div>

            <div class="content-body">
                <!-- 提示词模式选择 -->
                <div class="settings-group">
                    <h4>📋 提示词模式</h4>
                    <div class="form-group">
                        <label>选择提示词模式</label>
                        <select id="prompt-mode-select" name="promptSettings.mode" style="width: 100%; padding: 8px; border-radius: 4px;">
                            <option value="smart">🧠 智能提示词 - 使用智能提示词系统自动生成优化的提示词内容</option>
                            <option value="custom">✏️ 自定义提示词 - 使用您自定义的提示词内容，关闭智能提示词系统</option>
                        </select>
                        <small>选择提示词的生成方式</small>
                    </div>
                </div>

                <!-- 智能提示词配置区域 -->
                <div class="settings-group smart-prompt-config" id="smart-prompt-config">
                    <h4>🧠 智能提示词配置</h4>
                    <div class="smart-prompt-info">
                        <div class="info-card">
                            <div class="info-icon">✅</div>
                            <div class="info-content">
                                <h5>智能提示词已启用</h5>
                                <p>系统将根据当前面板配置和数据状态自动生成优化的提示词</p>
                                <ul>
                                    <li>自动分析数据完整性</li>
                                    <li>智能选择更新策略</li>
                                    <li>动态生成格式约束</li>
                                    <li>优化AI响应质量</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 自定义提示词配置区域 -->
                <div class="settings-group custom-prompt-config" id="custom-prompt-config" style="display: none;">
                    <h4>✏️ 自定义提示词配置</h4>
                    <div class="form-group">
                        <label>自定义提示词内容</label>
                        <textarea id="custom-prompt-content" name="promptSettings.customContent"
                                  rows="12"
                                  placeholder="请输入您的自定义提示词内容...

示例：
你是一个专业的数据整理员，请根据用户的对话内容，提取并整理相关信息。

输出格式要求：
1. 使用操作指令格式：add 面板名(行号 {&quot;列号&quot;,&quot;值&quot;})
2. 确保数据准确性和完整性
3. 保持格式的一致性

请开始处理..."
                                  style="width: 100%; min-height: 300px; resize: vertical; font-family: monospace; font-size: 13px;"></textarea>
                        <small>自定义提示词将完全替代智能提示词系统。请确保包含必要的格式要求和指导说明。</small>
                    </div>
                    <div class="form-group">
                        <div class="custom-prompt-stats">
                            <span class="char-count">字符数: <span id="custom-prompt-char-count">0</span></span>
                            <span class="word-count">单词数: <span id="custom-prompt-word-count">0</span></span>
                            <span class="line-count">行数: <span id="custom-prompt-line-count">0</span></span>
                        </div>
                    </div>
                    <div class="custom-prompt-warning">
                        <div class="warning-icon">⚠️</div>
                        <div class="warning-content">
                            <h5>注意事项</h5>
                            <p>启用自定义提示词后，智能提示词系统将被完全关闭。请确保您的自定义提示词包含：</p>
                            <ul>
                                <li>明确的数据提取指导</li>
                                <li>正确的输出格式要求</li>
                                <li>必要的约束和限制说明</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- 提示词预览区域 -->
                <div class="settings-group">
                    <h4>👁️ 提示词预览</h4>
                    <div class="prompt-preview-container">
                        <div class="preview-toolbar">
                            <button class="btn btn-secondary" id="refresh-preview-btn">
                                <i class="fas fa-refresh"></i> 刷新预览
                            </button>
                            <span class="preview-status" id="preview-status">准备就绪</span>
                        </div>
                        <div class="prompt-preview" id="prompt-preview">
                            <div class="preview-placeholder">
                                点击"刷新预览"查看当前提示词内容
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建主题设置面板
     */
    createThemePanel() {
        return `
            <div class="settings-group">
                <div class="theme-header-controls" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                    <div class="theme-header-left">
                        <h3>🎨 主题预览选择</h3>
                        <p class="theme-description">选择您喜欢的主题风格，点击预览图即可应用</p>
                    </div>
                    <div class="theme-header-right">
                        <button class="btn btn-primary status-bar-editor-btn" data-action="open-status-bar-editor" style="
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            border: none;
                            padding: 10px 20px;
                            border-radius: 8px;
                            color: white;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
                        " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(102, 126, 234, 0.4)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 15px rgba(102, 126, 234, 0.3)'">
                            <i class="fas fa-edit"></i> 状态栏编辑
                        </button>
                    </div>
                </div>

                <div class="theme-gallery">
                    ${this.createThemePreviewGrid()}
                </div>
            </div>

            <div class="settings-group">
                <h3>🎭 信息栏风格选择</h3>
                <p class="style-description">选择信息栏的显示方式和布局风格</p>

                <div class="style-gallery">
                    ${this.createStylePreviewGrid()}
                </div>
            </div>



            <div class="settings-group custom-theme-group" style="display: none;">
                <h3>自定义主题</h3>
                <div class="color-picker-group">
                    <div class="form-group">
                        <label>主色调</label>
                        <input type="color" name="theme.custom.primary" value="#007bff" />
                    </div>
                    <div class="form-group">
                        <label>背景色</label>
                        <input type="color" name="theme.custom.background" value="#1a1a1a" />
                    </div>
                    <div class="form-group">
                        <label>文字色</label>
                        <input type="color" name="theme.custom.text" value="#ffffff" />
                    </div>
                    <div class="form-group">
                        <label>边框色</label>
                        <input type="color" name="theme.custom.border" value="#333333" />
                    </div>
                </div>

                <div class="theme-preview">
                    <h4>实时预览</h4>
                    <div class="preview-box custom-preview">
                        <div class="preview-header">示例标题</div>
                        <div class="preview-content">示例内容文字</div>
                        <div class="preview-button">示例按钮</div>
                    </div>
                </div>
            </div>

            <div class="settings-group">
                <h3>字体设置</h3>
                <div class="form-group">
                    <label>字体大小</label>
                    <select name="theme.fontSize" data-linked="infobar.height">
                        <option value="small">小 (12px)</option>
                        <option value="medium" selected>中 (14px)</option>
                        <option value="large">大 (16px)</option>
                        <option value="xlarge">特大 (18px)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>信息栏高度</label>
                    <select name="infobar.height" data-linked="theme.fontSize">
                        <option value="auto">自动 (根据字体)</option>
                        <option value="compact">紧凑 (24px)</option>
                        <option value="normal" selected>标准 (32px)</option>
                        <option value="comfortable">舒适 (40px)</option>
                        <option value="spacious">宽松 (48px)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>字体族</label>
                    <select name="theme.fontFamily">
                        <option value="system" selected>系统默认</option>
                        <option value="serif">衬线字体</option>
                        <option value="sans-serif">无衬线字体</option>
                        <option value="monospace">等宽字体</option>
                        <option value="custom">自定义字体</option>
                    </select>
                </div>
            </div>
        `;
    }

    /**
     * 创建面板管理面板
     */
    createPanelManagementPanel() {
        return `
            <div class="content-header">
                <h3>面板管理</h3>
                <div class="header-actions">
                    <button class="btn-action btn-add" data-action="add-custom-panel">
                        添加自定义面板
                    </button>
                    <button class="btn-action btn-refresh" data-action="refresh-panels">
                        刷新
                    </button>
                </div>
            </div>

            <div class="content-body">
                <!-- 面板管理主体 -->
                <div class="panel-management-container">
                    <!-- 左侧面板列表 -->
                    <div class="panel-list-section">
                        <!-- 面板分类标签 -->
                        <div class="panel-categories">
                            <div class="category-tab active" data-category="all">
                                <span class="category-text">全部面板</span>
                                <span class="category-count">${this.getTotalPanelCount()}</span>
                            </div>
                        </div>

                        <!-- 面板列表 -->
                        <div class="panel-list-container">
                            <div class="panel-list" data-category="all">
                                ${this.createPanelListItems('all')}
                            </div>
                        </div>
                    </div>

                    <!-- 右侧面板属性 -->
                    <div class="panel-properties-section">
                        <div class="properties-header">
                            <h4>面板属性</h4>
                            <div class="properties-actions">
                                <button class="btn-small btn-save" data-action="save-panel-properties" disabled style="pointer-events: auto;">
                                    <span class="btn-icon" style="pointer-events: none;">💾</span>
                                    <span class="btn-text" style="pointer-events: none;">保存</span>
                                </button>
                                <button class="btn-small btn-delete" data-action="delete-panel" disabled style="pointer-events: auto;">
                                    <span class="btn-icon" style="pointer-events: none;">🗑️</span>
                                    <span class="btn-text" style="pointer-events: none;">删除</span>
                                </button>
                            </div>
                        </div>

                        <div class="properties-content">
                            <div class="no-selection-message">
                                <div class="message-icon">🎛️</div>
                                <div class="message-text">请选择一个面板来查看和编辑属性</div>
                            </div>

                            <!-- 面板属性表单（动态生成） -->
                            <div class="panel-properties-form" style="display: none;">
                                ${this.createPanelPropertiesForm()}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建总结面板
     */
    createSummaryPanel() {
        return `
            <div class="content-header">
                <h3>📊 总结面板</h3>
                <div class="header-actions">
                    <button class="btn-action btn-manual-summary" id="header-manual-summary-btn">
                        <span class="btn-icon">🖊️</span>
                        <span class="btn-text">手动总结</span>
                    </button>
                    <button class="btn-action btn-refresh" id="header-refresh-summary-btn">
                        <span class="btn-icon">🔄</span>
                        <span class="btn-text">刷新</span>
                    </button>
                </div>
            </div>

            <div class="content-body">
                <!-- 总结设置区域 -->
                <div class="summary-settings-container">
                    <div class="settings-section">
                        <h4>⚙️ 总结设置</h4>

                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label">
                                    <input type="checkbox" id="content-auto-summary-enabled" />
                                    <span class="checkbox-text">启用自动总结</span>
                                </label>
                                <div class="setting-hint">达到设定楼层数后自动生成总结</div>
                            </div>
                        </div>

                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label">
                                    <input type="checkbox" id="content-inject-summary-enabled" />
                                    <span class="checkbox-text">启用总结注入</span>
                                </label>
                                <div class="setting-hint">将总结内容作为记忆注入给主API，帮助AI保持剧情连贯性</div>
                            </div>
                        </div>

                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label" for="content-summary-floor-count">总结楼层数</label>
                                <div class="input-group">
                                    <input type="number" id="content-summary-floor-count" min="5" max="100" value="20" />
                                    <span class="input-unit">条消息</span>
                                </div>
                                <div class="setting-hint">每隔多少条消息进行一次总结</div>
                            </div>
                        </div>

                        <!-- 🆕 新增：手动总结范围选择 -->
                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label" for="content-summary-range-mode">手动总结模式</label>
                                <select id="content-summary-range-mode" class="setting-select">
                                    <option value="recent">总结最近N层</option>
                                    <option value="custom">自定义范围</option>
                                </select>
                                <div class="setting-hint">选择手动总结时使用的范围模式</div>
                            </div>
                        </div>

                        <div class="setting-row" id="content-custom-range-row" style="display: none;">
                            <div class="setting-group">
                                <label class="setting-label">自定义总结范围</label>
                                <div style="display: flex; gap: 10px; align-items: center;">
                                    <div class="input-group" style="flex: 1;">
                                        <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">起始楼层</label>
                                        <input type="number" id="content-custom-range-start" min="1" value="1" style="width: 100%;" />
                                    </div>
                                    <span style="color: var(--SmartThemeQuoteColor, #888);">至</span>
                                    <div class="input-group" style="flex: 1;">
                                        <label style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">结束楼层</label>
                                        <input type="number" id="content-custom-range-end" min="1" value="20" style="width: 100%;" />
                                    </div>
                                </div>
                                <div class="setting-hint">指定要总结的楼层范围（楼层号从1开始）</div>
                            </div>
                        </div>

                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label" for="content-summary-type">总结类型</label>
                                <select id="content-summary-type" class="setting-select">
                                    <option value="small">小总结 (约150字)</option>
                                    <option value="large">大总结 (约400字)</option>
                                    <option value="custom">自定义字数</option>
                                </select>
                            </div>
                        </div>

                        <div class="setting-row" id="content-custom-word-count-row" style="display: none;">
                            <div class="setting-group">
                                <label class="setting-label" for="content-summary-word-count">总结字数</label>
                                <div class="input-group">
                                    <input type="number" id="content-summary-word-count" min="50" max="1000" value="300" />
                                    <span class="input-unit">字</span>
                                </div>
                                <div class="setting-hint">自定义总结的字数范围</div>
                            </div>
                        </div>



                        <!-- 🆕 新增：自定义提示词选项 -->
                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label">
                                    <input type="checkbox" id="content-use-custom-prompt" />
                                    <span class="checkbox-text">使用自定义提示词</span>
                                </label>
                                <div class="setting-hint">启用后，使用您自定义的提示词内容进行总结生成</div>
                            </div>
                        </div>

                        <!-- 🆕 新增：自定义提示词配置区域 -->
                        <div class="setting-row custom-prompt-section" id="content-custom-prompt-row" style="display: none;">
                            <div class="setting-group">
                                <label class="setting-label">自定义总结提示词</label>
                                <textarea id="content-custom-prompt" rows="8" placeholder="请输入自定义总结提示词...

示例：
请根据以下对话内容生成简洁的剧情总结，包括：
1. 主要事件和情节发展
2. 角色行为和情感变化
3. 重要对话和决定
4. 场景和时间变化

要求：
- 总结长度约200-300字
- 保持客观中性的叙述
- 突出关键剧情转折点" style="width: 100%; resize: vertical; font-family: monospace; font-size: 13px; min-height: 200px;"></textarea>
                                <div class="setting-hint">自定义的提示词将完全替代系统默认的总结生成提示词</div>
                                <div class="custom-prompt-stats" style="margin-top: 8px; display: flex; gap: 20px; font-size: 12px; color: var(--theme-text-secondary, #aaa);">
                                    <span>字符数: <span id="content-custom-prompt-char-count">0</span></span>
                                    <span>行数: <span id="content-custom-prompt-line-count">0</span></span>
                                </div>
                            </div>
                        </div>

                        <!-- 🔧 新增：自动隐藏楼层设置 -->
                        <div class="setting-row">
                            <div class="setting-group">
                                <label class="setting-label">
                                    <input type="checkbox" id="content-auto-hide-enabled" />
                                    <span class="checkbox-text">启用自动隐藏已总结楼层</span>
                                </label>
                                <div class="setting-hint">自动隐藏已经总结过的楼层内容，减少界面混乱</div>
                            </div>
                        </div>

                        <div class="setting-row" id="content-auto-hide-threshold-row" style="display: none;">
                            <div class="setting-group">
                                <label class="setting-label" for="content-auto-hide-threshold">保留最新楼层数</label>
                                <div class="input-group">
                                    <input type="number" id="content-auto-hide-threshold" min="10" max="200" value="30" />
                                    <span class="input-unit">个楼层</span>
                                </div>
                                <div class="setting-hint">保留最新的N个楼层不隐藏</div>
                            </div>
                        </div>

                        <div class="setting-actions">
                            <button class="btn-primary" id="content-save-settings-btn">
                                <span class="btn-icon">💾</span>
                                <span class="btn-text">保存设置</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- 总结历史区域 -->
                <div class="summary-history-container">
                    <div class="history-section">
                        <h4>📚 总结历史</h4>

                        <!-- 🚀 新增：总结类型筛选 -->
                        <div class="summary-filter-tabs" style="display: flex; margin-bottom: 15px; border-bottom: 1px solid var(--SmartThemeBorderColor, #333);">
                            <button class="filter-tab active" data-filter="all" style="background: none; border: none; padding: 8px 16px; color: var(--SmartThemeQuoteColor, #888); cursor: pointer; border-bottom: 2px solid transparent; transition: all 0.2s;">全部</button>
                            <button class="filter-tab" data-filter="traditional" style="background: none; border: none; padding: 8px 16px; color: var(--SmartThemeQuoteColor, #888); cursor: pointer; border-bottom: 2px solid transparent; transition: all 0.2s;">传统总结</button>
                            <button class="filter-tab" data-filter="ai_memory" style="background: none; border: none; padding: 8px 16px; color: var(--SmartThemeQuoteColor, #888); cursor: pointer; border-bottom: 2px solid transparent; transition: all 0.2s;">AI记忆</button>
                        </div>

                        <div class="history-selector-group">
                            <label class="setting-label" for="content-summary-history-select">选择总结记录</label>
                            <div class="history-select-row">
                                <select id="content-summary-history-select" class="setting-select summary-history-select">
                                    <option value="">请选择要查看的总结记录</option>
                                </select>
                                <button id="content-upload-to-worldbook-btn" class="btn btn-small" title="上传当前总结到世界书" style="background: var(--SmartThemeAccentColor, #4a9eff); margin-right: 4px;">📚 上传</button>
                                <button id="content-delete-summary-btn" class="btn btn-small" title="删除当前选择的总结">🗑️ 删除</button>
                            </div>
                            <div class="setting-hint">选择总结记录后，下方将显示详细内容。可上传到世界书作为剧情记忆</div>
                        </div>

                        <!-- 🚀 新增：世界书上传配置 -->
                        <div class="worldbook-upload-config" style="margin-top: 15px; padding: 12px; background: var(--SmartThemeSurfaceColor, #1a1a1a); border: 1px solid var(--SmartThemeBorderColor, #333); border-radius: 6px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--SmartThemeAccentColor, #4a9eff);">📚 世界书上传设置</h5>

                            <div class="setting-row">
                                <label class="setting-label" for="worldbook-auto-upload">自动上传新总结</label>
                                <input type="checkbox" id="worldbook-auto-upload" class="setting-checkbox">
                                <div class="setting-hint">启用后，新生成的总结将自动上传到世界书</div>
                            </div>

                            <div class="setting-row">
                                <label class="setting-label" for="worldbook-entry-format">条目命名格式</label>
                                <select id="worldbook-entry-format" class="setting-select">
                                    <option value="auto">自动命名（剧情总结 #1、AI记忆 #1）</option>
                                    <option value="floor_range">楼层范围（楼层 #1-10）</option>
                                    <option value="custom">自定义名称</option>
                                </select>
                            </div>

                            <div class="setting-row" id="worldbook-custom-name-row" style="display: none;">
                                <label class="setting-label" for="worldbook-custom-name">自定义条目名称</label>
                                <input type="text" id="worldbook-custom-name" class="setting-input" placeholder="输入自定义条目名称">
                            </div>

                            <div class="setting-row">
                                <label class="setting-label" for="worldbook-add-timestamp">添加时间戳</label>
                                <input type="checkbox" id="worldbook-add-timestamp" class="setting-checkbox" checked>
                                <div class="setting-hint">在条目内容中添加生成时间信息</div>
                            </div>

                            <div class="setting-row">
                                <label class="setting-label" for="worldbook-use-tags">使用内容标签</label>
                                <input type="checkbox" id="worldbook-use-tags" class="setting-checkbox" checked>
                                <div class="setting-hint">为总结内容添加XML标签以便识别类型</div>
                            </div>

                            <div class="worldbook-batch-actions" style="margin-top: 12px; padding-top: 12px; border-top: 1px solid var(--SmartThemeBorderColor, #333);">
                                <button id="worldbook-batch-upload-btn" class="btn btn-small" style="background: var(--SmartThemeAccentColor, #4a9eff);">📤 批量上传所有总结</button>
                                <span class="setting-hint" style="margin-left: 8px;">将当前聊天的所有总结上传到世界书</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 总结内容查看区域 -->
                <div class="summary-content-container" id="content-summary-content-section" style="display: none;">
                    <div class="content-section">
                        <div class="content-header-info">
                            <h4>📄 总结内容</h4>
                            <div class="content-meta">
                                <span class="content-title" id="content-summary-title"></span>
                                <span class="content-date" id="content-summary-date"></span>
                            </div>
                        </div>
                        <div class="content-body-text" id="content-summary-content-body"></div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 获取面板总数
     */
    getTotalPanelCount() {
        return this.getBasicPanelCount() + this.getCustomPanelCount();
    }

    /**
     * 获取基础面板数量
     */
    getBasicPanelCount() {
        const basicPanels = [
            // 移除基础设置面板，它是系统设置，不是面板
            'personal', 'interaction', 'tasks', 'world', 'organization',
            'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy',
            'modern', 'historical', 'magic', 'training'
        ];
        return basicPanels.length;
    }

    /**
     * 获取自定义面板数量
     */
    getCustomPanelCount() {
        // 从配置中获取自定义面板数量
        const customPanels = this.getCustomPanels();
        return Object.keys(customPanels).length;
    }

    /**
     * 获取自定义面板配置
     */
    getCustomPanels() {
        try {
            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 获取自定义面板数据
            const customPanels = extensionSettings['Information bar integration tool'].customPanels || {};

            // 同步到全局变量（保持兼容性）
            window.InfoBarCustomPanels = customPanels;

            console.log('[InfoBarSettings] 📊 获取自定义面板配置:', customPanels);
            return customPanels;
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取自定义面板配置失败:', error);
            return window.InfoBarCustomPanels || {};
        }
    }

    /**
     * 生成唯一的面板键名
     */
    generateUniqueKey(customPanels) {
        try {
            // 获取所有现有的键名
            const existingKeys = Object.values(customPanels).map(panel => panel.key).filter(key => key);

            console.log('[InfoBarSettings] 🔍 现有键名:', existingKeys);

            // 如果没有自定义面板，返回 'Custom'
            if (existingKeys.length === 0) {
                return 'Custom';
            }

            // 检查 'Custom' 是否已存在
            if (!existingKeys.includes('Custom')) {
                return 'Custom';
            }

            // 查找下一个可用的数字后缀
            let counter = 1;
            let newKey;
            do {
                newKey = `Custom${counter}`;
                counter++;
            } while (existingKeys.includes(newKey));

            console.log('[InfoBarSettings] ✅ 生成唯一键名:', newKey);
            return newKey;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成唯一键名失败:', error);
            // 备用方案：使用时间戳
            return `Custom_${Date.now()}`;
        }
    }

    /**
     * 🔧 迁移时间戳ID面板到键名ID
     */
    migrateTimestampIdPanels() {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};
            const customPanels = configs.customPanels || {};

            console.log('[InfoBarSettings] 🔄 开始迁移时间戳ID面板到键名ID');

            const migratedPanels = {};
            let migratedCount = 0;

            Object.entries(customPanels).forEach(([panelId, panel]) => {
                // 检查是否是时间戳ID格式（custom_数字）
                if (panelId.startsWith('custom_') && /^custom_\d+$/.test(panelId)) {
                    console.log(`[InfoBarSettings] 🔄 迁移面板: ${panelId} -> ${panel.key}`);

                    // 更新面板的ID为键名
                    panel.id = panel.key;

                    // 使用键名作为存储键
                    migratedPanels[panel.key] = panel;
                    migratedCount++;
                } else {
                    // 保持现有的面板
                    migratedPanels[panelId] = panel;
                }
            });

            if (migratedCount > 0) {
                // 更新配置
                extensionSettings['Information bar integration tool'].customPanels = migratedPanels;

                // 保存配置
                context.saveSettingsDebounced();

                console.log(`[InfoBarSettings] ✅ 成功迁移 ${migratedCount} 个面板到键名ID`);
                return migratedCount;
            } else {
                console.log('[InfoBarSettings] ℹ️ 没有需要迁移的时间戳ID面板');
                return 0;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 迁移时间戳ID面板失败:', error);
            return 0;
        }
    }

    /**
     * 修复重复键名问题
     */
    async fixDuplicateKeys() {
        try {
            console.log('[InfoBarSettings] 🔧 开始修复重复键名问题...');

            const customPanels = this.getCustomPanels();
            const keyCount = {};
            const duplicateKeys = [];

            // 统计键名使用次数
            for (const [panelId, panel] of Object.entries(customPanels)) {
                const key = panel.key;
                if (key) {
                    keyCount[key] = (keyCount[key] || 0) + 1;
                    if (keyCount[key] > 1) {
                        duplicateKeys.push(key);
                    }
                }
            }

            console.log('[InfoBarSettings] 📊 键名统计:', keyCount);
            console.log('[InfoBarSettings] ⚠️ 重复键名:', duplicateKeys);

            if (duplicateKeys.length === 0) {
                console.log('[InfoBarSettings] ✅ 没有发现重复键名');
                return;
            }

            // 修复重复键名
            let fixedCount = 0;
            for (const [panelId, panel] of Object.entries(customPanels)) {
                const key = panel.key;
                if (duplicateKeys.includes(key)) {
                    // 为重复的键名生成新的唯一键名
                    const newKey = this.generateUniqueKey(customPanels);
                    panel.key = newKey;
                    customPanels[panelId] = panel;
                    fixedCount++;

                    console.log(`[InfoBarSettings] 🔧 修复面板 ${panelId}: ${key} -> ${newKey}`);

                    // 更新customPanels以避免后续冲突
                    break; // 一次只修复一个，然后重新检查
                }
            }

            if (fixedCount > 0) {
                // 保存修复后的配置
                await this.saveAllCustomPanels(customPanels);
                console.log(`[InfoBarSettings] ✅ 已修复 ${fixedCount} 个重复键名`);

                // 递归修复剩余的重复键名
                await this.fixDuplicateKeys();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 修复重复键名失败:', error);
        }
    }
    /**
     * 保存所有自定义面板配置
     */
    async saveAllCustomPanels(customPanels) {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            extensionSettings['Information bar integration tool'].customPanels = customPanels;

            // 保存到SillyTavern
            await context.saveSettingsDebounced();

            // 同步到全局变量
            window.InfoBarCustomPanels = customPanels;

            // 🔧 新增：清理缓存，确保下次获取映射时重新生成
            this._cachedCompleteMapping = null;

            console.log('[InfoBarSettings] ✅ 所有自定义面板配置已保存');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存所有自定义面板配置失败:', error);
            throw error;
        }
    }

    /**
     * 创建面板列表项
     */
    createPanelListItems(category) {
        let panels = [];

        if (category === 'all' || category === 'basic') {
            panels = panels.concat(this.getBasicPanelItems());
        }

        if (category === 'all' || category === 'custom') {
            panels = panels.concat(this.getCustomPanelItems());
        }

        if (panels.length === 0) {
            return `
                <div class="empty-panel-list">
                    <div class="empty-icon">📭</div>
                    <div class="empty-text">暂无${category === 'custom' ? '自定义' : ''}面板</div>
                </div>
            `;
        }

        return panels.map(panel => this.createPanelListItem(panel)).join('');
    }

    /**
     * 获取基础面板项
     */
    getBasicPanelItems() {
        const basicPanels = [
            // 移除基础设置面板，它是系统设置，不是面板
                    { id: 'personal', name: '个人信息', icon: '👤', type: 'basic' },
        { id: 'interaction', name: '交互对象', icon: '👥', type: 'basic' },
        { id: 'tasks', name: '任务系统', icon: '📋', type: 'basic' },
        { id: 'world', name: '世界设定', icon: '🌍', type: 'basic' },
        { id: 'organization', name: '组织架构', icon: '🏢', type: 'basic' },
        { id: 'news', name: '新闻事件', icon: '📰', type: 'basic' },
        { id: 'inventory', name: '物品清单', icon: '🎒', type: 'basic' },
        { id: 'abilities', name: '能力技能', icon: '⚡', type: 'basic' },
        { id: 'plot', name: '剧情发展', icon: '📖', type: 'basic' },
        { id: 'cultivation', name: '修炼系统', icon: '🧘', type: 'basic' },
        { id: 'fantasy', name: '玄幻世界', icon: '🔮', type: 'basic' },
        { id: 'modern', name: '现代都市', icon: '🏙️', type: 'basic' },
        { id: 'historical', name: '历史古代', icon: '🏛️', type: 'basic' },
        { id: 'magic', name: '魔法能力', icon: '🪄', type: 'basic' },
        { id: 'training', name: '调教系统', icon: '🎯', type: 'basic' }
        ];

        return basicPanels;
    }

    /**
     * 获取自定义面板项
     */
    getCustomPanelItems() {
        const customPanels = this.getCustomPanels();
        return Object.values(customPanels).map(panel => ({
            ...panel,
            type: 'custom'
        }));
    }

    /**
     * 创建单个面板列表项
     */
    createPanelListItem(panel) {
        const typeClass = panel.type === 'custom' ? 'custom-panel' : 'basic-panel';

        return `
            <div class="panel-list-item ${typeClass}" data-panel-id="${panel.id}" data-panel-type="${panel.type}">
                <div class="panel-item-info">
                    <div class="panel-item-name">${panel.name}</div>
                    <div class="panel-item-meta">
                        <span class="panel-type">（${panel.type === 'custom' ? '自定义' : '基础'}）</span>
                    </div>
                </div>
                <div class="panel-item-actions">
                    ${panel.type === 'custom' ? `
                        <button class="btn-icon" data-action="edit-panel" data-panel-id="${panel.id}" title="编辑">
                            编辑
                        </button>
                        <button class="btn-icon" data-action="duplicate-panel" data-panel-id="${panel.id}" title="复制">
                            复制
                        </button>
                    ` : `
                        <button class="btn-icon" data-action="view-panel" data-panel-id="${panel.id}" title="查看">
                            查看
                        </button>
                    `}
                </div>
            </div>
        `;
    }

    /**
     * 创建面板属性表单
     */
    createPanelPropertiesForm() {
        return `
            <div class="properties-form">
                <!-- 基本信息 -->
                <div class="form-section">
                    <h5>基本信息</h5>
                    <div class="form-group">
                        <label for="panel-name">面板名称</label>
                        <input type="text" id="panel-name" name="panel.name" placeholder="请输入面板名称" />
                    </div>
                    <div class="form-group">
                        <label for="panel-key">键名</label>
                        <input type="text" id="panel-key" name="panel.key" placeholder="请输入键名（用于配置存储）" />
                        <div class="form-hint">键名用于配置存储，建议使用英文和下划线</div>
                    </div>
                    <div class="form-group">
                        <label for="panel-description">面板说明</label>
                        <textarea id="panel-description" name="panel.description" rows="3" placeholder="请输入面板说明"></textarea>
                    </div>
                </div>

                <!-- 配置选项 -->
                <div class="form-section">
                    <h5>配置选项</h5>
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" id="panel-required" name="panel.required" />
                            <span>是否必填</span>
                        </label>
                    </div>
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" id="panel-memory-inject" name="panel.memoryInject" />
                            <span>是否注入记忆</span>
                        </label>
                    </div>

                </div>



                <!-- 子项配置 -->
                <div class="form-section">
                    <h5>子项配置</h5>
                    <div class="sub-items-header">
                        <span>子项列表</span>
                        <button type="button" class="btn-small btn-add-sub-item" data-action="add-sub-item">
                            <span class="btn-icon" style="pointer-events: none;">➕</span>
                            <span class="btn-text" style="pointer-events: none;">新增子项</span>
                        </button>
                    </div>
                    <div class="sub-items-container">
                        <div class="empty-sub-items">
                            <div class="empty-icon">📝</div>
                            <div class="empty-text">暂无子项，点击"新增子项"添加</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建前端显示面板
     */
    createFrontendDisplayPanel() {
        return `
            <div class="settings-group">
                <h3>🖥️ 前端显示设置</h3>
                <p class="frontend-description">启用前端显示后，AI消息将包裹在信息栏框架中，提供交互式的面板和子项显示</p>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" name="frontendDisplay.enabled" />
                        <span>启用前端显示</span>
                    </label>
                    <p class="help-text">启用后，AI消息区域将显示交互式的信息栏预览界面</p>
                </div>
            </div>

            <div class="settings-group frontend-display-config" style="display: none;">
                <h3>📊 显示配置</h3>

                <div class="form-group">
                    <label>显示样式</label>
                    <select name="frontendDisplay.style">
                        <option value="left">左对齐</option>
                        <option value="center">居中显示</option>
                        <option value="right">右对齐</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" name="frontendDisplay.showAddButtons" checked />
                        <span>显示添加按钮</span>
                    </label>
                    <p class="help-text">在预览窗口上下方显示可点击的添加框框</p>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" name="frontendDisplay.animationEnabled" checked />
                        <span>启用动画效果</span>
                    </label>
                </div>
            </div>

            <div class="settings-group frontend-display-preview" style="display: none;">
                <h3>🎮 交互预览</h3>
                <p class="preview-description">预览前端显示的交互效果</p>

                <div class="frontend-preview-container">
                    <!-- 顶部预览区域 -->
                    <div class="preview-section">
                        <h4>🔝 顶部预览内容</h4>
                        <div class="ai-message-wrapper top-preview">
                            <div class="add-panel-slots top-slots">
                                <div class="add-slot" data-position="top-1" data-area="top">+</div>
                                <div class="add-slot" data-position="top-2" data-area="top">+</div>
                                <div class="add-slot" data-position="top-3" data-area="top">+</div>
                            </div>

                            <div class="embedded-panels top-embedded-panels">
                                <!-- 用户添加的顶部面板和子项将显示在这里 -->
                            </div>
                        </div>
                    </div>

                    <!-- AI消息内容 -->
                    <div class="ai-message-preview">
                        <div class="message-content">
                            <p>这是AI消息的预览内容...</p>
                        </div>
                    </div>

                    <!-- 底部预览区域 -->
                    <div class="preview-section">
                        <h4>🔽 底部预览内容</h4>
                        <div class="ai-message-wrapper bottom-preview">
                            <div class="embedded-panels bottom-embedded-panels">
                                <!-- 用户添加的底部面板和子项将显示在这里 -->
                            </div>

                            <div class="add-panel-slots bottom-slots">
                                <div class="add-slot" data-position="bottom-1" data-area="bottom">+</div>
                                <div class="add-slot" data-position="bottom-2" data-area="bottom">+</div>
                                <div class="add-slot" data-position="bottom-3" data-area="bottom">+</div>
                            </div>
                        </div>
                    </div>
                </div>

                                    <div class="preview-actions">
                        <button class="btn" data-action="test-panel-popup">测试面板弹窗</button>
                        <button class="btn" data-action="test-add-panel">测试添加面板</button>
                        <button class="btn" data-action="clear-preview">清空预览</button>
                    </div>
            </div>


        `;
    }

    /**
     * 创建高级设置面板
     */
    createAdvancedPanel() {
        return `
            <div class="settings-group">
                <h3>调试设置</h3>
                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" name="debug.enabled" />
                        <span>启用调试模式</span>
                    </label>
                </div>
                <div class="form-group">
                    <label>日志级别</label>
                    <select name="debug.logLevel">
                        <option value="error">错误</option>
                        <option value="warn">警告</option>
                        <option value="info">信息</option>
                        <option value="debug">调试</option>
                    </select>
                </div>
                <div class="form-group debug-actions-row">
                    <button class="btn" data-action="open-error-log">错误日志</button>
                    <button class="btn" data-action="open-project-link">项目地址</button>
                </div>
            </div>

            <div class="settings-group">
                <h3>配置管理</h3>

                <!-- 导出配置选项 -->
                <div class="form-group">
                    <label>导出配置选项</label>
                    <div class="export-options">
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-panel-configs" checked />
                            <span>面板配置（启用状态、自定义子项、自定义面板）</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-panel-rules" checked />
                            <span>面板规则</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-field-rules" checked />
                            <span>字段规则</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-theme-settings" />
                            <span>主题设置</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-api-settings" />
                            <span>API设置</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="export-all-settings" />
                            <span>所有设置（包含调试、前端显示等）</span>
                        </label>
                    </div>
                </div>

                <!-- 配置文件操作 -->
                <div class="form-group">
                    <label>保存为配置名称</label>
                    <input type="text" id="config-profile-name" placeholder="输入配置名称" />
                </div>
                <div class="form-group config-primary-actions">
                    <button class="btn" data-action="save-profile">保存配置</button>
                    <button class="btn btn-primary" data-action="export-custom">📤 导出选定配置</button>
                    <button class="btn" data-action="export">导出全部配置</button>
                    <button class="btn" data-action="import">导入配置</button>
                    <button class="btn btn-warning" data-action="open-data-cleanup" title="清理settings.json中的大型数据">🧹 数据清理</button>
                </div>

                <!-- 已保存的配置 -->
                <div class="form-group">
                    <label>已保存的配置</label>
                    <div class="config-row">
                        <select id="config-profile-select" class="setting-select">
                            <option value="">请选择一个配置</option>
                        </select>
                        <div class="config-row-actions">
                            <button class="btn btn-small" data-action="load-profile">加载配置</button>
                            <button class="btn btn-small" data-action="delete-profile">删除配置</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="settings-group">
                <h3>数据管理</h3>
                <div class="form-group">
                    <label>数据范围</label>
                    <select id="data-scope-select" name="dataManagement.scope">
                        <option value="current">当前聊天</option>
                        <option value="all">所有聊天</option>
                    </select>
                    <small>选择要导出或导入的数据范围</small>
                </div>
                <div class="form-group">
                    <label>数据格式</label>
                    <select id="data-format-select" name="dataManagement.format">
                        <option value="json">JSON格式</option>
                        <option value="csv">CSV格式</option>
                        <option value="xml">XML格式</option>
                    </select>
                    <small>选择导出或导入的数据格式</small>
                </div>
                <div class="form-group">
                    <div class="data-management-actions">
                        <button class="btn btn-primary data-export-btn" data-action="export-data">
                            📤 导出数据
                        </button>
                        <button class="btn btn-secondary data-import-btn" data-action="import-data">
                            📥 导入数据
                        </button>
                    </div>
                </div>
                <div class="form-group">
                    <small class="data-management-hint">
                        💡 导出功能将包含聊天信息、消息记录和信息栏数据。导入前请确保数据格式正确。
                    </small>
                </div>
            </div>

            <div class="settings-group danger-zone">
                <h3>危险操作</h3>
                <div class="form-group">
                    <button class="btn btn-danger" data-action="clear-cache">清除所有缓存</button>
                    <button class="btn btn-danger" data-action="initialize-plugin">初始化插件</button>
                    <button class="btn btn-danger" data-action="clear-panel-data">清空面板数据</button>
                </div>
                <div class="form-group">
                    <small class="text-muted">
                        ⚠️ 危险操作说明：<br>
                        • 初始化插件：将插件恢复到刚安装的状态，清空所有用户数据、自定义内容和规则<br>
                        • 清空面板数据：清空所有聊天中的面板数据，但保留配置和规则
                    </small>
                </div>
            </div>
        `;
    }

    /**
     * 绑定事件
     */
    bindEvents() {
        try {
            // 模态框事件
            this.modal.addEventListener('click', (e) => {
                const actionEl = e.target.closest('[data-action]');
                const action = actionEl?.dataset?.action;

                if (action) {
                    console.log('[InfoBarSettings] 🔘 处理操作:', action, '元素:', actionEl);
                    console.log('[InfoBarSettings] 🔍 Switch语句即将处理action:', action);
                }

                switch (action) {
                    case 'close':
                    case 'cancel':
                        this.hide();
                        break;
                    case 'save':
                        this.saveSettings();
                        break;
                    // reset事件已移除
                    case 'export':
                        this.exportSettings();
                        break;
                    case 'import':
                        this.importSettings();
                        break;
                    case 'test-api':
                        this.testAPIConnection();
                        break;
                    case 'load-models':
                        this.loadAPIModels();
                        break;
                    case 'open-error-log':
                        this.openErrorLogModal();
                        break;
                    case 'open-project-link':
                        this.openProjectLink();
                        break;
                    case 'save-profile':
                        this.saveSettingsProfile();
                        break;
                    case 'load-profile':
                        this.loadSettingsProfile();
                        break;
                    case 'delete-profile':
                        this.deleteSettingsProfile();
                        break;
                    case 'export-data':
                        console.log('[InfoBarSettings] 🚀 开始执行导出数据...');
                        this.exportData().catch(error => {
                            console.error('[InfoBarSettings] ❌ 导出数据事件处理失败:', error);
                            this.showMessage('导出数据失败: ' + error.message, 'error');
                        });
                        break;
                    case 'import-data':
                        console.log('[InfoBarSettings] 🚀 开始执行导入数据...');
                        this.importData().catch(error => {
                            console.error('[InfoBarSettings] ❌ 导入数据事件处理失败:', error);
                            this.showMessage('导入数据失败: ' + error.message, 'error');
                        });
                        break;
                    default:
                        if (action) {
                            console.log('[InfoBarSettings] ⚠️ 未处理的操作:', action);
                        }
                        break;
                }
            });

            // 标签页切换
            this.modal.addEventListener('click', (e) => {
                if (e.target.classList.contains('tab-btn')) {
                    this.switchTab(e.target.dataset.tab);
                }
            });

            // 表单变更事件
            this.modal.addEventListener('change', (e) => {
                this.handleFormChange(e);
            });

            // 范围输入实时更新
            this.modal.addEventListener('input', (e) => {
                if (e.target.type === 'range') {
                    const valueSpan = e.target.nextElementSibling;
                    if (valueSpan && valueSpan.classList.contains('range-value')) {
                        valueSpan.textContent = e.target.value;
                    }
                }
            });

            console.log('[InfoBarSettings] 🔗 事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定事件失败:', error);
            throw error;
        }
    }

    /**
     * 初始化所有基础面板的自定义子项显示
     */
    initAllBasicPanelCustomSubItems() {
        try {
            const basicPanelIds = ['personal', 'interaction', 'tasks', 'world', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];

            basicPanelIds.forEach(panelId => {
                const panelData = this.getBasicPanelData(panelId);
                if (panelData && panelData.subItems && panelData.subItems.length > 0) {
                    this.refreshBasicPanelContent(panelId);
                    console.log(`[InfoBarSettings] 🔄 已初始化基础面板 ${panelId} 的自定义子项显示`);
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化基础面板自定义子项失败:', error);
        }
    }

    /**
     * 显示设置界面
     */
    async show() {
        try {
            if (!this.initialized) {
                await this.init();
            }

            // 只在首次显示或明确需要刷新时加载设置
            if (!this.settingsLoaded || this.needsSettingsRefresh) {
                console.log('[InfoBarSettings] 📥 加载最新设置...');
                await this.loadSettings();
                this.settingsLoaded = true;
                this.needsSettingsRefresh = false;
            } else {
                console.log('[InfoBarSettings] 📋 使用已缓存的设置');
            }

            // 确保数据管理样式已加载
            this.ensureDataManagementStyles();

            // 显示模态框
            this.modal.style.display = 'flex';
            this.visible = true;

            // 🔧 修复：延迟初始化基础面板自定义子项，确保DOM已准备好
            setTimeout(() => {
                this.initAllBasicPanelCustomSubItems();
                // 刷新已保存配置下拉
                this.refreshProfilesSelect();
                // 🆕 初始化世界书配置面板
                this.initWorldBookConfigPanel();
                // 应用调试级别到控制台
                const enabled = this.modal.querySelector('[name="debug.enabled"]')?.checked;
                const level = this.modal.querySelector('[name="debug.logLevel"]').value || 'info';
                this.applyConsoleLogLevel(enabled ? level : 'none');
            }, 100); // 100ms延迟确保DOM渲染完成

            // 触发显示事件
            if (this.eventSystem) {
                this.eventSystem.emit('ui:show', {
                    component: 'InfoBarSettings',
                    timestamp: Date.now()
                });
            }

            console.log('[InfoBarSettings] 👁️ 设置界面已显示');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示界面失败:', error);
            this.handleError(error);
        }
    }

    /**
     * 隐藏设置界面
     */
    hide() {
        try {
            this.modal.style.display = 'none';
            this.visible = false;

            // 触发隐藏事件
            if (this.eventSystem) {
                this.eventSystem.emit('ui:hide', {
                    component: 'InfoBarSettings',
                    timestamp: Date.now()
                });
            }

            console.log('[InfoBarSettings] 👁️ 设置界面已隐藏');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 隐藏界面失败:', error);
            this.handleError(error);
        }
    }

    /**
     * 切换标签页
     */
    switchTab(tabName) {
        try {
            // 更新标签按钮状态
            this.modal.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.tab === tabName);
            });

            // 更新面板显示状态
            this.modal.querySelectorAll('.tab-panel').forEach(panel => {
                panel.classList.toggle('active', panel.dataset.panel === tabName);
            });

            this.currentTab = tabName;

            console.log(`[InfoBarSettings] 📑 切换到标签页: ${tabName}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换标签页失败:', error);
            this.handleError(error);
        }
    }
    /**
     * 加载设置到表单
     */
    async loadSettings() {
        try {
            console.log('[InfoBarSettings] 📥 开始加载设置...');

            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            const configs = extensionSettings['Information bar integration tool'];

            // 特别处理前端显示配置，确保从FrontendDisplayManager读取最新状态
            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
                            if (fdm) {
                const frontendDisplayConfig = await fdm.getSavedFrontendDisplayConfig();
                if (frontendDisplayConfig) {
                    configs.frontendDisplay = frontendDisplayConfig;
                    console.log('[InfoBarSettings] 📱 已加载前端显示配置:', frontendDisplayConfig);

                    // 🔧 修复：重新渲染预览内容
                    this.renderFrontendDisplayPreview(frontendDisplayConfig);
                }
            }

            // 填充表单 - 递归处理嵌套对象
            this.loadNestedConfigs(configs);

            // 根据加载的前端显示启用状态，设置UI区域的显示/隐藏
            if (configs.frontendDisplay && typeof configs.frontendDisplay.enabled === 'boolean') {
                this.toggleFrontendDisplaySections(configs.frontendDisplay.enabled);
                console.log('[InfoBarSettings] 🖥️ 前端显示区域状态已设置:', configs.frontendDisplay.enabled);
            }

            // 特别处理自定义面板配置，确保设置到全局变量
            if (configs.customPanels && typeof configs.customPanels === 'object') {
                window.InfoBarCustomPanels = configs.customPanels;
                console.log('[InfoBarSettings] 📊 已加载自定义面板配置:', Object.keys(configs.customPanels).length, '个面板');

                // 打印详细的面板信息用于调试
                for (const [panelId, panel] of Object.entries(configs.customPanels)) {
                    console.log(`[InfoBarSettings] 📋 面板 ${panelId}:`, panel.name, panel.enabled ? '(启用)' : '(禁用)');
                }

                // 设置自定义面板子项的勾选状态
                this.loadCustomPanelSubItemStates(configs.customPanels);
            } else {
                // 如果没有自定义面板配置，初始化为空对象
                window.InfoBarCustomPanels = {};
                console.log('[InfoBarSettings] 📊 初始化空的自定义面板配置');
            }

            // 🔧 新增：加载基础面板子项的勾选状态
            this.loadBasicPanelSubItemStates(configs);

            // 特别处理主题配置
            if (configs.theme && configs.theme.current) {
                const themeId = configs.theme.current;
                console.log('[InfoBarSettings] 🎨 加载主题配置:', themeId);

                // 更新主题卡片状态
                this.updateThemeCardStates(themeId);

                // 应用主题
                const theme = this.getThemeById(themeId);
                if (theme) {
                    this.applyTheme(theme);
                    this.updateCurrentThemeInfo(theme);
                }
            }

            // 特别处理风格配置
            if (configs.style && configs.style.current) {
                const styleId = configs.style.current;
                console.log('[InfoBarSettings] 🎭 加载风格配置:', styleId);

                // 更新风格卡片状态
                this.updateStyleCardStates(styleId);

                // 应用风格
                const style = this.getStyleById(styleId);
                if (style) {
                    this.applyStyle(style);
                    this.updateCurrentStyleInfo(style);
                }
            }

            // 更新API状态
            if (this.apiIntegration) {
                this.updateAPIStatus();
            }

            // 🔧 修复：智能处理API模型配置 - 优先使用缓存，避免不必要的API调用
            if (configs.apiConfig && configs.apiConfig.model && configs.apiConfig.provider && configs.apiConfig.apiKey) {
                console.log('[InfoBarSettings] 🔄 检测到保存的模型配置，智能加载模型列表...');
                console.log('[InfoBarSettings] 📋 保存的模型:', configs.apiConfig.model);
                console.log('[InfoBarSettings] 🏢 提供商:', configs.apiConfig.provider);

                // 延迟执行，确保UI已完全渲染
                setTimeout(async () => {
                    try {
                        // 🔧 新增：优先尝试从缓存加载模型列表
                        const cachedModels = await this.loadCachedModelList(configs.apiConfig);

                        if (cachedModels && cachedModels.length > 0) {
                            console.log('[InfoBarSettings] ✅ 使用缓存的模型列表，避免API调用');
                            this.populateModelSelect(cachedModels);

                            // 恢复保存的模型选择
                            const modelSelect = this.modal.querySelector('#api-model');
                            if (modelSelect && configs.apiConfig.model) {
                                modelSelect.value = configs.apiConfig.model;
                                console.log('[InfoBarSettings] ✅ 已恢复保存的模型选择:', configs.apiConfig.model);
                            }
                        } else {
                            console.log('[InfoBarSettings] ⚠️ 缓存中无有效模型列表，需要手动加载');
                            // 显示提示信息，不自动调用API
                            this.showModelLoadingHint();
                        }
                    } catch (error) {
                        console.error('[InfoBarSettings] ❌ 智能加载模型列表失败:', error);
                        this.showModelLoadingHint();
                    }
                }, 500);
            }

            // 刷新导航栏（加载自定义面板）
            this.refreshNavigation();

            // 更新所有面板的配置计数
            this.updateAllPanelCounts();

            // 🔧 修复：恢复提示词插入位置UI状态
            const promptPositionMode = configs.basic?.promptPosition?.mode || 'afterCharacter';
            console.log('[InfoBarSettings] 📍 恢复提示词位置UI状态:', promptPositionMode);
            this.handlePromptPositionModeChange(promptPositionMode);

            // 🧠 加载提示词设置
            await this.loadPromptSettings();

            console.log('[InfoBarSettings] ✅ 设置加载完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载设置失败:', error);
            this.handleError(error);
        }
    }

    /**
     * 递归加载嵌套配置
     */
    loadNestedConfigs(configs, prefix = '') {
        try {
            for (const [key, value] of Object.entries(configs)) {
                const fullKey = prefix ? `${prefix}.${key}` : key;

                if (value && typeof value === 'object' && !Array.isArray(value)) {
                    // 递归处理嵌套对象
                    this.loadNestedConfigs(value, fullKey);
                } else {
                    // 设置表单值
                    this.setFormValue(fullKey, value);
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载嵌套配置失败:', error);
        }
    }

    /**
     * 设置表单值
     */
    setFormValue(name, value) {
        try {
            const element = this.modal.querySelector(`[name="${name}"]`);

            if (!element) {
                return;
            }

            if (element.type === 'checkbox') {
                element.checked = Boolean(value);
                
                // 🆕 特殊处理破甲提示词开关 - 加载设置时同步显示/隐藏配置区域
                if (name === 'apiConfig.enableArmorBreaking') {
                    const armorBreakingSection = this.modal.querySelector('.armor-breaking-config-section');
                    if (armorBreakingSection) {
                        armorBreakingSection.style.display = element.checked ? 'block' : 'none';
                        console.log(`[InfoBarSettings] 🛡️ 加载设置时：破甲提示词配置区域${element.checked ? '显示' : '隐藏'}`);
                    }
                }
            } else if (element.type === 'radio') {
                // 🔧 修复：单选框特殊处理，只设置checked状态，不修改value属性
                if (element.value === value) {
                    element.checked = true;
                } else {
                    element.checked = false;
                }
            } else if (element.type === 'range') {
                element.value = value;
                const valueSpan = element.nextElementSibling;
                if (valueSpan && valueSpan.classList.contains('range-value')) {
                    valueSpan.textContent = value;
                }
            } else {
                // 特殊处理接口类型选择器
                if (name === 'apiConfig.format' && element.id === 'interface-type') {
                    // 如果是接口类型选择器，需要先触发提供商变更来生成选项
                    const providerElement = this.modal.querySelector('[name="apiConfig.provider"]');
                    if (providerElement && providerElement.value) {
                        this.handleProviderChange(providerElement.value);
                        // 延迟设置值，等待选项生成
                        setTimeout(() => {
                            element.value = value || '';
                        }, 100);
                    } else {
                        element.value = value || '';
                    }
                } else {
                    element.value = value || '';
                }
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 设置表单值失败 (${name}):`, error);
        }
    }

    /**
     * 保存设置
     */
    async saveSettings() {
        try {
            console.log('[InfoBarSettings] 💾 开始保存设置...');

            // 收集表单数据
            const formData = this.collectFormData();

            // 确保自定义面板数据包含在保存的配置中，并更新子项勾选状态
            const customPanels = this.getCustomPanels();
            if (customPanels && Object.keys(customPanels).length > 0) {
                // 更新自定义面板子项的勾选状态
                this.updateCustomPanelSubItemStates(customPanels, formData);
                formData.customPanels = customPanels;
                console.log('[InfoBarSettings] 📊 包含自定义面板数据:', Object.keys(customPanels).length, '个面板');
            }

            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 🔧 修复：完全保护基础面板属性配置，避免被基础设置页面覆盖
            // 基础面板的属性配置（description、icon、required、memoryInject、prompts等）
            // 应该只通过面板管理页面修改，不应该被基础设置页面的表单数据覆盖
            const basicPanelIds = ['personal', 'interaction', 'tasks', 'world', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];
            const preservedBasicPanelConfigs = {};

            // 完整备份所有基础面板配置
            basicPanelIds.forEach(panelId => {
                const existingConfig = extensionSettings['Information bar integration tool'][panelId];
                if (existingConfig) {
                    preservedBasicPanelConfigs[panelId] = { ...existingConfig };
                    console.log(`[InfoBarSettings] 🛡️ 保护基础面板 ${panelId} 的完整属性配置`);
                }
            });

            // 保存基础设置表单数据（不包含基础面板属性）
            Object.assign(extensionSettings['Information bar integration tool'], formData);

            // 额外收集记忆增强面板的设置（这些控件大多没有 name，需要单独处理）
            if (typeof this.collectMemoryEnhancementFormData === 'function') {
                const memoryEnhancementData = this.collectMemoryEnhancementFormData();
                if (memoryEnhancementData && typeof memoryEnhancementData === 'object') {
                    extensionSettings['Information bar integration tool'].memoryEnhancement = memoryEnhancementData;
                    console.log('[InfoBarSettings] 🧠 已收集记忆增强设置并写入配置');

                    // 🔧 修复：同步设置到各个记忆增强模块
                    await this.syncMemoryEnhancementSettingsToModules(memoryEnhancementData);
                }
            }

            // 🔧 修复：智能恢复基础面板属性配置，保留子项启用状态
            Object.keys(preservedBasicPanelConfigs).forEach(panelId => {
                const currentConfig = extensionSettings['Information bar integration tool'][panelId];
                const preservedConfig = preservedBasicPanelConfigs[panelId];

                // 合并配置：保留新的子项启用状态和面板启用状态，恢复其他属性
                if (currentConfig && preservedConfig) {
                    // 备份当前的子项启用状态和面板启用状态（来自formData）
                    const currentSubItemStates = {};
                    const currentPanelEnabled = currentConfig.enabled; // 保留面板的enabled状态

                    if (currentConfig && typeof currentConfig === 'object') {
                        Object.keys(currentConfig).forEach(key => {
                            if (key !== 'enabled' && typeof currentConfig[key] === 'object' &&
                                currentConfig[key] && typeof currentConfig[key].enabled === 'boolean') {
                                currentSubItemStates[key] = currentConfig[key];
                            }
                        });
                    }

                    // 恢复基础面板属性配置
                    extensionSettings['Information bar integration tool'][panelId] = { ...preservedConfig };

                    // 🔧 修复：重新应用面板的enabled状态
                    if (typeof currentPanelEnabled === 'boolean') {
                        extensionSettings['Information bar integration tool'][panelId].enabled = currentPanelEnabled;
                    }

                    // 重新应用子项启用状态
                    Object.keys(currentSubItemStates).forEach(subItemKey => {
                        const existingSubItem = extensionSettings['Information bar integration tool'][panelId][subItemKey];
                        if (!existingSubItem || typeof existingSubItem !== 'object' || Array.isArray(existingSubItem)) {
                            extensionSettings['Information bar integration tool'][panelId][subItemKey] = {};
                        }
                        extensionSettings['Information bar integration tool'][panelId][subItemKey].enabled = currentSubItemStates[subItemKey].enabled;
                    });

                    console.log(`[InfoBarSettings] 🔄 智能恢复基础面板 ${panelId} 的属性配置，保留面板启用状态: ${currentPanelEnabled}，保留 ${Object.keys(currentSubItemStates).length} 个子项状态`);
                } else {
                    // 如果没有当前配置，直接恢复旧配置
                    extensionSettings['Information bar integration tool'][panelId] = preservedBasicPanelConfigs[panelId];
                    console.log(`[InfoBarSettings] 🔄 完全恢复基础面板 ${panelId} 的属性配置`);
                }
            });

            // 触发 SillyTavern 保存设置
            context.saveSettingsDebounced();

            // 🔧 修复：在隐藏界面前先刷新面板内容，确保新增子项立即显示
            this.refreshAllBasicPanelContent();

            // 触发面板配置变更事件，通知数据表格更新
            if (this.eventSystem) {
                this.eventSystem.emit('panel:config:changed', {
                    timestamp: Date.now(),
                    formData: formData
                });
                console.log('[InfoBarSettings] 📋 已触发面板配置变更事件');
            }

            // 如果API配置有变化，更新API集成
            if (this.hasAPIConfigChanged(formData)) {
                await this.apiIntegration.updateConfig(formData.apiConfig || {});
            }

            // 标记需要刷新设置
            this.needsSettingsRefresh = true;

            // 立即隐藏界面
            this.hide();

            // 显示成功消息
            this.showMessage('设置保存成功', 'success');

            // 🔧 修复：只有在前端显示功能启用时才检查并重新包装AI消息
            setTimeout(() => {
                // 检查前端显示功能是否启用
                const configManager = window.SillyTavernInfobar?.modules?.configManager;
                if (configManager) {
                    const frontendConfig = configManager.getFrontendDisplayConfig();
                    if (frontendConfig && frontendConfig.enabled) {
                        console.log('[InfoBarSettings] 🔄 前端显示功能已启用，检查AI消息包装状态');
                        this.ensureAIMessagesWrapped();
                    } else {
                        console.log('[InfoBarSettings] ⏹️ 前端显示功能已禁用，跳过AI消息包装检查');
                    }
                } else {
                    console.warn('[InfoBarSettings] ⚠️ 未找到配置管理器，跳过AI消息包装检查');
                }
            }, 500);

            console.log('[InfoBarSettings] ✅ 设置保存完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存设置失败:', error);
            this.showMessage('保存设置失败: ' + error.message, 'error');
            this.handleError(error);
        }
    }

    /**
     * 收集表单数据
     */
    collectFormData() {
        const formData = {};

        // 获取所有表单元素
        const elements = this.modal.querySelectorAll('input, select, textarea');

        elements.forEach(element => {
            const name = element.name;
            if (!name) return;

            let value;
            if (element.type === 'checkbox') {
                value = element.checked;
            } else if (element.type === 'radio') {
                // 仅采集被选中的单选项，避免未选项覆盖
                if (!element.checked) return;
                value = element.value;
            } else if (element.type === 'number' || element.type === 'range') {
                value = parseFloat(element.value) || 0;
            } else {
                value = element.value;
            }

            // 处理嵌套属性
            if (name.includes('.')) {
                this.setNestedProperty(formData, name, value);
            } else {
                formData[name] = value;
            }
        });

        // 收集当前选中的主题
        const activeThemeCard = this.modal.querySelector('.theme-preview-card.active');
        if (activeThemeCard) {
            const themeId = activeThemeCard.getAttribute('data-theme');
            if (themeId) {
                formData.theme = {
                    current: themeId,
                    lastUpdated: new Date().toISOString()
                };
                console.log('[InfoBarSettings] 📊 收集到主题数据:', themeId);
            }
        }

        // 收集当前选中的风格
        const activeStyleCard = this.modal.querySelector('.style-preview-card.active');
        if (activeStyleCard) {
            const styleId = activeStyleCard.getAttribute('data-style');
            if (styleId) {
                formData.style = {
                    current: styleId,
                    lastUpdated: new Date().toISOString()
                };
                console.log('[InfoBarSettings] 📊 收集到风格数据:', styleId);
            }
        }

        // 处理基础面板配置，转换为DataTable期望的格式
        this.processBasicPanelsConfig(formData);

        console.log('[InfoBarSettings] 📊 表单数据收集完成，包含', Object.keys(formData).length, '个配置项');
        return formData;
    }

    /**
     * 🔧 新增：同步记忆增强设置到各个模块
     */
    async syncMemoryEnhancementSettingsToModules(memoryEnhancementData) {
        try {
            console.log('[InfoBarSettings] 🔄 开始同步记忆增强设置到各模块...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool || !infoBarTool.modules) {
                console.warn('[InfoBarSettings] ⚠️ InfoBar工具未找到，无法同步设置');
                return;
            }

            const modules = infoBarTool.modules;

            // 1. 同步DeepMemoryManager设置
            if (modules.deepMemoryManager && memoryEnhancementData.deep) {
                await modules.deepMemoryManager.updateSettings({
                    enabled: memoryEnhancementData.deep.enabled,
                    autoMemoryMigration: memoryEnhancementData.deep.autoMemoryMigration,
                    memoryConflictResolution: memoryEnhancementData.deep.conflictResolution,
                    sensoryMemoryCapacity: memoryEnhancementData.deep.capacities?.sensory,
                    shortTermMemoryCapacity: memoryEnhancementData.deep.capacities?.shortTerm,
                    longTermMemoryCapacity: memoryEnhancementData.deep.capacities?.longTerm,
                    deepArchiveCapacity: memoryEnhancementData.deep.capacities?.deepArchive
                });
                console.log('[InfoBarSettings] ✅ DeepMemoryManager设置已同步');
            }

            // 2. 同步VectorizedMemoryRetrieval设置
            if (modules.vectorizedMemoryRetrieval && memoryEnhancementData.vector) {
                const storageMode = memoryEnhancementData.vector.storageMode || 'local';
                await modules.vectorizedMemoryRetrieval.updateSettings({
                    enabled: memoryEnhancementData.vector.enabled,
                    vectorEngine: memoryEnhancementData.vector.vectorEngine,
                    similarityThreshold: memoryEnhancementData.vector.similarityThreshold,
                    maxResults: memoryEnhancementData.vector.maxResults,
                    useLocalStorage: storageMode === 'local',
                    useNativeVectorAPI: storageMode === 'native',
                    useCustomVectorAPI: storageMode === 'custom',
                    customVectorAPI: memoryEnhancementData.vector.customAPI || {}
                });
                console.log('[InfoBarSettings] ✅ VectorizedMemoryRetrieval设置已同步');
            }

            // 3. 同步IntelligentMemoryClassifier设置
            if (modules.intelligentMemoryClassifier && memoryEnhancementData.classifier) {
                await modules.intelligentMemoryClassifier.updateSettings({
                    enabled: memoryEnhancementData.classifier.enabled,
                    semanticClustering: memoryEnhancementData.classifier.semanticClustering,
                    temporalPatternRecognition: memoryEnhancementData.classifier.temporalPatternRecognition,
                    importancePrediction: memoryEnhancementData.classifier.importancePrediction,
                    classificationConfidenceThreshold: memoryEnhancementData.classifier.classificationConfidenceThreshold,
                    adaptiveLearning: memoryEnhancementData.classifier.adaptiveLearning
                });
                console.log('[InfoBarSettings] ✅ IntelligentMemoryClassifier设置已同步');
            }

            // 4. 同步六大核心功能模块设置
            if (memoryEnhancementData.enhancement) {
                const enhancement = memoryEnhancementData.enhancement;

                // MemoryMaintenanceSystem
                if (modules.memoryMaintenanceSystem) {
                    await modules.memoryMaintenanceSystem.updateSettings({
                        enabled: enhancement.memoryMaintenance
                    });
                    console.log('[InfoBarSettings] ✅ MemoryMaintenanceSystem设置已同步');
                }

                // ContextualRetrieval
                if (modules.contextualRetrieval) {
                    await modules.contextualRetrieval.updateSettings({
                        enabled: enhancement.contextualRetrieval
                    });
                    console.log('[InfoBarSettings] ✅ ContextualRetrieval设置已同步');
                }

                // UserProfileManager
                if (modules.userProfileManager) {
                    await modules.userProfileManager.updateSettings({
                        enabled: enhancement.userProfile
                    });
                    console.log('[InfoBarSettings] ✅ UserProfileManager设置已同步');
                }

                // KnowledgeGraphManager
                if (modules.knowledgeGraphManager) {
                    await modules.knowledgeGraphManager.updateSettings({
                        enabled: enhancement.knowledgeGraph
                    });
                    console.log('[InfoBarSettings] ✅ KnowledgeGraphManager设置已同步');
                }

                // TimeAwareMemoryManager
                if (modules.timeAwareMemoryManager) {
                    await modules.timeAwareMemoryManager.updateSettings({
                        enabled: enhancement.timeAware
                    });
                    console.log('[InfoBarSettings] ✅ TimeAwareMemoryManager设置已同步');
                }
            }

            console.log('[InfoBarSettings] ✅ 所有记忆增强模块设置同步完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 同步记忆增强设置到模块失败:', error);
        }
    }

    /**
     * 收集记忆增强面板的设置（使用元素ID）
     */
    collectMemoryEnhancementFormData() {
        try {
            const getBool = (id) => !!this.modal.querySelector(`#${id}`)?.checked;
            const getNum = (id) => {
                const el = this.modal.querySelector(`#${id}`);
                if (!el) return undefined;
                const v = el.type === 'number' ? parseInt(el.value, 10) : parseFloat(el.value);
                return isNaN(v) ? undefined : v;
            };
            const getVal = (id) => this.modal.querySelector(`#${id}`)?.value;

            // 🔧 修复：确保AI记忆总结设置与后端模块同步
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;
            const aiMemorySummarizer = summaryManager?.aiMemorySummarizer;

            // 优先使用后端模块的当前设置，确保与实际状态同步
            const aiSettings = aiMemorySummarizer?.settings || {};

            const data = {
                ai: {
                    enabled: aiSettings.enabled !== undefined ? aiSettings.enabled : getBool('memory-ai-memory-enabled'),
                    messageLevelSummary: aiSettings.messageLevelSummary !== undefined ? aiSettings.messageLevelSummary : getBool('memory-ai-message-level-summary'),
                    importanceThreshold: aiSettings.importanceThreshold !== undefined ? aiSettings.importanceThreshold : getNum('memory-ai-importance-threshold')
                },
                vector: {
                    enabled: getBool('memory-vectorized-memory-enabled'),
                    vectorEngine: getVal('memory-vector-engine'),
                    similarityThreshold: getNum('memory-similarity-threshold'),
                    maxResults: getNum('memory-max-search-results'),
                    storageMode: getVal('memory-vector-storage-mode') || 'local',
                    storageSizeLimit: getNum('memory-vector-storage-size-limit') || 10,
                    customAPI: {
                        url: getVal('memory-custom-vector-api-url') || '',
                        apiKey: getVal('memory-custom-vector-api-key') || '',
                        model: getVal('memory-custom-vector-model') || ''
                    }
                },
                deep: {
                    enabled: getBool('memory-deep-memory-enabled'),
                    autoMemoryMigration: getBool('memory-auto-memory-migration'),
                    memoryImportanceThreshold: getNum('memory-memory-importance-threshold'),
                    conflictResolution: getBool('memory-memory-conflict-resolution'),
                    capacities: {
                        sensory: getNum('memory-sensory-capacity'),
                        shortTerm: getNum('memory-short-term-capacity'),
                        longTerm: getNum('memory-long-term-capacity'),
                        deepArchive: getNum('memory-deep-archive-capacity')
                    }
                },
                classifier: {
                    enabled: getBool('memory-intelligent-classifier-enabled'),
                    semanticClustering: getBool('memory-semantic-clustering'),
                    temporalPatternRecognition: getBool('memory-temporal-pattern-recognition'),
                    importancePrediction: getBool('memory-importance-prediction'),
                    classificationConfidenceThreshold: getNum('memory-classification-confidence-threshold'),
                    adaptiveLearning: getBool('memory-adaptive-learning')
                },
                enhancement: {
                    memoryMaintenance: getBool('memory-maintenance-enabled'),
                    contextualRetrieval: getBool('contextual-retrieval-enabled'),
                    userProfile: getBool('user-profile-enabled'),
                    knowledgeGraph: getBool('knowledge-graph-enabled'),
                    timeAware: getBool('time-aware-enabled'),
                    stIntegration: getBool('st-integration-enabled')
                }
            };

            return data;
        } catch (err) {
            console.error('[InfoBarSettings] ❌ 收集记忆增强表单失败:', err);
            return undefined;
        }
    }


    /**
     * 加载自定义面板子项的勾选状态到表单
     */
    loadCustomPanelSubItemStates(customPanels) {
        try {
            // 遍历所有自定义面板
            for (const [panelId, panel] of Object.entries(customPanels)) {
                if (panel.subItems && Array.isArray(panel.subItems)) {
                    // 设置每个子项的勾选状态
                    panel.subItems.forEach(subItem => {
                        const fieldName = subItem.name || subItem.key || subItem.id;
                        const checkbox = this.modal.querySelector(`input[name="${fieldName}"]`);
                        if (checkbox && checkbox.type === 'checkbox') {
                            checkbox.checked = subItem.enabled !== false;
                            console.log(`[InfoBarSettings] 📊 设置子项勾选状态: ${fieldName} = ${checkbox.checked}`);
                        }
                    });
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载自定义面板子项状态失败:', error);
        }
    }

    /**
     * 加载基础面板子项的勾选状态到表单
     */
    loadBasicPanelSubItemStates(configs) {
        try {
            const basicPanelIds = ['personal', 'interaction', 'tasks', 'world', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];

            // 遍历所有基础面板
            basicPanelIds.forEach(panelId => {
                const panelConfig = configs[panelId];
                if (panelConfig && typeof panelConfig === 'object') {
                    console.log(`[InfoBarSettings] 📊 加载基础面板 ${panelId} 的子项状态`);

                    // 遍历面板的所有子项
                    Object.keys(panelConfig).forEach(subItemKey => {
                        if (subItemKey !== 'enabled' && typeof panelConfig[subItemKey] === 'object' &&
                            panelConfig[subItemKey] && typeof panelConfig[subItemKey].enabled === 'boolean') {

                            const fieldName = `${panelId}.${subItemKey}.enabled`;
                            const checkbox = this.modal.querySelector(`input[name="${fieldName}"]`);

                            if (checkbox && checkbox.type === 'checkbox') {
                                checkbox.checked = panelConfig[subItemKey].enabled;
                                console.log(`[InfoBarSettings] 📊 设置基础面板子项勾选状态: ${fieldName} = ${checkbox.checked}`);
                            }
                        }
                    });
                }
            });
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载基础面板子项状态失败:', error);
        }
    }

    /**
     * 更新自定义面板子项的勾选状态
     */
    updateCustomPanelSubItemStates(customPanels, formData) {
        try {
            // 遍历所有自定义面板
            for (const [panelId, panel] of Object.entries(customPanels)) {
                if (panel.subItems && Array.isArray(panel.subItems)) {
                    // 更新每个子项的enabled状态
                    panel.subItems.forEach(subItem => {
                        // 使用子项的name作为字段名查找勾选状态
                        const fieldName = subItem.name || subItem.key || subItem.id;
                        if (formData.hasOwnProperty(fieldName)) {
                            subItem.enabled = formData[fieldName];
                            console.log(`[InfoBarSettings] 📊 更新子项状态: ${fieldName} = ${subItem.enabled}`);
                        }
                    });
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新自定义面板子项状态失败:', error);
        }
    }

    /**
     * 处理基础面板配置，转换为DataTable期望的格式
     */
    processBasicPanelsConfig(formData) {
        try {
            // 初始化basicPanels对象
            if (!formData.basicPanels) {
                formData.basicPanels = {};
            }

            // 定义所有基础面板ID列表
            const basicPanelIds = ['personal', 'world', 'interaction', 'tasks', 'organization', 'news', 'inventory', 'abilities', 'plot', 'cultivation', 'fantasy', 'modern', 'historical', 'magic', 'training'];

            // 循环处理所有基础面板
            basicPanelIds.forEach(panelId => {
                if (formData[panelId]) {
                    formData.basicPanels[panelId] = {
                        enabled: formData[panelId].enabled !== false,
                        subItems: []
                    };

                    // 转换子项配置
                    Object.keys(formData[panelId]).forEach(key => {
                        if (key !== 'enabled' && typeof formData[panelId][key] === 'object' && formData[panelId][key].enabled !== undefined) {
                            formData.basicPanels[panelId].subItems.push({
                                name: this.getSubItemDisplayName(panelId, key),
                                key: key,
                                enabled: formData[panelId][key].enabled,
                                value: this.getDefaultSubItemValue(panelId, key)
                            });
                        }
                    });

                    console.log(`[InfoBarSettings] 📊 处理${panelId}面板配置:`, formData.basicPanels[panelId].subItems.length, '个子项');
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理基础面板配置失败:', error);
        }
    }

    /**
     * 获取子项显示名称
     */
    getSubItemDisplayName(panelType, key) {
        const displayNames = {
            personal: {
                name: '姓名', age: '年龄', gender: '性别', occupation: '职业',
                personality: '性格', hobbies: '爱好', height: '身高', weight: '体重',
                bloodType: '血型', birthplace: '出生地', nationality: '国籍',
                religion: '宗教信仰', politicalViews: '政治观点', values: '价值观',
                goals: '人生目标', fears: '恐惧', strengths: '优点', weaknesses: '缺点',
                mentalHealth: '心理健康', physicalHealth: '身体健康', appearance: '外貌',
                clothing: '穿着风格', accessories: '配饰', tattoos: '纹身',
                scars: '疤痕', voice: '声音', mannerisms: '习惯动作',
                familyBackground: '家庭背景', education: '教育经历', workExperience: '工作经历',
                income: '收入', socialStatus: '社会地位', relationships: '人际关系',
                loveStatus: '恋爱状态', maritalStatus: '婚姻状态', sports: '运动',
                music: '音乐', art: '艺术', reading: '阅读', gaming: '游戏',
                travel: '旅行', cooking: '烹饪', skills: '技能特长',
                languages: '语言能力', habits: '生活习惯', healthStatus: '健康状态'
            },
            world: {
                name: '世界名称', type: '世界类型', genre: '世界风格',
                description: '世界描述', geography: '地理环境', locations: '重要地点',
                time: '时间设定'
            },
            interaction: {
                name: '对象名称', type: '对象类型', status: '当前状态',
                location: '所在位置', activity: '当前活动', relationship: '关系类型',
                intimacy: '亲密度', history: '历史记录', autoRecord: '自动记录'
            },
            tasks: {
                title: '任务标题', description: '任务描述', priority: '优先级',
                status: '任务状态', deadline: '截止日期', assignee: '负责人',
                progress: '完成进度', category: '任务分类'
            },
            organization: {
                name: '组织名称', type: '组织类型', leader: '领导者',
                members: '成员数量', purpose: '组织目标', location: '总部位置',
                influence: '影响力', resources: '资源状况'
            },
            news: {
                title: '新闻标题', content: '新闻内容', source: '消息来源',
                date: '发布日期', importance: '重要程度', category: '新闻分类',
                impact: '影响范围'
            },
            inventory: {
                name: '物品名称', type: '物品类型', quantity: '数量',
                condition: '物品状态', value: '价值', location: '存放位置',
                description: '物品描述'
            },
            abilities: {
                name: '能力名称', type: '能力类型', level: '能力等级',
                description: '能力描述', cooldown: '冷却时间', cost: '消耗',
                effect: '效果描述'
            },
            plot: {
                title: '剧情标题', description: '剧情描述', stage: '当前阶段',
                characters: '相关角色', location: '发生地点', importance: '重要程度',
                outcome: '结果影响'
            },
            cultivation: {
                realm: '修炼境界', technique: '修炼功法', progress: '修炼进度',
                qi: '灵气值', foundation: '根基', breakthrough: '突破条件',
                resources: '修炼资源'
            },
            fantasy: {
                race: '种族', class: '职业', level: '等级',
                hp: '生命值', mp: '魔法值', strength: '力量',
                agility: '敏捷', intelligence: '智力', equipment: '装备'
            },
            modern: {
                job: '工作', income: '收入', education: '学历',
                skills: '技能', social: '社交圈', lifestyle: '生活方式',
                goals: '人生目标'
            },
            historical: {
                era: '历史时期', position: '社会地位', family: '家族背景',
                achievements: '成就', reputation: '声望', allies: '盟友',
                enemies: '敌人'
            },
            magic: {
                school: '魔法学派', spells: '法术列表', mana: '魔力值',
                focus: '施法焦点', components: '法术材料', familiar: '魔宠',
                research: '研究项目'
            },
            training: {
                skill: '训练技能', instructor: '指导者', progress: '训练进度',
                schedule: '训练计划', equipment: '训练器材', goals: '训练目标',
                achievements: '训练成果'
            }
        };

        return displayNames[panelType]?.[key] || key;
    }

    /**
     * 获取子项默认值
     */
    getDefaultSubItemValue(panelType, key) {
        const defaultValues = {
            personal: {
                name: '林天', age: '25', gender: '男', occupation: '软件工程师',
                personality: '开朗、友善', hobbies: '编程、阅读、音乐', height: '175cm',
                weight: '70kg', bloodType: 'O型'
            },
            world: {
                name: '现代都市', type: '现实世界', genre: '都市生活',
                description: '繁华的现代都市环境', geography: '沿海城市', locations: '市中心、商业区',
                time: '2024年现代'
            },
            interaction: {
                name: '小雅', type: '朋友', status: '在线',
                location: '咖啡厅', activity: '聊天', relationship: '好友',
                intimacy: '友好', history: '认识3年', autoRecord: '开启'
            }
        };

        return defaultValues[panelType]?.[key] || '';
    }

    /**
     * 设置嵌套属性
     */
    setNestedProperty(obj, path, value) {
        const keys = path.split('.');
        let current = obj;

        for (let i = 0; i < keys.length - 1; i++) {
            if (!current[keys[i]]) {
                current[keys[i]] = {};
            }
            current = current[keys[i]];
        }

        current[keys[keys.length - 1]] = value;
    }

    /**
     * 🆕 更新破甲提示词统计信息
     */
    updateArmorBreakingStats() {
        try {
            const textarea = this.modal.querySelector('#armor-breaking-prompt');
            const charCountSpan = this.modal.querySelector('#armor-breaking-char-count');
            const wordCountSpan = this.modal.querySelector('#armor-breaking-word-count');

            if (!textarea || !charCountSpan || !wordCountSpan) return;

            const text = textarea.value || '';
            const charCount = text.length;
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;

            charCountSpan.textContent = charCount;
            wordCountSpan.textContent = wordCount;

            // 根据字符数量设置颜色提示
            if (charCount > 1000) {
                charCountSpan.style.color = '#ff6b6b'; // 红色警告
            } else if (charCount > 500) {
                charCountSpan.style.color = '#ffa726'; // 橙色提醒
            } else {
                charCountSpan.style.color = ''; // 默认颜色
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新破甲提示词统计失败:', error);
        }
    }

    /**
     * 检查API配置是否有变化
     */
    hasAPIConfigChanged(formData) {
        return Object.keys(formData).some(key => key.startsWith('apiConfig.'));
    }

    /**
     * 测试API连接
     */
    async testAPIConnection() {
        try {
            console.log('[InfoBarSettings] 🔍 开始测试API连接...');

            // 显示测试中状态
            this.updateConnectionStatus('testing', '测试中...');

            const result = await this.apiIntegration.testConnection();

            if (result.success) {
                this.updateConnectionStatus('success', '连接成功');
                this.showMessage('API连接测试成功', 'success');
            } else {
                this.updateConnectionStatus('error', '连接失败');
                this.showMessage('API连接测试失败: ' + result.error, 'error');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 测试API连接失败:', error);
            this.updateConnectionStatus('error', '测试异常');
            this.showMessage('API连接测试异常: ' + error.message, 'error');
        }
    }

    /**
     * 加载API模型
     */
    async loadAPIModels() {
        try {
            console.log('[InfoBarSettings] 📋 开始加载API模型...');

            const models = await this.apiIntegration.loadModels();
            const modelSelect = this.modal.querySelector('[name="apiConfig.model"]');

            // 清空现有选项
            modelSelect.innerHTML = '<option value="">选择模型...</option>';

            // 添加模型选项
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = model.name;
                option.title = model.description;
                modelSelect.appendChild(option);
            });

            this.showMessage(`成功加载 ${models.length} 个模型`, 'success');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载API模型失败:', error);
            this.showMessage('加载模型失败: ' + error.message, 'error');
        }
    }

    /**
     * 更新连接状态显示
     */
    updateConnectionStatus(status, message) {
        const statusElement = this.modal.querySelector('[data-status="connection"]');
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `status-value status-${status}`;
        }
    }

    /**
     * 更新API状态
     */
    updateAPIStatus() {
        if (!this.apiIntegration) return;

        const stats = this.apiIntegration.getStats();
        const statsElement = this.modal.querySelector('[data-status="stats"]');

        if (statsElement) {
            statsElement.textContent = `${stats.success}/${stats.total} (${stats.successRate})`;
        }
    }
    /**
     * 显示顶部提示消息
     */
    showMessage(message, type = 'info') {
        try {
            // 移除已存在的提示
            const existingToast = document.querySelector('.toast-notification');
            if (existingToast) {
                existingToast.remove();
            }

            // 创建顶部提示
            const toast = document.createElement('div');
            toast.className = `toast-notification toast-${type}`;

            // 根据类型设置样式
            let bgColor = 'var(--theme-bg-secondary, #2d3748)';
            let borderColor = 'var(--theme-border-color, #4a5568)';
            let textColor = 'var(--theme-text-primary, #ffffff)';
            let icon = 'ℹ️';

            if (type === 'success') {
                bgColor = 'var(--theme-primary-color, #4299e1)';
                borderColor = 'var(--theme-primary-color, #4299e1)';
                textColor = '#ffffff';
                icon = '✅';
            } else if (type === 'error') {
                bgColor = '#f56565';
                borderColor = '#f56565';
                textColor = '#ffffff';
                icon = '❌';
            } else if (type === 'warning') {
                bgColor = '#ed8936';
                borderColor = '#ed8936';
                textColor = '#ffffff';
                icon = '⚠️';
            }

            toast.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%) translateY(-100%);
                background: ${bgColor};
                color: ${textColor};
                padding: 12px 24px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                z-index: 10000;
                display: flex;
                align-items: center;
                gap: 8px;
                font-size: 14px;
                font-weight: 500;
                min-width: 200px;
                max-width: 400px;
                transition: transform 0.3s ease;
                border: 1px solid ${borderColor};
            `;

            toast.innerHTML = `
                <span class="toast-icon">${icon}</span>
                <span class="toast-text">${message}</span>
            `;

            // 添加到页面
            document.body.appendChild(toast);

            // 触发进入动画
            setTimeout(() => {
                toast.style.transform = 'translateX(-50%) translateY(0)';
            }, 10);

            // 自动关闭
            setTimeout(() => {
                if (toast && toast.parentNode) {
                    toast.style.transform = 'translateX(-50%) translateY(-100%)';
                    setTimeout(() => {
                        if (toast && toast.parentNode) {
                            toast.remove();
                        }
                    }, 300);
                }
            }, 3000);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示消息失败:', error);
            // 降级到浏览器原生提示
            alert(message);
        }
    }

    /**
     * 初始化插件 - 恢复到刚安装的状态
     * @param {boolean} skipConfirmation - 是否跳过确认对话框（用于程序化调用）
     */
    async initializePlugin(skipConfirmation = false) {
        try {
            // 只有在非跳过确认模式下才显示确认对话框
            if (!skipConfirmation) {
                const confirmMessage = '⚠️ 危险操作确认\n\n' +
                    '此操作将：\n' +
                    '• 完全清空所有用户数据和聊天记录中的面板数据\n' +
                    '• 删除所有自定义面板和子项\n' +
                    '• 重置所有配置到默认值\n' +
                    '• 清除所有字段规则和面板规则\n' +
                    '• 清空所有缓存数据和扩展设置\n' +
                    '• 清除所有localStorage数据\n' +
                    '• 自动刷新页面重新加载插件\n\n' +
                    '插件将完全恢复到刚安装时的状态，此操作不可撤销！\n\n' +
                    '确定要继续吗？';

                if (!confirm(confirmMessage)) {
                    return;
                }

                // 二次确认
                if (!confirm('最后确认：真的要完全初始化插件吗？所有数据将被永久删除，页面将自动刷新！')) {
                    return;
                }
            }

            console.log('[InfoBarSettings] 🔄 开始完全初始化插件...');

            // === 第1步：获取必要的引用 ===
            const configManager = this.configManager || window.SillyTavernInfobar?.modules?.configManager;
            const dataCore = configManager?.dataCore || window.SillyTavernInfobar?.modules?.dataCore;
            const context = window.SillyTavern?.getContext?.();

            // === 第2步：清空数据核心的所有数据 ===
            if (dataCore) {
                console.log('[InfoBarSettings] 🗑️ 清空数据核心所有数据...');
                await dataCore.clearAllData('all');

                // 清空内存中的数据结构
                if (dataCore.cache) dataCore.cache.clear();
                if (dataCore.data) dataCore.data.clear();
                if (dataCore.recentEntries) dataCore.recentEntries.length = 0;
                if (dataCore.chatDataCache) dataCore.chatDataCache.clear();
            }

            // === 第3步：清空配置管理器所有数据 ===
            if (configManager) {
                console.log('[InfoBarSettings] 🗑️ 清空配置管理器所有数据...');
                if (configManager.configCache) configManager.configCache.clear();

                // 调用配置管理器的清空方法
                if (typeof configManager.clearAllData === 'function') {
                    await configManager.clearAllData();
                }
            }

            // === 第4步：完全清空 SillyTavern extensionSettings ===
            if (context && context.extensionSettings) {
                console.log('[InfoBarSettings] 🗑️ 清空SillyTavern扩展设置...');

                let clearedConfigs = 0;

                // 清理所有可能的扩展配置键名变体
                const configKeysToDelete = [
                    'Information bar integration tool',
                    'information_bar_integration_tool',
                    'Information Integration Tool',
                    'advanced-infobar-system',
                    'infobar',
                    'InfoBar',
                    'information-bar',
                    'sillyTavernInfobar'
                ];

                configKeysToDelete.forEach(key => {
                    if (context.extensionSettings[key]) {
                        delete context.extensionSettings[key];
                        clearedConfigs++;
                        console.log(`[InfoBarSettings] ✅ 已删除扩展配置: ${key}`);
                    }
                });

                // 扫描所有扩展配置，查找可能遗漏的信息栏相关配置
                const allExtensionKeys = Object.keys(context.extensionSettings);
                const suspiciousKeys = allExtensionKeys.filter(key =>
                    key.toLowerCase().includes('infobar') ||
                    key.toLowerCase().includes('information') ||
                    key.toLowerCase().includes('bar') ||
                    key.toLowerCase().includes('integration')
                );

                suspiciousKeys.forEach(key => {
                    if (!configKeysToDelete.includes(key)) {
                        const config = context.extensionSettings[key];
                        if (config && typeof config === 'object') {
                            // 检查配置内容是否包含信息栏相关数据
                            const configStr = JSON.stringify(config).toLowerCase();
                            if (configStr.includes('infobar') || configStr.includes('panel') || configStr.includes('field')) {
                                delete context.extensionSettings[key];
                                clearedConfigs++;
                                console.log(`[InfoBarSettings] ✅ 已删除可疑扩展配置: ${key}`);
                            }
                        }
                    }
                });

                console.log(`[InfoBarSettings] 📊 总共清理了 ${clearedConfigs} 个扩展配置`);

                // 保存清空的设置
                if (typeof context.saveSettings === 'function') {
                    await context.saveSettings();
                }
            }

            // === 第5步：清空localStorage中的所有相关数据 ===
            console.log('[InfoBarSettings] 🗑️ 清空localStorage相关数据...');
            const keysToRemove = [];

            // 增强的模式匹配列表
            const patterns = [
                'Information bar integration tool',
                'information_bar_integration_tool',
                'Information_bar_integration_tool',
                'infobar',
                'InfoBar',
                'SillyTavernInfobar',
                'information',
                'panel',
                'field',
                'integration',
                'backup_'
            ];

            // 扫描所有localStorage键
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key) {
                    const keyLower = key.toLowerCase();

                    // 检查是否匹配任何模式
                    const shouldRemove = patterns.some(pattern => {
                        const patternLower = pattern.toLowerCase();
                        return keyLower.includes(patternLower);
                    });

                    if (shouldRemove) {
                        keysToRemove.push(key);
                    }
                }
            }

            console.log(`[InfoBarSettings] 📊 找到 ${keysToRemove.length} 个要删除的localStorage键`);

            // 删除找到的所有相关键
            keysToRemove.forEach(key => {
                try {
                    const value = localStorage.getItem(key);
                    localStorage.removeItem(key);
                    console.log(`[InfoBarSettings] 🗑️ 已删除localStorage键: ${key} (值长度: ${value ? value.length : 0})`);
                } catch (e) {
                    console.warn(`[InfoBarSettings] ⚠️ 删除localStorage键失败: ${key}`, e);
                }
            });

            // === 第6步：重置全局变量和模块状态 ===
            console.log('[InfoBarSettings] 🔄 重置全局变量和模块状态...');

            let destroyedModules = 0;
            let clearedGlobals = 0;

            // 清理全局对象
            if (window.SillyTavernInfobar) {
                console.log('[InfoBarSettings] 🔍 发现 window.SillyTavernInfobar，开始深度清理...');

                // 停止所有定时器和清理模块状态
                if (window.SillyTavernInfobar.modules) {
                    const moduleNames = Object.keys(window.SillyTavernInfobar.modules);
                    console.log('[InfoBarSettings] 📊 发现模块:', moduleNames);

                    Object.entries(window.SillyTavernInfobar.modules).forEach(([name, module]) => {
                        try {
                            if (module) {
                                // 清理模块内部状态
                                if (module.eventSystem && typeof module.eventSystem.removeAllListeners === 'function') {
                                    module.eventSystem.removeAllListeners();
                                }

                                // 清理定时器
                                if (module.syncTimer) {
                                    clearInterval(module.syncTimer);
                                    module.syncTimer = null;
                                }
                                if (module.backupTimer) {
                                    clearInterval(module.backupTimer);
                                    module.backupTimer = null;
                                }

                                // 清理缓存
                                if (module.cache && typeof module.cache.clear === 'function') {
                                    module.cache.clear();
                                }

                                // 调用模块销毁方法
                                if (typeof module.destroy === 'function') {
                                    module.destroy();
                                }

                                destroyedModules++;
                                console.log(`[InfoBarSettings] ✅ 模块 ${name} 已销毁`);
                            }
                        } catch (e) {
                            console.warn(`[InfoBarSettings] ⚠️ 模块 ${name} 销毁失败:`, e);
                        }
                    });
                }

                // 清理事件系统
                if (window.SillyTavernInfobar.eventSource) {
                    try {
                        window.SillyTavernInfobar.eventSource.removeAllListeners?.();
                        delete window.SillyTavernInfobar.eventSource;
                        console.log('[InfoBarSettings] ✅ 事件系统已清理');
                    } catch (e) {
                        console.warn('[InfoBarSettings] ⚠️ 清理事件系统失败:', e);
                    }
                }

                // 完全清空全局对象
                delete window.SillyTavernInfobar;
                clearedGlobals++;
                console.log('[InfoBarSettings] ✅ window.SillyTavernInfobar 已完全删除');
            }

            // 清理其他可能的全局引用
            const globalReferencesToClear = [
                'InfoBarData',
                'informationBarTool',
                'infoBarTool',
                'InfoBarTool',
                'SillyTavernInfoBarData',
                'InfoBarIntegrationTool'
            ];

            globalReferencesToClear.forEach(refName => {
                if (window[refName]) {
                    delete window[refName];
                    clearedGlobals++;
                    console.log(`[InfoBarSettings] ✅ 已清理全局引用: window.${refName}`);
                }
            });

            console.log(`[InfoBarSettings] 📊 全局清理统计: 销毁模块 ${destroyedModules} 个，清理全局引用 ${clearedGlobals} 个`);

            // === 第7步：清理chatMetadata中的残留数据 ===
            console.log('[InfoBarSettings] 🗑️ 清理chatMetadata中的残留数据...');
            await this.clearChatMetadataInfobarData();

            // === 第8步：清理STScript变量系统数据 ===
            console.log('[InfoBarSettings] 🗑️ 清理STScript变量系统数据...');
            await this.clearSTScriptVariables();

            // === 第9步：清理事件监听器 ===
            console.log('[InfoBarSettings] 🗑️ 清理所有事件监听器...');

            // 移除DOM事件监听器
            document.removeEventListener('input', this.handleInput);
            document.removeEventListener('change', this.handleChange);
            document.removeEventListener('click', this.handleClick);

            // === 第10步：关闭设置窗口 ===
            if (this.modal) {
                this.modal.style.display = 'none';
            }

            console.log('[InfoBarSettings] ✅ 插件完全初始化完成，准备刷新页面...');

            // === 第11步：显示成功消息并自动刷新页面 ===
            const successMessage = '✅ 插件已完全初始化到刚安装的状态！\n\n页面将在3秒后自动刷新以重新加载插件...';

            // 使用原生alert确保消息显示
            alert(successMessage);

            // 延迟刷新给用户时间看到消息
            setTimeout(() => {
                console.log('[InfoBarSettings] 🔄 自动刷新页面...');
                window.location.reload();
            }, 3000);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化插件失败:', error);

            // 确保错误消息能显示
            const errorMessage = '❌ 插件初始化失败: ' + error.message + '\n\n建议手动刷新页面后重试。';
            alert(errorMessage);
        }
    }

    /**
     * 清理chatMetadata中的信息栏数据
     */
    async clearChatMetadataInfobarData() {
        try {
            console.log('[InfoBarSettings] 🗑️ 开始清理chatMetadata中的信息栏数据...');

            const context = SillyTavern?.getContext?.();
            if (!context) {
                console.warn('[InfoBarSettings] ⚠️ SillyTavern上下文不可用，跳过chatMetadata清理');
                return;
            }

            const chatMetadata = context.chat_metadata || context.chatMetadata;
            if (!chatMetadata) {
                console.warn('[InfoBarSettings] ⚠️ chatMetadata不可用，跳过清理');
                return;
            }

            let clearedCount = 0;

            // === 1. 清理特定的信息栏键 ===
            const specificInfobarKeys = [
                'information_bar_integration_tool',
                'Information_bar_integration_tool',
                'infobar_data',
                'panels',
                'panel_data',
                'field_data'
            ];

            specificInfobarKeys.forEach(key => {
                if (chatMetadata.hasOwnProperty(key)) {
                    delete chatMetadata[key];
                    clearedCount++;
                    console.log(`[InfoBarSettings] ✅ 已删除chatMetadata键: ${key}`);
                }
            });

            // === 2. 扫描并清理所有chat_*格式的数据 ===
            const allKeys = Object.keys(chatMetadata);
            const chatKeys = allKeys.filter(key =>
                key.startsWith('chat_') &&
                (key.includes('infobar') || key.includes('information') || key.includes('panel'))
            );

            chatKeys.forEach(key => {
                delete chatMetadata[key];
                clearedCount++;
                console.log(`[InfoBarSettings] ✅ 已删除chatMetadata键: ${key}`);
            });

            // === 3. 清理panels.*格式的面板数据（核心问题） ===
            const panelsKeys = allKeys.filter(key => key.startsWith('panels.'));
            console.log(`[InfoBarSettings] 🔍 发现 ${panelsKeys.length} 个panels.*键:`, panelsKeys);

            panelsKeys.forEach(key => {
                delete chatMetadata[key];
                clearedCount++;
                console.log(`[InfoBarSettings] ✅ 已删除面板数据键: ${key}`);
            });

            // === 4. 清理所有包含信息栏相关的键 ===
            const infobarRelatedKeys = allKeys.filter(key =>
                !key.startsWith('panels.') && // 排除已处理的panels.*键
                !specificInfobarKeys.includes(key) &&
                !chatKeys.includes(key) && (
                    key.toLowerCase().includes('infobar') ||
                    key.toLowerCase().includes('information') ||
                    key.toLowerCase().includes('panel') ||
                    key.toLowerCase().includes('field')
                )
            );

            infobarRelatedKeys.forEach(key => {
                const value = chatMetadata[key];
                // 检查值是否包含信息栏相关数据
                if (value && typeof value === 'object') {
                    const valueStr = JSON.stringify(value).toLowerCase();
                    if (valueStr.includes('infobar') || valueStr.includes('panel') || valueStr.includes('field')) {
                        delete chatMetadata[key];
                        clearedCount++;
                        console.log(`[InfoBarSettings] ✅ 已删除包含信息栏数据的chatMetadata键: ${key}`);
                    }
                } else {
                    // 对于非对象值，也检查键名
                    delete chatMetadata[key];
                    clearedCount++;
                    console.log(`[InfoBarSettings] ✅ 已删除信息栏相关键: ${key}`);
                }
            });

            // === 5. 保存清理后的chatMetadata ===
            if (clearedCount > 0) {
                if (typeof context.saveChatMetadata === 'function') {
                    await context.saveChatMetadata();
                    console.log('[InfoBarSettings] 💾 已保存清理后的chatMetadata');
                } else if (typeof context.saveMetadata === 'function') {
                    await context.saveMetadata();
                    console.log('[InfoBarSettings] 💾 已保存清理后的metadata');
                }
            }

            console.log(`[InfoBarSettings] ✅ chatMetadata清理完成，共清理了 ${clearedCount} 个键`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理chatMetadata失败:', error);
            // 不抛出错误，允许初始化过程继续
        }
    }

    /**
     * 清理STScript变量系统中的所有信息栏数据
     */
    async clearSTScriptVariables() {
        try {
            console.log('[InfoBarSettings] 🗑️ 开始清理STScript变量...');

            const context = SillyTavern?.getContext?.();
            if (!context || typeof context.executeSlashCommands !== 'function') {
                console.warn('[InfoBarSettings] ⚠️ STScript功能不可用，跳过变量清理');
                return;
            }

            let clearedCount = 0;

            // === 1. 清理主要的infobar嵌套结构变量 ===
            try {
                // 先检查变量是否存在
                const currentValue = context.substituteParams('{{getvar::infobar}}');
                if (currentValue && currentValue.trim() && !currentValue.includes('{{getvar::')) {
                    console.log('[InfoBarSettings] 🔍 发现主infobar变量，内容长度:', currentValue.length);

                    // 强制清理主infobar变量 - 使用空值覆盖
                    await context.executeSlashCommands('/setvar key=infobar value=""');

                    // 验证清理结果
                    const afterClear = context.substituteParams('{{getvar::infobar}}');
                    if (!afterClear || afterClear.trim() === '' || afterClear.includes('{{getvar::')) {
                        console.log('[InfoBarSettings] ✅ 主infobar变量已成功清理');
                        clearedCount++;
                    } else {
                        console.warn('[InfoBarSettings] ⚠️ 主infobar变量清理可能不完全，剩余:', afterClear.substring(0, 100));
                        // 尝试第二次清理
                        await context.executeSlashCommands('/setvar key=infobar ');
                        clearedCount++;
                    }
                } else {
                    console.log('[InfoBarSettings] ℹ️ 主infobar变量不存在或已为空');
                }
            } catch (e) {
                console.warn('[InfoBarSettings] ⚠️ 清理主infobar变量失败:', e);
            }

            // === 2. 清理规则同步控制变量 ===
            try {
                await context.executeSlashCommands('/setvar key=infobar_sync_rules ');
                clearedCount++;
                console.log('[InfoBarSettings] ✅ 已清理规则同步控制变量');
            } catch (e) {
                console.warn('[InfoBarSettings] ⚠️ 清理规则同步控制变量失败:', e);
            }

            // === 3. 清理所有面板相关的分散变量 ===
            const panelNames = [
                'personal', 'world', 'interaction', 'tasks', 'inventory', 'abilities',
                'organization', 'news', 'plot', 'cultivation', 'fantasy', 'modern',
                'historical', 'magic', 'training'
            ];

            const commonFieldNames = [
                'name', 'age', 'gender', 'appearance', 'posture', 'mood', 'location', 'room',
                'environment', 'object', 'health', 'energy', 'consciousness', 'type', 'genre',
                'description', 'status', 'priority', 'deadline', 'progress', 'category',
                'weapons', 'armor', 'items', 'storage', 'capacity', 'strength', 'agility',
                'intelligence', 'skills', 'leadership', 'influence', 'reputation', 'lastUpdated'
            ];

            // 清理面板整体变量
            for (const panelName of panelNames) {
                try {
                    await context.executeSlashCommands(`/setvar key=infobar_${panelName} `);
                    clearedCount++;
                } catch (e) {
                    // 忽略错误，继续清理
                }
            }

            // 清理面板字段变量
            for (const panelName of panelNames) {
                for (const fieldName of commonFieldNames) {
                    try {
                        await context.executeSlashCommands(`/setvar key=infobar_${panelName}_${fieldName} `);
                        clearedCount++;
                    } catch (e) {
                        // 忽略错误，继续清理
                    }
                }
            }

            // === 4. 清理总结相关变量 ===
            const summaryVars = [
                'summary_count', 'summary_latest', 'summary_latest_timestamp', 'summary_latest_type',
                'summary_all', 'summary_timeline',
                'summary_1', 'summary_1_timestamp', 'summary_1_type',
                'summary_2', 'summary_2_timestamp', 'summary_2_type',
                'summary_3', 'summary_3_timestamp', 'summary_3_type'
            ];

            for (const varName of summaryVars) {
                try {
                    await context.executeSlashCommands(`/setvar key=${varName} `);
                    clearedCount++;
                } catch (e) {
                    // 忽略错误，继续清理
                }
            }

            // === 5. 清理其他可能的插件相关变量 ===
            const otherVars = [
                'infobar_enabled', 'infobar_version', 'infobar_config', 'infobar_theme',
                'infobar_auto_sync', 'infobar_debug', 'infobar_status'
            ];

            for (const varName of otherVars) {
                try {
                    await context.executeSlashCommands(`/setvar key=${varName} `);
                    clearedCount++;
                } catch (e) {
                    // 忽略错误，继续清理
                }
            }

            console.log(`[InfoBarSettings] ✅ STScript变量清理完成，共清理了 ${clearedCount} 个变量`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理STScript变量失败:', error);
            // 不抛出错误，允许初始化过程继续
        }
    }

    /**
     * 清空面板数据 - 只清空数据，保留配置
     */
    async clearPanelData() {
        try {
            const confirmMessage = '⚠️ 确认清空面板数据\n\n' +
                '此操作将：\n' +
                '• 清空所有聊天中的面板数据\n' +
                '• 保留面板配置和规则设置\n' +
                '• 保留自定义面板和子项定义\n\n' +
                '确定要继续吗？';

            if (!confirm(confirmMessage)) {
                return;
            }

            console.log('[InfoBarSettings] 🔄 开始清空面板数据...');

            const dataCore = this.configManager?.dataCore || window.SillyTavernInfobar?.modules?.dataCore;

            if (dataCore) {
                // 只清空聊天数据，保留配置
                await dataCore.clearAllData('chat');

                console.log('[InfoBarSettings] ✅ 面板数据清空完成');
                this.showMessage('所有面板数据已清空', 'success');
            } else {
                throw new Error('无法获取数据核心');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清空面板数据失败:', error);
            this.showMessage('清空面板数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 清除所有缓存（全局与聊天范围）
     */
    async clearAllCaches() {
        try {
            if (!confirm('确定要清除所有缓存数据吗？此操作不可撤销，将删除全局与聊天范围的缓存。')) {
                return;
            }

            const configManager = this.configManager || window.SillyTavernInfobar?.modules?.configManager;
            if (configManager && configManager.dataCore) {
                // 清空全局与聊天数据
                await configManager.dataCore.clearAllData('all');
                // 重新加载配置缓存
                await configManager.loadAllConfigs?.();
            }

            this.showMessage('所有缓存已清除', 'success');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清除缓存失败:', error);
            this.showMessage('清除缓存失败: ' + error.message, 'error');
        }
    }

    // resetAllSettings方法已删除，替换为initializePlugin和clearPanelData方法

    /**
     * 导出设置
     */
    async exportSettings() {
        try {
            // 优先使用配置管理器导出
            const exportData = await this.configManager.exportConfigs();

            // 兜底增强：确保包含基础面板的自定义子项、自定义面板定义，以及前端显示配置
            try {
                const context = SillyTavern.getContext();
                const extensionSettings = context?.extensionSettings?.['Information bar integration tool'] || {};

                // 自定义面板（含子项）
                if (extensionSettings.customPanels && !exportData.configs.customPanels) {
                    exportData.configs.customPanels = extensionSettings.customPanels;
                }

                // 基础面板配置（含subItems/prompts等）
                const basicPanelIds = ['personal','world','interaction','tasks','organization','news','inventory','abilities','plot','cultivation','fantasy','modern','historical','magic','training'];
                basicPanelIds.forEach(id => {
                    if (extensionSettings[id] && !exportData.configs[id]) {
                        exportData.configs[id] = extensionSettings[id];
                    }
                });

                // 前端显示配置（如果未被收集）
                if (!exportData.configs.frontendDisplay) {
                    const fd = await this.configManager.getFrontendDisplayConfig();
                    exportData.configs.frontendDisplay = fd;
                }
            } catch (e) {
                console.warn('[InfoBarSettings] ⚠️ 导出增强合并过程中出现非致命错误:', e);
            }

            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `info-bar-settings-${Date.now()}.json`;
            a.click();

            URL.revokeObjectURL(url);

            this.showMessage('设置导出成功', 'success');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导出设置失败:', error);
            this.showMessage('导出设置失败: ' + error.message, 'error');
        }
    }

    /**
     * 导出自定义配置
     */
    async exportCustomSettings() {
        try {
            console.log('[InfoBarSettings] 📤 开始导出自定义配置...');

            // 获取用户选择的导出选项
            const exportOptions = this.getExportOptions();
            console.log('[InfoBarSettings] 📋 导出选项:', exportOptions);

            if (!exportOptions.hasAnySelection) {
                this.showMessage('请至少选择一个导出选项', 'warning');
                return;
            }

            // 构建导出数据
            const exportData = {
                metadata: {
                    version: '1.0.0',
                    exportTime: new Date().toISOString(),
                    exportOptions: exportOptions
                },
                configs: {}
            };

            // 导出面板配置
            if (exportOptions.panelConfigs) {
                console.log('[InfoBarSettings] 📊 导出面板配置...');
                await this.addPanelConfigsToExport(exportData);
            }

            // 导出面板规则
            if (exportOptions.panelRules) {
                console.log('[InfoBarSettings] 📋 导出面板规则...');
                await this.addPanelRulesToExport(exportData);
            }

            // 导出字段规则
            if (exportOptions.fieldRules) {
                console.log('[InfoBarSettings] 🔧 导出字段规则...');
                await this.addFieldRulesToExport(exportData);
            }

            // 导出主题设置
            if (exportOptions.themeSettings) {
                console.log('[InfoBarSettings] 🎨 导出主题设置...');
                await this.addThemeSettingsToExport(exportData);
            }

            // 导出API设置
            if (exportOptions.apiSettings) {
                console.log('[InfoBarSettings] 🔌 导出API设置...');
                await this.addApiSettingsToExport(exportData);
            }

            // 导出所有设置
            if (exportOptions.allSettings) {
                console.log('[InfoBarSettings] 🌐 导出所有设置...');
                await this.addAllSettingsToExport(exportData);
            }

            // 生成文件名
            const selectedTypes = [];
            if (exportOptions.panelConfigs) selectedTypes.push('panels');
            if (exportOptions.panelRules) selectedTypes.push('panel-rules');
            if (exportOptions.fieldRules) selectedTypes.push('field-rules');
            if (exportOptions.themeSettings) selectedTypes.push('theme');
            if (exportOptions.apiSettings) selectedTypes.push('api');
            if (exportOptions.allSettings) selectedTypes.push('all');

            const fileName = `info-bar-${selectedTypes.join('-')}-${Date.now()}.json`;

            // 创建并下载文件
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            a.click();

            URL.revokeObjectURL(url);

            this.showMessage(`配置导出成功: ${fileName}`, 'success');
            console.log('[InfoBarSettings] ✅ 自定义配置导出完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导出自定义配置失败:', error);
            this.showMessage('导出配置失败: ' + error.message, 'error');
        }
    }

    /**
     * 导入设置
     */
    async importSettings() {
        try {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';

            input.onchange = async (e) => {
                const file = e.target.files[0];
                if (!file) return;

                try {
                    const text = await file.text();
                    const importData = JSON.parse(text);

                    await this.configManager.importConfigs(importData);
                    await this.loadSettings();

                    this.showMessage('设置导入成功', 'success');

                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 导入设置失败:', error);
                    this.showMessage('导入设置失败: ' + error.message, 'error');
                }
            };

            input.click();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导入设置失败:', error);
            this.showMessage('导入设置失败: ' + error.message, 'error');
        }
    }

    /**
     * 处理表单变更
     */
    handleFormChange(e) {
        try {
            // 调试设置变更：根据日志级别动态设置控制台过滤
            if (e.target.name === 'debug.enabled' || e.target.name === 'debug.logLevel') {
                const enabled = this.modal.querySelector('[name="debug.enabled"]')?.checked;
                const level = this.modal.querySelector('[name="debug.logLevel"]').value || 'info';
                this.applyConsoleLogLevel(enabled ? level : 'none');
            }
            // 主题切换特殊处理
            if (e.target.name === 'theme.current') {
                const customGroup = this.modal.querySelector('.custom-theme-group');
                if (customGroup) {
                    customGroup.style.display = e.target.value === 'custom' ? 'block' : 'none';
                }
            }

            // 实时预览主题变化
            if (e.target.name && e.target.name.startsWith('theme.custom.')) {
                this.updateThemePreview();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理表单变更失败:', error);
        }
    }

    /**
     * 更新主题预览
     */
    updateThemePreview() {
        try {
            const previewBox = this.modal.querySelector('.preview-box');
            if (!previewBox) return;

            const customColors = {
                primary: this.modal.querySelector('[name="theme.custom.primary"]')?.value,
                background: this.modal.querySelector('[name="theme.custom.background"]')?.value,
                text: this.modal.querySelector('[name="theme.custom.text"]')?.value,
                border: this.modal.querySelector('[name="theme.custom.border"]')?.value
            };

            // 应用预览样式
            previewBox.style.backgroundColor = customColors.background;
            previewBox.style.color = customColors.text;
            previewBox.style.borderColor = customColors.border;

            const previewButton = previewBox.querySelector('.preview-button');
            if (previewButton) {
                previewButton.style.backgroundColor = customColors.primary;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新主题预览失败:', error);
        }
    }

    /**
     * 创建个人信息面板
     */
    createPersonalPanel() {
        return `
            <div class="content-header">
                <h3>个人信息配置</h3>
            </div>

            <div class="content-body">
                <!-- 个人信息卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">👤</div>
                            <div class="card-text">
                                <div class="card-title">个人信息</div>
                                <div class="card-subtitle">角色自身的基础信息</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="personal-info-toggle" name="personal.enabled" checked />
                                <label for="personal-info-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count" id="personal-panel-count">0/0 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础信息 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="name-checkbox" name="personal.name.enabled" checked />
                                <label for="name-checkbox" class="checkbox-label">姓名</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="age-checkbox" name="personal.age.enabled" checked />
                                <label for="age-checkbox" class="checkbox-label">年龄</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="gender-checkbox" name="personal.gender.enabled" checked />
                                <label for="gender-checkbox" class="checkbox-label">性别</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="occupation-checkbox" name="personal.occupation.enabled" checked />
                                <label for="occupation-checkbox" class="checkbox-label">职业</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="height-checkbox" name="personal.height.enabled" />
                                <label for="height-checkbox" class="checkbox-label">身高</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="weight-checkbox" name="personal.weight.enabled" />
                                <label for="weight-checkbox" class="checkbox-label">体重</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="blood-type-checkbox" name="personal.bloodType.enabled" />
                                <label for="blood-type-checkbox" class="checkbox-label">血型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="zodiac-checkbox" name="personal.zodiac.enabled" />
                                <label for="zodiac-checkbox" class="checkbox-label">星座</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="birthday-checkbox" name="personal.birthday.enabled" />
                                <label for="birthday-checkbox" class="checkbox-label">生日</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="birthplace-checkbox" name="personal.birthplace.enabled" />
                                <label for="birthplace-checkbox" class="checkbox-label">出生地</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="nationality-checkbox" name="personal.nationality.enabled" />
                                <label for="nationality-checkbox" class="checkbox-label">国籍</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="ethnicity-checkbox" name="personal.ethnicity.enabled" />
                                <label for="ethnicity-checkbox" class="checkbox-label">民族</label>
                            </div>
                        </div>
                    </div>

                    <!-- 外观特征 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="hair-color-checkbox" name="personal.hairColor.enabled" />
                                <label for="hair-color-checkbox" class="checkbox-label">发色</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="hair-style-checkbox" name="personal.hairStyle.enabled" />
                                <label for="hair-style-checkbox" class="checkbox-label">发型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="eye-color-checkbox" name="personal.eyeColor.enabled" />
                                <label for="eye-color-checkbox" class="checkbox-label">眼色</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="skin-color-checkbox" name="personal.skinColor.enabled" />
                                <label for="skin-color-checkbox" class="checkbox-label">肤色</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="body-type-checkbox" name="personal.bodyType.enabled" />
                                <label for="body-type-checkbox" class="checkbox-label">体型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="facial-features-checkbox" name="personal.facialFeatures.enabled" />
                                <label for="facial-features-checkbox" class="checkbox-label">面部特征</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="scars-checkbox" name="personal.scars.enabled" />
                                <label for="scars-checkbox" class="checkbox-label">疤痕</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tattoos-checkbox" name="personal.tattoos.enabled" />
                                <label for="tattoos-checkbox" class="checkbox-label">纹身</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="accessories-checkbox" name="personal.accessories.enabled" />
                                <label for="accessories-checkbox" class="checkbox-label">饰品</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="clothing-style-checkbox" name="personal.clothingStyle.enabled" />
                                <label for="clothing-style-checkbox" class="checkbox-label">服装风格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="appearance-checkbox" name="personal.appearance.enabled" checked />
                                <label for="appearance-checkbox" class="checkbox-label">外观描述</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="voice-checkbox" name="personal.voice.enabled" />
                                <label for="voice-checkbox" class="checkbox-label">声音特征</label>
                            </div>
                        </div>
                    </div>

                    <!-- 性格特质 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="personality-checkbox" name="personal.personality.enabled" checked />
                                <label for="personality-checkbox" class="checkbox-label">性格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="temperament-checkbox" name="personal.temperament.enabled" />
                                <label for="temperament-checkbox" class="checkbox-label">气质</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="attitude-checkbox" name="personal.attitude.enabled" />
                                <label for="attitude-checkbox" class="checkbox-label">态度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="values-checkbox" name="personal.values.enabled" />
                                <label for="values-checkbox" class="checkbox-label">价值观</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="beliefs-checkbox" name="personal.beliefs.enabled" />
                                <label for="beliefs-checkbox" class="checkbox-label">信仰</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fears-checkbox" name="personal.fears.enabled" />
                                <label for="fears-checkbox" class="checkbox-label">恐惧</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="dreams-checkbox" name="personal.dreams.enabled" />
                                <label for="dreams-checkbox" class="checkbox-label">梦想</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="goals-checkbox" name="personal.goals.enabled" />
                                <label for="goals-checkbox" class="checkbox-label">目标</label>
                            </div>
                        </div>
                    </div>

                    <!-- 能力属性 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="intelligence-checkbox" name="personal.intelligence.enabled" />
                                <label for="intelligence-checkbox" class="checkbox-label">智力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="strength-checkbox" name="personal.strength.enabled" />
                                <label for="strength-checkbox" class="checkbox-label">体力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="charisma-checkbox" name="personal.charisma.enabled" />
                                <label for="charisma-checkbox" class="checkbox-label">魅力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="luck-checkbox" name="personal.luck.enabled" />
                                <label for="luck-checkbox" class="checkbox-label">运气</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="perception-checkbox" name="personal.perception.enabled" />
                                <label for="perception-checkbox" class="checkbox-label">感知</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="willpower-checkbox" name="personal.willpower.enabled" />
                                <label for="willpower-checkbox" class="checkbox-label">意志力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="reaction-speed-checkbox" name="personal.reactionSpeed.enabled" />
                                <label for="reaction-speed-checkbox" class="checkbox-label">反应速度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="learning-ability-checkbox" name="personal.learningAbility.enabled" />
                                <label for="learning-ability-checkbox" class="checkbox-label">学习能力</label>
                            </div>
                        </div>
                    </div>

                    <!-- 社会关系 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="family-background-checkbox" name="personal.familyBackground.enabled" />
                                <label for="family-background-checkbox" class="checkbox-label">家庭背景</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="education-checkbox" name="personal.education.enabled" />
                                <label for="education-checkbox" class="checkbox-label">教育经历</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="work-experience-checkbox" name="personal.workExperience.enabled" />
                                <label for="work-experience-checkbox" class="checkbox-label">工作经历</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="income-checkbox" name="personal.income.enabled" />
                                <label for="income-checkbox" class="checkbox-label">收入</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="social-status-checkbox" name="personal.socialStatus.enabled" />
                                <label for="social-status-checkbox" class="checkbox-label">社会地位</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="relationships-checkbox" name="personal.relationships.enabled" />
                                <label for="relationships-checkbox" class="checkbox-label">人际关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="love-status-checkbox" name="personal.loveStatus.enabled" />
                                <label for="love-status-checkbox" class="checkbox-label">恋爱状态</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="marital-status-checkbox" name="personal.maritalStatus.enabled" />
                                <label for="marital-status-checkbox" class="checkbox-label">婚姻状态</label>
                            </div>
                        </div>
                    </div>
                    <!-- 兴趣爱好 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="hobbies-checkbox" name="personal.hobbies.enabled" />
                                <label for="hobbies-checkbox" class="checkbox-label">兴趣爱好</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="sports-checkbox" name="personal.sports.enabled" />
                                <label for="sports-checkbox" class="checkbox-label">运动</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="music-checkbox" name="personal.music.enabled" />
                                <label for="music-checkbox" class="checkbox-label">音乐</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="art-checkbox" name="personal.art.enabled" />
                                <label for="art-checkbox" class="checkbox-label">艺术</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="reading-checkbox" name="personal.reading.enabled" />
                                <label for="reading-checkbox" class="checkbox-label">阅读</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="gaming-checkbox" name="personal.gaming.enabled" />
                                <label for="gaming-checkbox" class="checkbox-label">游戏</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="travel-checkbox" name="personal.travel.enabled" />
                                <label for="travel-checkbox" class="checkbox-label">旅行</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cooking-checkbox" name="personal.cooking.enabled" />
                                <label for="cooking-checkbox" class="checkbox-label">烹饪</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="skills-checkbox" name="personal.skills.enabled" />
                                <label for="skills-checkbox" class="checkbox-label">技能特长</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="languages-checkbox" name="personal.languages.enabled" />
                                <label for="languages-checkbox" class="checkbox-label">语言能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="habits-checkbox" name="personal.habits.enabled" />
                                <label for="habits-checkbox" class="checkbox-label">生活习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="health-status-checkbox" name="personal.healthStatus.enabled" />
                                <label for="health-status-checkbox" class="checkbox-label">健康状态</label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 操作按钮区域 -->
                <div class="action-buttons">
                    <button class="btn-action btn-all">全选</button>
                    <button class="btn-action btn-none">全不选</button>
                    <button class="btn-action btn-basic">基础信息</button>
                </div>
            </div>
        `;
    }

    /**
     * 创建交互对象面板
     */
    createInteractionPanel() {
        return `
            <div class="content-header">
                <h3>交互对象配置</h3>
            </div>

            <div class="content-body">
                <!-- 交互对象卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">👥</div>
                            <div class="card-text">
                                <div class="card-title">交互对象</div>
                                <div class="card-subtitle">角色交互和关系管理</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="interaction-toggle" name="interaction.enabled" checked />
                                <label for="interaction-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count" id="interaction-panel-count">0/0 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础信息 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-name-checkbox" name="interaction.name.enabled" checked />
                                <label for="interaction-name-checkbox" class="checkbox-label">对象名称</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-type-checkbox" name="interaction.type.enabled" checked />
                                <label for="interaction-type-checkbox" class="checkbox-label">对象类型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-status-checkbox" name="interaction.status.enabled" checked />
                                <label for="interaction-status-checkbox" class="checkbox-label">在线状态</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-location-checkbox" name="interaction.location.enabled" />
                                <label for="interaction-location-checkbox" class="checkbox-label">所在位置</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-mood-checkbox" name="interaction.mood.enabled" />
                                <label for="interaction-mood-checkbox" class="checkbox-label">情绪状态</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-activity-checkbox" name="interaction.activity.enabled" />
                                <label for="interaction-activity-checkbox" class="checkbox-label">当前活动</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-availability-checkbox" name="interaction.availability.enabled" />
                                <label for="interaction-availability-checkbox" class="checkbox-label">可用性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-priority-checkbox" name="interaction.priority.enabled" />
                                <label for="interaction-priority-checkbox" class="checkbox-label">优先级</label>
                            </div>
                        </div>
                    </div>

                    <!-- 关系信息 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-relationship-checkbox" name="interaction.relationship.enabled" checked />
                                <label for="interaction-relationship-checkbox" class="checkbox-label">关系类型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-intimacy-checkbox" name="interaction.intimacy.enabled" checked />
                                <label for="interaction-intimacy-checkbox" class="checkbox-label">亲密度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-trust-checkbox" name="interaction.trust.enabled" />
                                <label for="interaction-trust-checkbox" class="checkbox-label">信任度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-friendship-checkbox" name="interaction.friendship.enabled" />
                                <label for="interaction-friendship-checkbox" class="checkbox-label">友好度</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-romance-checkbox" name="interaction.romance.enabled" />
                                <label for="interaction-romance-checkbox" class="checkbox-label">浪漫度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-respect-checkbox" name="interaction.respect.enabled" />
                                <label for="interaction-respect-checkbox" class="checkbox-label">尊重度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-dependency-checkbox" name="interaction.dependency.enabled" />
                                <label for="interaction-dependency-checkbox" class="checkbox-label">依赖度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-conflict-checkbox" name="interaction.conflict.enabled" />
                                <label for="interaction-conflict-checkbox" class="checkbox-label">冲突度</label>
                            </div>
                        </div>
                    </div>

                    <!-- 交互历史 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-history-checkbox" name="interaction.history.enabled" checked />
                                <label for="interaction-history-checkbox" class="checkbox-label">交互历史</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-frequency-checkbox" name="interaction.frequency.enabled" />
                                <label for="interaction-frequency-checkbox" class="checkbox-label">交互频率</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-duration-checkbox" name="interaction.duration.enabled" />
                                <label for="interaction-duration-checkbox" class="checkbox-label">交互时长</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-quality-checkbox" name="interaction.quality.enabled" />
                                <label for="interaction-quality-checkbox" class="checkbox-label">交互质量</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-topics-checkbox" name="interaction.topics.enabled" />
                                <label for="interaction-topics-checkbox" class="checkbox-label">话题记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-emotions-checkbox" name="interaction.emotions.enabled" />
                                <label for="interaction-emotions-checkbox" class="checkbox-label">情感变化</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-milestones-checkbox" name="interaction.milestones.enabled" />
                                <label for="interaction-milestones-checkbox" class="checkbox-label">重要节点</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-memories-checkbox" name="interaction.memories.enabled" />
                                <label for="interaction-memories-checkbox" class="checkbox-label">共同回忆</label>
                            </div>
                        </div>
                    </div>

                    <!-- 交互设置 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-auto-record-checkbox" name="interaction.autoRecord.enabled" checked />
                                <label for="interaction-auto-record-checkbox" class="checkbox-label">自动记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-notifications-checkbox" name="interaction.notifications.enabled" />
                                <label for="interaction-notifications-checkbox" class="checkbox-label">交互通知</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-analysis-checkbox" name="interaction.analysis.enabled" />
                                <label for="interaction-analysis-checkbox" class="checkbox-label">行为分析</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-suggestions-checkbox" name="interaction.suggestions.enabled" />
                                <label for="interaction-suggestions-checkbox" class="checkbox-label">建议提示</label>
                            </div>
                        </div>
                    </div>

                    <!-- 社交网络 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-network-checkbox" name="interaction.network.enabled" />
                                <label for="interaction-network-checkbox" class="checkbox-label">社交网络</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-groups-checkbox" name="interaction.groups.enabled" />
                                <label for="interaction-groups-checkbox" class="checkbox-label">群组关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-influence-checkbox" name="interaction.influence.enabled" />
                                <label for="interaction-influence-checkbox" class="checkbox-label">影响力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-reputation-checkbox" name="interaction.reputation.enabled" />
                                <label for="interaction-reputation-checkbox" class="checkbox-label">声誉</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-alliances-checkbox" name="interaction.alliances.enabled" />
                                <label for="interaction-alliances-checkbox" class="checkbox-label">联盟关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-rivalries-checkbox" name="interaction.rivalries.enabled" />
                                <label for="interaction-rivalries-checkbox" class="checkbox-label">竞争关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-mentorship-checkbox" name="interaction.mentorship.enabled" />
                                <label for="interaction-mentorship-checkbox" class="checkbox-label">师徒关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-hierarchy-checkbox" name="interaction.hierarchy.enabled" />
                                <label for="interaction-hierarchy-checkbox" class="checkbox-label">等级关系</label>
                            </div>
                        </div>
                    </div>

                    <!-- 交互偏好 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-communication-style-checkbox" name="interaction.communicationStyle.enabled" />
                                <label for="interaction-communication-style-checkbox" class="checkbox-label">沟通风格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-preferred-topics-checkbox" name="interaction.preferredTopics.enabled" />
                                <label for="interaction-preferred-topics-checkbox" class="checkbox-label">偏好话题</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-avoided-topics-checkbox" name="interaction.avoidedTopics.enabled" />
                                <label for="interaction-avoided-topics-checkbox" class="checkbox-label">避免话题</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-boundaries-checkbox" name="interaction.boundaries.enabled" />
                                <label for="interaction-boundaries-checkbox" class="checkbox-label">交互边界</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-comfort-level-checkbox" name="interaction.comfortLevel.enabled" />
                                <label for="interaction-comfort-level-checkbox" class="checkbox-label">舒适度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-energy-level-checkbox" name="interaction.energyLevel.enabled" />
                                <label for="interaction-energy-level-checkbox" class="checkbox-label">活跃度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-response-time-checkbox" name="interaction.responseTime.enabled" />
                                <label for="interaction-response-time-checkbox" class="checkbox-label">响应时间</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-engagement-checkbox" name="interaction.engagement.enabled" />
                                <label for="interaction-engagement-checkbox" class="checkbox-label">参与度</label>
                            </div>
                        </div>
                    </div>

                    <!-- 特殊状态 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-special-events-checkbox" name="interaction.specialEvents.enabled" />
                                <label for="interaction-special-events-checkbox" class="checkbox-label">特殊事件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-achievements-checkbox" name="interaction.achievements.enabled" />
                                <label for="interaction-achievements-checkbox" class="checkbox-label">成就记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-challenges-checkbox" name="interaction.challenges.enabled" />
                                <label for="interaction-challenges-checkbox" class="checkbox-label">挑战记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="interaction-growth-checkbox" name="interaction.growth.enabled" />
                                <label for="interaction-growth-checkbox" class="checkbox-label">成长轨迹</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 创建NPC管理面板
     */
    createNPCManagementPanel() {
        return `
            <div class="content-header">
                <h3>NPC数据库管理</h3>
                <p class="content-description">管理当前聊天中的NPC数据，支持数据同步和世界书集成</p>
            </div>

            <div class="settings-group">
                <h4>1. 启用NPC数据库管理</h4>
                <div class="form-group">
                    <div class="checkbox-wrapper">
                        <input type="checkbox" id="npc-auto-sync-enabled" ${this.getNPCAutoSyncEnabled() ? 'checked' : ''}>
                        <label for="npc-auto-sync-enabled" class="checkbox-label">自动同步NPC数据</label>
                    </div>
                    <small>当检测到交互对象面板数据更新时，自动同步到NPC数据库</small>
                </div>
            </div>

            <div class="settings-group">
                <h4>2. NPC数据获取面板</h4>
                <div class="form-group">
                    <label>选择NPC数据来源面板</label>
                    <select id="npc-source-panel-select" class="setting-select" style="width: 100%; padding: 8px; border-radius: 4px;">
                        <option value="interaction">交互对象面板（默认）</option>
                        <!-- 动态面板选项将在初始化时添加 -->
                    </select>
                    <small>选择从哪个面板获取NPC数据。默认从交互对象面板获取，也可以选择自定义面板</small>
                </div>
            </div>

            <div class="settings-group">
                <h4>3. 世界书同步</h4>
                <div class="form-group">
                    <div class="checkbox-wrapper">
                        <input type="checkbox" id="npc-worldbook-sync-enabled" ${this.getNPCWorldBookSyncEnabled() ? 'checked' : ''}>
                        <label for="npc-worldbook-sync-enabled" class="checkbox-label">启用世界书同步</label>
                    </div>
                    <small>自动将NPC数据同步到世界书中，便于AI记忆和引用</small>
                </div>
                
                <div class="form-group">
                    <label>NPC数据世界书</label>
                    <select id="npc-target-worldbook-select" class="setting-select" style="width: 100%; padding: 8px; border-radius: 4px;">
                        <option value="auto">角色链接的主要世界书（默认）</option>
                        <!-- 动态世界书选项将在初始化时添加 -->
                    </select>
                    <small>选择同步NPC数据的目标世界书。默认使用角色链接的主要世界书</small>
                </div>
            </div>

            <div class="settings-group">
                <h4>4. 手动操作</h4>
                <div class="form-group">
                    <div class="button-group">
                        <button type="button" id="npc-sync-now-btn" class="btn btn-sm btn-outline-primary">
                            🔄 立即同步NPC数据
                        </button>
                        <button type="button" id="npc-worldbook-sync-now-btn" class="btn btn-sm btn-outline-secondary">
                            🌍 同步到世界书
                        </button>
                    </div>
                    <small>手动执行数据同步操作</small>
                </div>
            </div>

            <div class="settings-group">
                <h4>5. NPC列表</h4>
                <div class="npc-list-container">
                    <div class="npc-search-bar">
                        <input type="text" id="npc-search-input" placeholder="搜索NPC..." class="form-control">
                        <button type="button" id="npc-refresh-btn" class="btn btn-outline-primary">🔄 刷新</button>
                    </div>
                    <div id="npc-cards-container" class="npc-cards-grid">
                        <!-- NPC卡片将在这里动态生成 -->
                        <div class="npc-loading">正在加载NPC数据...</div>
                    </div>
                </div>
            </div>

            <!-- NPC详情模态框 -->
            <div id="npc-detail-modal" class="npc-detail-modal" style="display: none;">
                <div class="npc-detail-content">
                    <div class="npc-detail-header">
                        <h3 id="npc-detail-name">NPC详情</h3>
                        <button class="npc-detail-close">&times;</button>
                    </div>
                    <div class="npc-detail-body">
                        <div id="npc-detail-info">
                            <!-- NPC详细信息将在这里显示 -->
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 获取NPC自动同步启用状态
     */
    getNPCAutoSyncEnabled() {
        try {
            const saved = localStorage.getItem('npcPanel_autoSync');
            return saved === 'true';
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取NPC自动同步状态失败:', error);
            return false;
        }
    }

    /**
     * 获取NPC世界书同步启用状态
     */
    getNPCWorldBookSyncEnabled() {
        try {
            const saved = localStorage.getItem('npcPanel_worldBookSync');
            return saved === 'true';
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取NPC世界书同步状态失败:', error);
            return false;
        }
    }

    /**
     * 创建任务系统面板
     */
    createTasksPanel() {
        return `
            <div class="content-header">
                <h3>任务系统配置</h3>
            </div>

            <div class="content-body">
                <!-- 任务系统卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">📋</div>
                            <div class="card-text">
                                <div class="card-title">任务系统</div>
                                <div class="card-subtitle">任务管理和进度跟踪</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="tasks-toggle" name="tasks.enabled" checked />
                                <label for="tasks-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">15/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 任务基础 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-creation-checkbox" name="tasks.creation.enabled" checked />
                                <label for="tasks-creation-checkbox" class="checkbox-label">任务创建</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-editing-checkbox" name="tasks.editing.enabled" checked />
                                <label for="tasks-editing-checkbox" class="checkbox-label">任务编辑</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-deletion-checkbox" name="tasks.deletion.enabled" checked />
                                <label for="tasks-deletion-checkbox" class="checkbox-label">任务删除</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-completion-checkbox" name="tasks.completion.enabled" checked />
                                <label for="tasks-completion-checkbox" class="checkbox-label">任务完成</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-priority-checkbox" name="tasks.priority.enabled" />
                                <label for="tasks-priority-checkbox" class="checkbox-label">优先级设置</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-deadline-checkbox" name="tasks.deadline.enabled" />
                                <label for="tasks-deadline-checkbox" class="checkbox-label">截止时间</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-progress-checkbox" name="tasks.progress.enabled" />
                                <label for="tasks-progress-checkbox" class="checkbox-label">进度跟踪</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-status-checkbox" name="tasks.status.enabled" />
                                <label for="tasks-status-checkbox" class="checkbox-label">状态管理</label>
                            </div>
                        </div>
                    </div>

                    <!-- 任务分类 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-categories-checkbox" name="tasks.categories.enabled" />
                                <label for="tasks-categories-checkbox" class="checkbox-label">任务分类</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-tags-checkbox" name="tasks.tags.enabled" />
                                <label for="tasks-tags-checkbox" class="checkbox-label">标签系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-projects-checkbox" name="tasks.projects.enabled" />
                                <label for="tasks-projects-checkbox" class="checkbox-label">项目分组</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-milestones-checkbox" name="tasks.milestones.enabled" />
                                <label for="tasks-milestones-checkbox" class="checkbox-label">里程碑</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-subtasks-checkbox" name="tasks.subtasks.enabled" />
                                <label for="tasks-subtasks-checkbox" class="checkbox-label">子任务</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-dependencies-checkbox" name="tasks.dependencies.enabled" />
                                <label for="tasks-dependencies-checkbox" class="checkbox-label">任务依赖</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-templates-checkbox" name="tasks.templates.enabled" />
                                <label for="tasks-templates-checkbox" class="checkbox-label">任务模板</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-recurring-checkbox" name="tasks.recurring.enabled" />
                                <label for="tasks-recurring-checkbox" class="checkbox-label">重复任务</label>
                            </div>
                        </div>
                    </div>

                    <!-- 通知提醒 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-notifications-checkbox" name="tasks.notifications.enabled" checked />
                                <label for="tasks-notifications-checkbox" class="checkbox-label">任务通知</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-reminders-checkbox" name="tasks.reminders.enabled" />
                                <label for="tasks-reminders-checkbox" class="checkbox-label">提醒设置</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-alerts-checkbox" name="tasks.alerts.enabled" />
                                <label for="tasks-alerts-checkbox" class="checkbox-label">逾期警告</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-daily-summary-checkbox" name="tasks.dailySummary.enabled" />
                                <label for="tasks-daily-summary-checkbox" class="checkbox-label">每日总结</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-weekly-review-checkbox" name="tasks.weeklyReview.enabled" />
                                <label for="tasks-weekly-review-checkbox" class="checkbox-label">周度回顾</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-achievement-badges-checkbox" name="tasks.achievementBadges.enabled" />
                                <label for="tasks-achievement-badges-checkbox" class="checkbox-label">成就徽章</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-productivity-stats-checkbox" name="tasks.productivityStats.enabled" />
                                <label for="tasks-productivity-stats-checkbox" class="checkbox-label">效率统计</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-time-tracking-checkbox" name="tasks.timeTracking.enabled" />
                                <label for="tasks-time-tracking-checkbox" class="checkbox-label">时间跟踪</label>
                            </div>
                        </div>
                    </div>

                    <!-- 协作功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-assignment-checkbox" name="tasks.assignment.enabled" />
                                <label for="tasks-assignment-checkbox" class="checkbox-label">任务分配</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-collaboration-checkbox" name="tasks.collaboration.enabled" />
                                <label for="tasks-collaboration-checkbox" class="checkbox-label">协作功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-comments-checkbox" name="tasks.comments.enabled" />
                                <label for="tasks-comments-checkbox" class="checkbox-label">任务评论</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-attachments-checkbox" name="tasks.attachments.enabled" />
                                <label for="tasks-attachments-checkbox" class="checkbox-label">文件附件</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-sharing-checkbox" name="tasks.sharing.enabled" />
                                <label for="tasks-sharing-checkbox" class="checkbox-label">任务分享</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-permissions-checkbox" name="tasks.permissions.enabled" />
                                <label for="tasks-permissions-checkbox" class="checkbox-label">权限管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-approval-checkbox" name="tasks.approval.enabled" />
                                <label for="tasks-approval-checkbox" class="checkbox-label">审批流程</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-delegation-checkbox" name="tasks.delegation.enabled" />
                                <label for="tasks-delegation-checkbox" class="checkbox-label">任务委派</label>
                            </div>
                        </div>
                    </div>

                    <!-- 视图和排序 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-list-view-checkbox" name="tasks.listView.enabled" checked />
                                <label for="tasks-list-view-checkbox" class="checkbox-label">列表视图</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-kanban-view-checkbox" name="tasks.kanbanView.enabled" />
                                <label for="tasks-kanban-view-checkbox" class="checkbox-label">看板视图</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-calendar-view-checkbox" name="tasks.calendarView.enabled" />
                                <label for="tasks-calendar-view-checkbox" class="checkbox-label">日历视图</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-gantt-view-checkbox" name="tasks.ganttView.enabled" />
                                <label for="tasks-gantt-view-checkbox" class="checkbox-label">甘特图</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-sorting-checkbox" name="tasks.sorting.enabled" checked />
                                <label for="tasks-sorting-checkbox" class="checkbox-label">排序功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-filtering-checkbox" name="tasks.filtering.enabled" />
                                <label for="tasks-filtering-checkbox" class="checkbox-label">筛选功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-search-checkbox" name="tasks.search.enabled" />
                                <label for="tasks-search-checkbox" class="checkbox-label">搜索功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-grouping-checkbox" name="tasks.grouping.enabled" />
                                <label for="tasks-grouping-checkbox" class="checkbox-label">分组显示</label>
                            </div>
                        </div>
                    </div>

                    <!-- 数据管理 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-backup-checkbox" name="tasks.backup.enabled" />
                                <label for="tasks-backup-checkbox" class="checkbox-label">数据备份</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-export-checkbox" name="tasks.export.enabled" />
                                <label for="tasks-export-checkbox" class="checkbox-label">数据导出</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-import-checkbox" name="tasks.import.enabled" />
                                <label for="tasks-import-checkbox" class="checkbox-label">数据导入</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-sync-checkbox" name="tasks.sync.enabled" />
                                <label for="tasks-sync-checkbox" class="checkbox-label">云端同步</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-archive-checkbox" name="tasks.archive.enabled" />
                                <label for="tasks-archive-checkbox" class="checkbox-label">任务归档</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-history-checkbox" name="tasks.history.enabled" />
                                <label for="tasks-history-checkbox" class="checkbox-label">历史记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-versioning-checkbox" name="tasks.versioning.enabled" />
                                <label for="tasks-versioning-checkbox" class="checkbox-label">版本控制</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="tasks-recovery-checkbox" name="tasks.recovery.enabled" />
                                <label for="tasks-recovery-checkbox" class="checkbox-label">数据恢复</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建世界信息面板
     */
    createWorldPanel() {
        return `
            <div class="content-header">
                <h3>世界信息配置</h3>
            </div>

            <div class="content-body">
                <!-- 世界信息卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🌍</div>
                            <div class="card-text">
                                <div class="card-title">世界信息</div>
                                <div class="card-subtitle">世界设定和环境管理</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="world-toggle" name="world.enabled" checked />
                                <label for="world-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">18/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础设定 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-name-checkbox" name="world.name.enabled" checked />
                                <label for="world-name-checkbox" class="checkbox-label">世界名称</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-type-checkbox" name="world.type.enabled" checked />
                                <label for="world-type-checkbox" class="checkbox-label">世界类型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-genre-checkbox" name="world.genre.enabled" checked />
                                <label for="world-genre-checkbox" class="checkbox-label">世界风格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-theme-checkbox" name="world.theme.enabled" />
                                <label for="world-theme-checkbox" class="checkbox-label">主题设定</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-description-checkbox" name="world.description.enabled" checked />
                                <label for="world-description-checkbox" class="checkbox-label">世界描述</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-history-checkbox" name="world.history.enabled" />
                                <label for="world-history-checkbox" class="checkbox-label">历史背景</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-mythology-checkbox" name="world.mythology.enabled" />
                                <label for="world-mythology-checkbox" class="checkbox-label">神话传说</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-lore-checkbox" name="world.lore.enabled" />
                                <label for="world-lore-checkbox" class="checkbox-label">世界观设定</label>
                            </div>
                        </div>
                    </div>

                    <!-- 地理环境 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-geography-checkbox" name="world.geography.enabled" checked />
                                <label for="world-geography-checkbox" class="checkbox-label">地理环境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-climate-checkbox" name="world.climate.enabled" />
                                <label for="world-climate-checkbox" class="checkbox-label">气候条件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-terrain-checkbox" name="world.terrain.enabled" />
                                <label for="world-terrain-checkbox" class="checkbox-label">地形地貌</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-biomes-checkbox" name="world.biomes.enabled" />
                                <label for="world-biomes-checkbox" class="checkbox-label">生态群落</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-locations-checkbox" name="world.locations.enabled" checked />
                                <label for="world-locations-checkbox" class="checkbox-label">重要地点</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-landmarks-checkbox" name="world.landmarks.enabled" />
                                <label for="world-landmarks-checkbox" class="checkbox-label">地标建筑</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-cities-checkbox" name="world.cities.enabled" />
                                <label for="world-cities-checkbox" class="checkbox-label">城市聚落</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-dungeons-checkbox" name="world.dungeons.enabled" />
                                <label for="world-dungeons-checkbox" class="checkbox-label">地下城</label>
                            </div>
                        </div>
                    </div>

                    <!-- 时间系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-time-checkbox" name="world.time.enabled" checked />
                                <label for="world-time-checkbox" class="checkbox-label">时间系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-calendar-checkbox" name="world.calendar.enabled" />
                                <label for="world-calendar-checkbox" class="checkbox-label">历法系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-seasons-checkbox" name="world.seasons.enabled" />
                                <label for="world-seasons-checkbox" class="checkbox-label">季节变化</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-day-night-checkbox" name="world.dayNight.enabled" />
                                <label for="world-day-night-checkbox" class="checkbox-label">昼夜循环</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-weather-checkbox" name="world.weather.enabled" />
                                <label for="world-weather-checkbox" class="checkbox-label">天气系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-events-checkbox" name="world.events.enabled" />
                                <label for="world-events-checkbox" class="checkbox-label">世界事件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-festivals-checkbox" name="world.festivals.enabled" />
                                <label for="world-festivals-checkbox" class="checkbox-label">节日庆典</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-disasters-checkbox" name="world.disasters.enabled" />
                                <label for="world-disasters-checkbox" class="checkbox-label">自然灾害</label>
                            </div>
                        </div>
                    </div>

                    <!-- 社会文化 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-cultures-checkbox" name="world.cultures.enabled" />
                                <label for="world-cultures-checkbox" class="checkbox-label">文化体系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-languages-checkbox" name="world.languages.enabled" />
                                <label for="world-languages-checkbox" class="checkbox-label">语言系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-religions-checkbox" name="world.religions.enabled" />
                                <label for="world-religions-checkbox" class="checkbox-label">宗教信仰</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-customs-checkbox" name="world.customs.enabled" />
                                <label for="world-customs-checkbox" class="checkbox-label">风俗习惯</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-politics-checkbox" name="world.politics.enabled" />
                                <label for="world-politics-checkbox" class="checkbox-label">政治制度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-economy-checkbox" name="world.economy.enabled" />
                                <label for="world-economy-checkbox" class="checkbox-label">经济体系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-technology-checkbox" name="world.technology.enabled" />
                                <label for="world-technology-checkbox" class="checkbox-label">科技水平</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-magic-checkbox" name="world.magic.enabled" />
                                <label for="world-magic-checkbox" class="checkbox-label">魔法体系</label>
                            </div>
                        </div>
                    </div>

                    <!-- 生物种族 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-races-checkbox" name="world.races.enabled" />
                                <label for="world-races-checkbox" class="checkbox-label">种族设定</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-creatures-checkbox" name="world.creatures.enabled" />
                                <label for="world-creatures-checkbox" class="checkbox-label">生物群体</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-monsters-checkbox" name="world.monsters.enabled" />
                                <label for="world-monsters-checkbox" class="checkbox-label">怪物设定</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-npcs-checkbox" name="world.npcs.enabled" />
                                <label for="world-npcs-checkbox" class="checkbox-label">NPC管理</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-factions-checkbox" name="world.factions.enabled" />
                                <label for="world-factions-checkbox" class="checkbox-label">势力阵营</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-conflicts-checkbox" name="world.conflicts.enabled" />
                                <label for="world-conflicts-checkbox" class="checkbox-label">冲突矛盾</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-alliances-checkbox" name="world.alliances.enabled" />
                                <label for="world-alliances-checkbox" class="checkbox-label">联盟关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-wars-checkbox" name="world.wars.enabled" />
                                <label for="world-wars-checkbox" class="checkbox-label">战争历史</label>
                            </div>
                        </div>
                    </div>

                    <!-- 资源物品 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-resources-checkbox" name="world.resources.enabled" />
                                <label for="world-resources-checkbox" class="checkbox-label">自然资源</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-materials-checkbox" name="world.materials.enabled" />
                                <label for="world-materials-checkbox" class="checkbox-label">材料物品</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-artifacts-checkbox" name="world.artifacts.enabled" />
                                <label for="world-artifacts-checkbox" class="checkbox-label">神器宝物</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-currency-checkbox" name="world.currency.enabled" />
                                <label for="world-currency-checkbox" class="checkbox-label">货币系统</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-trade-checkbox" name="world.trade.enabled" />
                                <label for="world-trade-checkbox" class="checkbox-label">贸易体系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-markets-checkbox" name="world.markets.enabled" />
                                <label for="world-markets-checkbox" class="checkbox-label">市场商店</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-guilds-checkbox" name="world.guilds.enabled" />
                                <label for="world-guilds-checkbox" class="checkbox-label">公会组织</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="world-transportation-checkbox" name="world.transportation.enabled" />
                                <label for="world-transportation-checkbox" class="checkbox-label">交通运输</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建组织信息面板
     */
    createOrganizationPanel() {
        return `
            <div class="content-header">
                <h3>组织信息配置</h3>
            </div>

            <div class="content-body">
                <!-- 组织信息卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🏛️</div>
                            <div class="card-text">
                                <div class="card-title">组织信息</div>
                                <div class="card-subtitle">组织管理和成员关系</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="organization-toggle" name="organization.enabled" checked />
                                <label for="organization-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">16/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础信息 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-name-checkbox" name="organization.name.enabled" checked />
                                <label for="org-name-checkbox" class="checkbox-label">组织名称</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-type-checkbox" name="organization.type.enabled" checked />
                                <label for="org-type-checkbox" class="checkbox-label">组织类型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-description-checkbox" name="organization.description.enabled" checked />
                                <label for="org-description-checkbox" class="checkbox-label">组织描述</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-purpose-checkbox" name="organization.purpose.enabled" />
                                <label for="org-purpose-checkbox" class="checkbox-label">组织目标</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-history-checkbox" name="organization.history.enabled" />
                                <label for="org-history-checkbox" class="checkbox-label">组织历史</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-founding-checkbox" name="organization.founding.enabled" />
                                <label for="org-founding-checkbox" class="checkbox-label">成立背景</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-motto-checkbox" name="organization.motto.enabled" />
                                <label for="org-motto-checkbox" class="checkbox-label">组织格言</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-values-checkbox" name="organization.values.enabled" />
                                <label for="org-values-checkbox" class="checkbox-label">核心价值</label>
                            </div>
                        </div>
                    </div>

                    <!-- 组织结构 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-hierarchy-checkbox" name="organization.hierarchy.enabled" checked />
                                <label for="org-hierarchy-checkbox" class="checkbox-label">等级制度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-departments-checkbox" name="organization.departments.enabled" />
                                <label for="org-departments-checkbox" class="checkbox-label">部门分工</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-leadership-checkbox" name="organization.leadership.enabled" />
                                <label for="org-leadership-checkbox" class="checkbox-label">领导层</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-council-checkbox" name="organization.council.enabled" />
                                <label for="org-council-checkbox" class="checkbox-label">议事会</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-positions-checkbox" name="organization.positions.enabled" checked />
                                <label for="org-positions-checkbox" class="checkbox-label">职位体系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-ranks-checkbox" name="organization.ranks.enabled" />
                                <label for="org-ranks-checkbox" class="checkbox-label">等级划分</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-promotion-checkbox" name="organization.promotion.enabled" />
                                <label for="org-promotion-checkbox" class="checkbox-label">晋升制度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-authority-checkbox" name="organization.authority.enabled" />
                                <label for="org-authority-checkbox" class="checkbox-label">权限管理</label>
                            </div>
                        </div>
                    </div>

                    <!-- 成员管理 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-members-checkbox" name="organization.members.enabled" checked />
                                <label for="org-members-checkbox" class="checkbox-label">成员名单</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-recruitment-checkbox" name="organization.recruitment.enabled" />
                                <label for="org-recruitment-checkbox" class="checkbox-label">招募制度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-training-checkbox" name="organization.training.enabled" />
                                <label for="org-training-checkbox" class="checkbox-label">培训体系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-evaluation-checkbox" name="organization.evaluation.enabled" />
                                <label for="org-evaluation-checkbox" class="checkbox-label">考核评估</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-rewards-checkbox" name="organization.rewards.enabled" />
                                <label for="org-rewards-checkbox" class="checkbox-label">奖励机制</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-punishment-checkbox" name="organization.punishment.enabled" />
                                <label for="org-punishment-checkbox" class="checkbox-label">惩罚制度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-benefits-checkbox" name="organization.benefits.enabled" />
                                <label for="org-benefits-checkbox" class="checkbox-label">福利待遇</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-retirement-checkbox" name="organization.retirement.enabled" />
                                <label for="org-retirement-checkbox" class="checkbox-label">退休制度</label>
                            </div>
                        </div>
                    </div>

                    <!-- 规章制度 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-rules-checkbox" name="organization.rules.enabled" />
                                <label for="org-rules-checkbox" class="checkbox-label">组织规章</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-code-checkbox" name="organization.code.enabled" />
                                <label for="org-code-checkbox" class="checkbox-label">行为准则</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-ethics-checkbox" name="organization.ethics.enabled" />
                                <label for="org-ethics-checkbox" class="checkbox-label">道德标准</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-discipline-checkbox" name="organization.discipline.enabled" />
                                <label for="org-discipline-checkbox" class="checkbox-label">纪律要求</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-procedures-checkbox" name="organization.procedures.enabled" />
                                <label for="org-procedures-checkbox" class="checkbox-label">工作流程</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-protocols-checkbox" name="organization.protocols.enabled" />
                                <label for="org-protocols-checkbox" class="checkbox-label">操作规程</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-standards-checkbox" name="organization.standards.enabled" />
                                <label for="org-standards-checkbox" class="checkbox-label">质量标准</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-compliance-checkbox" name="organization.compliance.enabled" />
                                <label for="org-compliance-checkbox" class="checkbox-label">合规要求</label>
                            </div>
                        </div>
                    </div>

                    <!-- 对外关系 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-allies-checkbox" name="organization.allies.enabled" />
                                <label for="org-allies-checkbox" class="checkbox-label">盟友组织</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-enemies-checkbox" name="organization.enemies.enabled" />
                                <label for="org-enemies-checkbox" class="checkbox-label">敌对势力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-neutral-checkbox" name="organization.neutral.enabled" />
                                <label for="org-neutral-checkbox" class="checkbox-label">中立关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-partnerships-checkbox" name="organization.partnerships.enabled" />
                                <label for="org-partnerships-checkbox" class="checkbox-label">合作伙伴</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-reputation-checkbox" name="organization.reputation.enabled" />
                                <label for="org-reputation-checkbox" class="checkbox-label">声誉影响</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-influence-checkbox" name="organization.influence.enabled" />
                                <label for="org-influence-checkbox" class="checkbox-label">势力范围</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-diplomacy-checkbox" name="organization.diplomacy.enabled" />
                                <label for="org-diplomacy-checkbox" class="checkbox-label">外交政策</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-treaties-checkbox" name="organization.treaties.enabled" />
                                <label for="org-treaties-checkbox" class="checkbox-label">条约协议</label>
                            </div>
                        </div>
                    </div>

                    <!-- 资源管理 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-finances-checkbox" name="organization.finances.enabled" />
                                <label for="org-finances-checkbox" class="checkbox-label">财务管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-assets-checkbox" name="organization.assets.enabled" />
                                <label for="org-assets-checkbox" class="checkbox-label">资产清单</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-facilities-checkbox" name="organization.facilities.enabled" />
                                <label for="org-facilities-checkbox" class="checkbox-label">设施场所</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-equipment-checkbox" name="organization.equipment.enabled" />
                                <label for="org-equipment-checkbox" class="checkbox-label">装备器材</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-technology-checkbox" name="organization.technology.enabled" />
                                <label for="org-technology-checkbox" class="checkbox-label">技术资源</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-knowledge-checkbox" name="organization.knowledge.enabled" />
                                <label for="org-knowledge-checkbox" class="checkbox-label">知识库</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-archives-checkbox" name="organization.archives.enabled" />
                                <label for="org-archives-checkbox" class="checkbox-label">档案记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="org-secrets-checkbox" name="organization.secrets.enabled" />
                                <label for="org-secrets-checkbox" class="checkbox-label">机密信息</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建资讯内容面板
     */
    createNewsPanel() {
        return `
            <div class="content-header">
                <h3>资讯内容配置</h3>
            </div>

            <div class="content-body">
                <!-- 资讯内容卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">📰</div>
                            <div class="card-text">
                                <div class="card-title">资讯内容</div>
                                <div class="card-subtitle">信息管理和内容分发</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="news-toggle" name="news.enabled" checked />
                                <label for="news-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">20/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 内容类型 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-breaking-checkbox" name="news.breaking.enabled" checked />
                                <label for="news-breaking-checkbox" class="checkbox-label">突发新闻</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-politics-checkbox" name="news.politics.enabled" checked />
                                <label for="news-politics-checkbox" class="checkbox-label">政治新闻</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-economy-checkbox" name="news.economy.enabled" checked />
                                <label for="news-economy-checkbox" class="checkbox-label">经济资讯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-social-checkbox" name="news.social.enabled" />
                                <label for="news-social-checkbox" class="checkbox-label">社会新闻</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-military-checkbox" name="news.military.enabled" />
                                <label for="news-military-checkbox" class="checkbox-label">军事动态</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-technology-checkbox" name="news.technology.enabled" />
                                <label for="news-technology-checkbox" class="checkbox-label">科技资讯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-culture-checkbox" name="news.culture.enabled" />
                                <label for="news-culture-checkbox" class="checkbox-label">文化艺术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-sports-checkbox" name="news.sports.enabled" />
                                <label for="news-sports-checkbox" class="checkbox-label">体育赛事</label>
                            </div>
                        </div>
                    </div>

                    <!-- 信息来源 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-official-checkbox" name="news.official.enabled" checked />
                                <label for="news-official-checkbox" class="checkbox-label">官方消息</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-media-checkbox" name="news.media.enabled" />
                                <label for="news-media-checkbox" class="checkbox-label">媒体报道</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-rumors-checkbox" name="news.rumors.enabled" />
                                <label for="news-rumors-checkbox" class="checkbox-label">传言消息</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-insider-checkbox" name="news.insider.enabled" />
                                <label for="news-insider-checkbox" class="checkbox-label">内部消息</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-witness-checkbox" name="news.witness.enabled" />
                                <label for="news-witness-checkbox" class="checkbox-label">目击报告</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-intelligence-checkbox" name="news.intelligence.enabled" />
                                <label for="news-intelligence-checkbox" class="checkbox-label">情报信息</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-leaked-checkbox" name="news.leaked.enabled" />
                                <label for="news-leaked-checkbox" class="checkbox-label">泄露文件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-anonymous-checkbox" name="news.anonymous.enabled" />
                                <label for="news-anonymous-checkbox" class="checkbox-label">匿名爆料</label>
                            </div>
                        </div>
                    </div>

                    <!-- 内容管理 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-creation-checkbox" name="news.creation.enabled" checked />
                                <label for="news-creation-checkbox" class="checkbox-label">内容创建</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-editing-checkbox" name="news.editing.enabled" />
                                <label for="news-editing-checkbox" class="checkbox-label">内容编辑</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-review-checkbox" name="news.review.enabled" />
                                <label for="news-review-checkbox" class="checkbox-label">内容审核</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-publishing-checkbox" name="news.publishing.enabled" />
                                <label for="news-publishing-checkbox" class="checkbox-label">内容发布</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-archiving-checkbox" name="news.archiving.enabled" />
                                <label for="news-archiving-checkbox" class="checkbox-label">内容归档</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-deletion-checkbox" name="news.deletion.enabled" />
                                <label for="news-deletion-checkbox" class="checkbox-label">内容删除</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-backup-checkbox" name="news.backup.enabled" />
                                <label for="news-backup-checkbox" class="checkbox-label">内容备份</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-versioning-checkbox" name="news.versioning.enabled" />
                                <label for="news-versioning-checkbox" class="checkbox-label">版本控制</label>
                            </div>
                        </div>
                    </div>

                    <!-- 分发渠道 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-broadcast-checkbox" name="news.broadcast.enabled" />
                                <label for="news-broadcast-checkbox" class="checkbox-label">广播发布</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-newsletter-checkbox" name="news.newsletter.enabled" />
                                <label for="news-newsletter-checkbox" class="checkbox-label">新闻简报</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-alerts-checkbox" name="news.alerts.enabled" />
                                <label for="news-alerts-checkbox" class="checkbox-label">紧急通知</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-digest-checkbox" name="news.digest.enabled" />
                                <label for="news-digest-checkbox" class="checkbox-label">新闻摘要</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-social-media-checkbox" name="news.socialMedia.enabled" />
                                <label for="news-social-media-checkbox" class="checkbox-label">社交媒体</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-forums-checkbox" name="news.forums.enabled" />
                                <label for="news-forums-checkbox" class="checkbox-label">论坛发布</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-messaging-checkbox" name="news.messaging.enabled" />
                                <label for="news-messaging-checkbox" class="checkbox-label">消息推送</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-email-checkbox" name="news.email.enabled" />
                                <label for="news-email-checkbox" class="checkbox-label">邮件通知</label>
                            </div>
                        </div>
                    </div>

                    <!-- 互动功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-comments-checkbox" name="news.comments.enabled" />
                                <label for="news-comments-checkbox" class="checkbox-label">评论功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-likes-checkbox" name="news.likes.enabled" />
                                <label for="news-likes-checkbox" class="checkbox-label">点赞功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-sharing-checkbox" name="news.sharing.enabled" />
                                <label for="news-sharing-checkbox" class="checkbox-label">分享功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-bookmarks-checkbox" name="news.bookmarks.enabled" />
                                <label for="news-bookmarks-checkbox" class="checkbox-label">收藏功能</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-ratings-checkbox" name="news.ratings.enabled" />
                                <label for="news-ratings-checkbox" class="checkbox-label">评分系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-polls-checkbox" name="news.polls.enabled" />
                                <label for="news-polls-checkbox" class="checkbox-label">投票调查</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-discussions-checkbox" name="news.discussions.enabled" />
                                <label for="news-discussions-checkbox" class="checkbox-label">讨论区</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-feedback-checkbox" name="news.feedback.enabled" />
                                <label for="news-feedback-checkbox" class="checkbox-label">反馈系统</label>
                            </div>
                        </div>
                    </div>

                    <!-- 数据分析 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-analytics-checkbox" name="news.analytics.enabled" />
                                <label for="news-analytics-checkbox" class="checkbox-label">数据分析</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-metrics-checkbox" name="news.metrics.enabled" />
                                <label for="news-metrics-checkbox" class="checkbox-label">指标统计</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-trends-checkbox" name="news.trends.enabled" />
                                <label for="news-trends-checkbox" class="checkbox-label">趋势分析</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-reports-checkbox" name="news.reports.enabled" />
                                <label for="news-reports-checkbox" class="checkbox-label">报告生成</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-monitoring-checkbox" name="news.monitoring.enabled" />
                                <label for="news-monitoring-checkbox" class="checkbox-label">监控系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-alerts-system-checkbox" name="news.alertsSystem.enabled" />
                                <label for="news-alerts-system-checkbox" class="checkbox-label">预警系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-automation-checkbox" name="news.automation.enabled" />
                                <label for="news-automation-checkbox" class="checkbox-label">自动化处理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="news-ai-analysis-checkbox" name="news.aiAnalysis.enabled" />
                                <label for="news-ai-analysis-checkbox" class="checkbox-label">AI分析</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建背包仓库面板
     */
    createInventoryPanel() {
        return `
            <div class="content-header">
                <h3>背包仓库配置</h3>
            </div>

            <div class="content-body">
                <!-- 背包仓库卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🎒</div>
                            <div class="card-text">
                                <div class="card-title">背包仓库</div>
                                <div class="card-subtitle">物品管理和存储系统</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="inventory-toggle" name="inventory.enabled" checked />
                                <label for="inventory-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">22/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-storage-checkbox" name="inventory.storage.enabled" checked />
                                <label for="inventory-storage-checkbox" class="checkbox-label">物品存储</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-retrieval-checkbox" name="inventory.retrieval.enabled" checked />
                                <label for="inventory-retrieval-checkbox" class="checkbox-label">物品取出</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-organization-checkbox" name="inventory.organization.enabled" checked />
                                <label for="inventory-organization-checkbox" class="checkbox-label">物品整理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-search-checkbox" name="inventory.search.enabled" />
                                <label for="inventory-search-checkbox" class="checkbox-label">物品搜索</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-sorting-checkbox" name="inventory.sorting.enabled" />
                                <label for="inventory-sorting-checkbox" class="checkbox-label">自动排序</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-filtering-checkbox" name="inventory.filtering.enabled" />
                                <label for="inventory-filtering-checkbox" class="checkbox-label">物品筛选</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-categories-checkbox" name="inventory.categories.enabled" />
                                <label for="inventory-categories-checkbox" class="checkbox-label">分类管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-tags-checkbox" name="inventory.tags.enabled" />
                                <label for="inventory-tags-checkbox" class="checkbox-label">标签系统</label>
                            </div>
                        </div>
                    </div>

                    <!-- 物品类型 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-weapons-checkbox" name="inventory.weapons.enabled" checked />
                                <label for="inventory-weapons-checkbox" class="checkbox-label">武器装备</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-armor-checkbox" name="inventory.armor.enabled" checked />
                                <label for="inventory-armor-checkbox" class="checkbox-label">防具护甲</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-accessories-checkbox" name="inventory.accessories.enabled" />
                                <label for="inventory-accessories-checkbox" class="checkbox-label">饰品配件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-consumables-checkbox" name="inventory.consumables.enabled" />
                                <label for="inventory-consumables-checkbox" class="checkbox-label">消耗品</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-materials-checkbox" name="inventory.materials.enabled" />
                                <label for="inventory-materials-checkbox" class="checkbox-label">材料物品</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-tools-checkbox" name="inventory.tools.enabled" />
                                <label for="inventory-tools-checkbox" class="checkbox-label">工具器械</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-books-checkbox" name="inventory.books.enabled" />
                                <label for="inventory-books-checkbox" class="checkbox-label">书籍文献</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-treasures-checkbox" name="inventory.treasures.enabled" />
                                <label for="inventory-treasures-checkbox" class="checkbox-label">珍宝收藏</label>
                            </div>
                        </div>
                    </div>

                    <!-- 存储管理 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-capacity-checkbox" name="inventory.capacity.enabled" checked />
                                <label for="inventory-capacity-checkbox" class="checkbox-label">容量管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-weight-checkbox" name="inventory.weight.enabled" />
                                <label for="inventory-weight-checkbox" class="checkbox-label">重量限制</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-stacking-checkbox" name="inventory.stacking.enabled" />
                                <label for="inventory-stacking-checkbox" class="checkbox-label">物品堆叠</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-expansion-checkbox" name="inventory.expansion.enabled" />
                                <label for="inventory-expansion-checkbox" class="checkbox-label">容量扩展</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-compartments-checkbox" name="inventory.compartments.enabled" />
                                <label for="inventory-compartments-checkbox" class="checkbox-label">分隔区域</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-protection-checkbox" name="inventory.protection.enabled" />
                                <label for="inventory-protection-checkbox" class="checkbox-label">物品保护</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-durability-checkbox" name="inventory.durability.enabled" />
                                <label for="inventory-durability-checkbox" class="checkbox-label">耐久度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-repair-checkbox" name="inventory.repair.enabled" />
                                <label for="inventory-repair-checkbox" class="checkbox-label">修理系统</label>
                            </div>
                        </div>
                    </div>

                    <!-- 交易功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-trading-checkbox" name="inventory.trading.enabled" />
                                <label for="inventory-trading-checkbox" class="checkbox-label">物品交易</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-selling-checkbox" name="inventory.selling.enabled" />
                                <label for="inventory-selling-checkbox" class="checkbox-label">物品出售</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-buying-checkbox" name="inventory.buying.enabled" />
                                <label for="inventory-buying-checkbox" class="checkbox-label">物品购买</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-auction-checkbox" name="inventory.auction.enabled" />
                                <label for="inventory-auction-checkbox" class="checkbox-label">拍卖系统</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-gifting-checkbox" name="inventory.gifting.enabled" />
                                <label for="inventory-gifting-checkbox" class="checkbox-label">物品赠送</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-lending-checkbox" name="inventory.lending.enabled" />
                                <label for="inventory-lending-checkbox" class="checkbox-label">物品借贷</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-sharing-checkbox" name="inventory.sharing.enabled" />
                                <label for="inventory-sharing-checkbox" class="checkbox-label">物品共享</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-banking-checkbox" name="inventory.banking.enabled" />
                                <label for="inventory-banking-checkbox" class="checkbox-label">银行存储</label>
                            </div>
                        </div>
                    </div>

                    <!-- 制作系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-crafting-checkbox" name="inventory.crafting.enabled" />
                                <label for="inventory-crafting-checkbox" class="checkbox-label">物品制作</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-recipes-checkbox" name="inventory.recipes.enabled" />
                                <label for="inventory-recipes-checkbox" class="checkbox-label">配方管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-enhancement-checkbox" name="inventory.enhancement.enabled" />
                                <label for="inventory-enhancement-checkbox" class="checkbox-label">物品强化</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-enchanting-checkbox" name="inventory.enchanting.enabled" />
                                <label for="inventory-enchanting-checkbox" class="checkbox-label">附魔系统</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-upgrading-checkbox" name="inventory.upgrading.enabled" />
                                <label for="inventory-upgrading-checkbox" class="checkbox-label">物品升级</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-combining-checkbox" name="inventory.combining.enabled" />
                                <label for="inventory-combining-checkbox" class="checkbox-label">物品合成</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-dismantling-checkbox" name="inventory.dismantling.enabled" />
                                <label for="inventory-dismantling-checkbox" class="checkbox-label">物品分解</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-recycling-checkbox" name="inventory.recycling.enabled" />
                                <label for="inventory-recycling-checkbox" class="checkbox-label">回收利用</label>
                            </div>
                        </div>
                    </div>

                    <!-- 高级功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-automation-checkbox" name="inventory.automation.enabled" />
                                <label for="inventory-automation-checkbox" class="checkbox-label">自动化管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-ai-sorting-checkbox" name="inventory.aiSorting.enabled" />
                                <label for="inventory-ai-sorting-checkbox" class="checkbox-label">智能排序</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-recommendations-checkbox" name="inventory.recommendations.enabled" />
                                <label for="inventory-recommendations-checkbox" class="checkbox-label">推荐系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-analytics-checkbox" name="inventory.analytics.enabled" />
                                <label for="inventory-analytics-checkbox" class="checkbox-label">使用分析</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-backup-checkbox" name="inventory.backup.enabled" />
                                <label for="inventory-backup-checkbox" class="checkbox-label">数据备份</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-sync-checkbox" name="inventory.sync.enabled" />
                                <label for="inventory-sync-checkbox" class="checkbox-label">云端同步</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-security-checkbox" name="inventory.security.enabled" />
                                <label for="inventory-security-checkbox" class="checkbox-label">安全保护</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="inventory-history-checkbox" name="inventory.history.enabled" />
                                <label for="inventory-history-checkbox" class="checkbox-label">操作历史</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建能力系统面板
     */
    createAbilitiesPanel() {
        return `
            <div class="content-header">
                <h3>能力系统配置</h3>
            </div>

            <div class="content-body">
                <!-- 能力系统卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">⚡</div>
                            <div class="card-text">
                                <div class="card-title">能力系统</div>
                                <div class="card-subtitle">技能和属性管理系统</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="abilities-toggle" name="abilities.enabled" checked />
                                <label for="abilities-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">25/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 基础属性 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-strength-checkbox" name="abilities.strength.enabled" checked />
                                <label for="abilities-strength-checkbox" class="checkbox-label">力量属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-agility-checkbox" name="abilities.agility.enabled" checked />
                                <label for="abilities-agility-checkbox" class="checkbox-label">敏捷属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-intelligence-checkbox" name="abilities.intelligence.enabled" checked />
                                <label for="abilities-intelligence-checkbox" class="checkbox-label">智力属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-constitution-checkbox" name="abilities.constitution.enabled" />
                                <label for="abilities-constitution-checkbox" class="checkbox-label">体质属性</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-wisdom-checkbox" name="abilities.wisdom.enabled" />
                                <label for="abilities-wisdom-checkbox" class="checkbox-label">智慧属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-charisma-checkbox" name="abilities.charisma.enabled" />
                                <label for="abilities-charisma-checkbox" class="checkbox-label">魅力属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-luck-checkbox" name="abilities.luck.enabled" />
                                <label for="abilities-luck-checkbox" class="checkbox-label">幸运属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-perception-checkbox" name="abilities.perception.enabled" />
                                <label for="abilities-perception-checkbox" class="checkbox-label">感知属性</label>
                            </div>
                        </div>
                    </div>

                    <!-- 战斗技能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-swordsmanship-checkbox" name="abilities.swordsmanship.enabled" checked />
                                <label for="abilities-swordsmanship-checkbox" class="checkbox-label">剑术技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-archery-checkbox" name="abilities.archery.enabled" />
                                <label for="abilities-archery-checkbox" class="checkbox-label">弓箭技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-magic-checkbox" name="abilities.magic.enabled" checked />
                                <label for="abilities-magic-checkbox" class="checkbox-label">魔法技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-defense-checkbox" name="abilities.defense.enabled" />
                                <label for="abilities-defense-checkbox" class="checkbox-label">防御技能</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-martial-arts-checkbox" name="abilities.martialArts.enabled" />
                                <label for="abilities-martial-arts-checkbox" class="checkbox-label">武术技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-stealth-checkbox" name="abilities.stealth.enabled" />
                                <label for="abilities-stealth-checkbox" class="checkbox-label">潜行技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-tactics-checkbox" name="abilities.tactics.enabled" />
                                <label for="abilities-tactics-checkbox" class="checkbox-label">战术技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-healing-checkbox" name="abilities.healing.enabled" />
                                <label for="abilities-healing-checkbox" class="checkbox-label">治疗技能</label>
                            </div>
                        </div>
                    </div>

                    <!-- 生活技能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-crafting-checkbox" name="abilities.crafting.enabled" />
                                <label for="abilities-crafting-checkbox" class="checkbox-label">制作技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-cooking-checkbox" name="abilities.cooking.enabled" />
                                <label for="abilities-cooking-checkbox" class="checkbox-label">烹饪技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-farming-checkbox" name="abilities.farming.enabled" />
                                <label for="abilities-farming-checkbox" class="checkbox-label">农业技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-mining-checkbox" name="abilities.mining.enabled" />
                                <label for="abilities-mining-checkbox" class="checkbox-label">采矿技能</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-fishing-checkbox" name="abilities.fishing.enabled" />
                                <label for="abilities-fishing-checkbox" class="checkbox-label">钓鱼技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-hunting-checkbox" name="abilities.hunting.enabled" />
                                <label for="abilities-hunting-checkbox" class="checkbox-label">狩猎技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-trading-checkbox" name="abilities.trading.enabled" />
                                <label for="abilities-trading-checkbox" class="checkbox-label">交易技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-negotiation-checkbox" name="abilities.negotiation.enabled" />
                                <label for="abilities-negotiation-checkbox" class="checkbox-label">谈判技能</label>
                            </div>
                        </div>
                    </div>

                    <!-- 知识技能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-research-checkbox" name="abilities.research.enabled" />
                                <label for="abilities-research-checkbox" class="checkbox-label">研究技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-investigation-checkbox" name="abilities.investigation.enabled" />
                                <label for="abilities-investigation-checkbox" class="checkbox-label">调查技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-languages-checkbox" name="abilities.languages.enabled" />
                                <label for="abilities-languages-checkbox" class="checkbox-label">语言技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-history-checkbox" name="abilities.history.enabled" />
                                <label for="abilities-history-checkbox" class="checkbox-label">历史知识</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-medicine-checkbox" name="abilities.medicine.enabled" />
                                <label for="abilities-medicine-checkbox" class="checkbox-label">医学知识</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-alchemy-checkbox" name="abilities.alchemy.enabled" />
                                <label for="abilities-alchemy-checkbox" class="checkbox-label">炼金术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-engineering-checkbox" name="abilities.engineering.enabled" />
                                <label for="abilities-engineering-checkbox" class="checkbox-label">工程学</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-astronomy-checkbox" name="abilities.astronomy.enabled" />
                                <label for="abilities-astronomy-checkbox" class="checkbox-label">天文学</label>
                            </div>
                        </div>
                    </div>

                    <!-- 社交技能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-persuasion-checkbox" name="abilities.persuasion.enabled" />
                                <label for="abilities-persuasion-checkbox" class="checkbox-label">说服技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-deception-checkbox" name="abilities.deception.enabled" />
                                <label for="abilities-deception-checkbox" class="checkbox-label">欺骗技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-intimidation-checkbox" name="abilities.intimidation.enabled" />
                                <label for="abilities-intimidation-checkbox" class="checkbox-label">威吓技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-performance-checkbox" name="abilities.performance.enabled" />
                                <label for="abilities-performance-checkbox" class="checkbox-label">表演技能</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-leadership-checkbox" name="abilities.leadership.enabled" />
                                <label for="abilities-leadership-checkbox" class="checkbox-label">领导技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-empathy-checkbox" name="abilities.empathy.enabled" />
                                <label for="abilities-empathy-checkbox" class="checkbox-label">共情技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-insight-checkbox" name="abilities.insight.enabled" />
                                <label for="abilities-insight-checkbox" class="checkbox-label">洞察技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-networking-checkbox" name="abilities.networking.enabled" />
                                <label for="abilities-networking-checkbox" class="checkbox-label">人脉技能</label>
                            </div>
                        </div>
                    </div>

                    <!-- 特殊能力 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-telepathy-checkbox" name="abilities.telepathy.enabled" />
                                <label for="abilities-telepathy-checkbox" class="checkbox-label">心灵感应</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-telekinesis-checkbox" name="abilities.telekinesis.enabled" />
                                <label for="abilities-telekinesis-checkbox" class="checkbox-label">念力移物</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-precognition-checkbox" name="abilities.precognition.enabled" />
                                <label for="abilities-precognition-checkbox" class="checkbox-label">预知能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-shapeshifting-checkbox" name="abilities.shapeshifting.enabled" />
                                <label for="abilities-shapeshifting-checkbox" class="checkbox-label">变形能力</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-invisibility-checkbox" name="abilities.invisibility.enabled" />
                                <label for="abilities-invisibility-checkbox" class="checkbox-label">隐身能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-flight-checkbox" name="abilities.flight.enabled" />
                                <label for="abilities-flight-checkbox" class="checkbox-label">飞行能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-regeneration-checkbox" name="abilities.regeneration.enabled" />
                                <label for="abilities-regeneration-checkbox" class="checkbox-label">再生能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="abilities-immortality-checkbox" name="abilities.immortality.enabled" />
                                <label for="abilities-immortality-checkbox" class="checkbox-label">不朽能力</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建剧情面板
     */
    createPlotPanel() {
        return `
            <div class="content-header">
                <h3>剧情面板配置</h3>
            </div>

            <div class="content-body">
                <!-- 剧情面板卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">📖</div>
                            <div class="card-text">
                                <div class="card-title">剧情面板</div>
                                <div class="card-subtitle">故事情节和叙事管理</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="plot-toggle" name="plot.enabled" checked />
                                <label for="plot-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">18/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 剧情结构 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-main-story-checkbox" name="plot.mainStory.enabled" checked />
                                <label for="plot-main-story-checkbox" class="checkbox-label">主线剧情</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-side-quests-checkbox" name="plot.sideQuests.enabled" checked />
                                <label for="plot-side-quests-checkbox" class="checkbox-label">支线任务</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-subplots-checkbox" name="plot.subplots.enabled" checked />
                                <label for="plot-subplots-checkbox" class="checkbox-label">子情节</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-backstory-checkbox" name="plot.backstory.enabled" />
                                <label for="plot-backstory-checkbox" class="checkbox-label">背景故事</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-prologue-checkbox" name="plot.prologue.enabled" />
                                <label for="plot-prologue-checkbox" class="checkbox-label">序章</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-epilogue-checkbox" name="plot.epilogue.enabled" />
                                <label for="plot-epilogue-checkbox" class="checkbox-label">尾声</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-flashbacks-checkbox" name="plot.flashbacks.enabled" />
                                <label for="plot-flashbacks-checkbox" class="checkbox-label">回忆片段</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-foreshadowing-checkbox" name="plot.foreshadowing.enabled" />
                                <label for="plot-foreshadowing-checkbox" class="checkbox-label">伏笔铺垫</label>
                            </div>
                        </div>
                    </div>

                    <!-- 剧情阶段 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-exposition-checkbox" name="plot.exposition.enabled" checked />
                                <label for="plot-exposition-checkbox" class="checkbox-label">开端</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-rising-action-checkbox" name="plot.risingAction.enabled" />
                                <label for="plot-rising-action-checkbox" class="checkbox-label">发展</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-climax-checkbox" name="plot.climax.enabled" />
                                <label for="plot-climax-checkbox" class="checkbox-label">高潮</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-falling-action-checkbox" name="plot.fallingAction.enabled" />
                                <label for="plot-falling-action-checkbox" class="checkbox-label">下降</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-resolution-checkbox" name="plot.resolution.enabled" />
                                <label for="plot-resolution-checkbox" class="checkbox-label">结局</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-denouement-checkbox" name="plot.denouement.enabled" />
                                <label for="plot-denouement-checkbox" class="checkbox-label">收尾</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-cliffhanger-checkbox" name="plot.cliffhanger.enabled" />
                                <label for="plot-cliffhanger-checkbox" class="checkbox-label">悬念结尾</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-twist-checkbox" name="plot.twist.enabled" />
                                <label for="plot-twist-checkbox" class="checkbox-label">剧情转折</label>
                            </div>
                        </div>
                    </div>

                    <!-- 角色发展 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-character-arc-checkbox" name="plot.characterArc.enabled" />
                                <label for="plot-character-arc-checkbox" class="checkbox-label">角色成长</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-relationships-checkbox" name="plot.relationships.enabled" />
                                <label for="plot-relationships-checkbox" class="checkbox-label">关系发展</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-motivations-checkbox" name="plot.motivations.enabled" />
                                <label for="plot-motivations-checkbox" class="checkbox-label">动机驱动</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-conflicts-checkbox" name="plot.conflicts.enabled" />
                                <label for="plot-conflicts-checkbox" class="checkbox-label">冲突矛盾</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-internal-conflicts-checkbox" name="plot.internalConflicts.enabled" />
                                <label for="plot-internal-conflicts-checkbox" class="checkbox-label">内心冲突</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-external-conflicts-checkbox" name="plot.externalConflicts.enabled" />
                                <label for="plot-external-conflicts-checkbox" class="checkbox-label">外部冲突</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-moral-dilemmas-checkbox" name="plot.moralDilemmas.enabled" />
                                <label for="plot-moral-dilemmas-checkbox" class="checkbox-label">道德困境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-sacrifices-checkbox" name="plot.sacrifices.enabled" />
                                <label for="plot-sacrifices-checkbox" class="checkbox-label">牺牲选择</label>
                            </div>
                        </div>
                    </div>

                    <!-- 叙事技巧 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-dialogue-checkbox" name="plot.dialogue.enabled" />
                                <label for="plot-dialogue-checkbox" class="checkbox-label">对话系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-narration-checkbox" name="plot.narration.enabled" />
                                <label for="plot-narration-checkbox" class="checkbox-label">叙述描写</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-monologue-checkbox" name="plot.monologue.enabled" />
                                <label for="plot-monologue-checkbox" class="checkbox-label">内心独白</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-symbolism-checkbox" name="plot.symbolism.enabled" />
                                <label for="plot-symbolism-checkbox" class="checkbox-label">象征隐喻</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-themes-checkbox" name="plot.themes.enabled" />
                                <label for="plot-themes-checkbox" class="checkbox-label">主题表达</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-mood-checkbox" name="plot.mood.enabled" />
                                <label for="plot-mood-checkbox" class="checkbox-label">氛围营造</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-tone-checkbox" name="plot.tone.enabled" />
                                <label for="plot-tone-checkbox" class="checkbox-label">语调风格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-pacing-checkbox" name="plot.pacing.enabled" />
                                <label for="plot-pacing-checkbox" class="checkbox-label">节奏控制</label>
                            </div>
                        </div>
                    </div>

                    <!-- 互动元素 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-choices-checkbox" name="plot.choices.enabled" />
                                <label for="plot-choices-checkbox" class="checkbox-label">选择分支</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-consequences-checkbox" name="plot.consequences.enabled" />
                                <label for="plot-consequences-checkbox" class="checkbox-label">后果影响</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-branching-checkbox" name="plot.branching.enabled" />
                                <label for="plot-branching-checkbox" class="checkbox-label">分支剧情</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-multiple-endings-checkbox" name="plot.multipleEndings.enabled" />
                                <label for="plot-multiple-endings-checkbox" class="checkbox-label">多重结局</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-player-agency-checkbox" name="plot.playerAgency.enabled" />
                                <label for="plot-player-agency-checkbox" class="checkbox-label">玩家主导</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-emergent-narrative-checkbox" name="plot.emergentNarrative.enabled" />
                                <label for="plot-emergent-narrative-checkbox" class="checkbox-label">涌现叙事</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-procedural-generation-checkbox" name="plot.proceduralGeneration.enabled" />
                                <label for="plot-procedural-generation-checkbox" class="checkbox-label">程序生成</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-adaptive-storytelling-checkbox" name="plot.adaptiveStorytelling.enabled" />
                                <label for="plot-adaptive-storytelling-checkbox" class="checkbox-label">自适应叙事</label>
                            </div>
                        </div>
                    </div>

                    <!-- 管理功能 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-timeline-checkbox" name="plot.timeline.enabled" />
                                <label for="plot-timeline-checkbox" class="checkbox-label">时间线管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-notes-checkbox" name="plot.notes.enabled" />
                                <label for="plot-notes-checkbox" class="checkbox-label">剧情笔记</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-bookmarks-checkbox" name="plot.bookmarks.enabled" />
                                <label for="plot-bookmarks-checkbox" class="checkbox-label">重要节点</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-save-states-checkbox" name="plot.saveStates.enabled" />
                                <label for="plot-save-states-checkbox" class="checkbox-label">存档管理</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-auto-save-checkbox" name="plot.autoSave.enabled" />
                                <label for="plot-auto-save-checkbox" class="checkbox-label">自动保存</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-export-checkbox" name="plot.export.enabled" />
                                <label for="plot-export-checkbox" class="checkbox-label">导出功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-import-checkbox" name="plot.import.enabled" />
                                <label for="plot-import-checkbox" class="checkbox-label">导入功能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="plot-analytics-checkbox" name="plot.analytics.enabled" />
                                <label for="plot-analytics-checkbox" class="checkbox-label">剧情分析</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建修仙世界面板
     */
    createCultivationPanel() {
        return `
            <div class="content-header">
                <h3>修仙世界配置</h3>
            </div>

            <div class="content-body">
                <!-- 修仙世界卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">⚡</div>
                            <div class="card-text">
                                <div class="card-title">修仙世界</div>
                                <div class="card-subtitle">仙侠修炼体系设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="cultivation-toggle" name="cultivation.enabled" checked />
                                <label for="cultivation-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">22/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 修炼境界 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-qi-refining-checkbox" name="cultivation.qiRefining.enabled" checked />
                                <label for="cultivation-qi-refining-checkbox" class="checkbox-label">炼气期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-foundation-checkbox" name="cultivation.foundation.enabled" checked />
                                <label for="cultivation-foundation-checkbox" class="checkbox-label">筑基期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-golden-core-checkbox" name="cultivation.goldenCore.enabled" checked />
                                <label for="cultivation-golden-core-checkbox" class="checkbox-label">金丹期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-nascent-soul-checkbox" name="cultivation.nascentSoul.enabled" />
                                <label for="cultivation-nascent-soul-checkbox" class="checkbox-label">元婴期</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-soul-transformation-checkbox" name="cultivation.soulTransformation.enabled" />
                                <label for="cultivation-soul-transformation-checkbox" class="checkbox-label">化神期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-void-refinement-checkbox" name="cultivation.voidRefinement.enabled" />
                                <label for="cultivation-void-refinement-checkbox" class="checkbox-label">炼虚期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-body-integration-checkbox" name="cultivation.bodyIntegration.enabled" />
                                <label for="cultivation-body-integration-checkbox" class="checkbox-label">合体期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-mahayana-checkbox" name="cultivation.mahayana.enabled" />
                                <label for="cultivation-mahayana-checkbox" class="checkbox-label">大乘期</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-tribulation-checkbox" name="cultivation.tribulation.enabled" />
                                <label for="cultivation-tribulation-checkbox" class="checkbox-label">渡劫期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-immortal-checkbox" name="cultivation.immortal.enabled" />
                                <label for="cultivation-immortal-checkbox" class="checkbox-label">仙人境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-true-immortal-checkbox" name="cultivation.trueImmortal.enabled" />
                                <label for="cultivation-true-immortal-checkbox" class="checkbox-label">真仙境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-golden-immortal-checkbox" name="cultivation.goldenImmortal.enabled" />
                                <label for="cultivation-golden-immortal-checkbox" class="checkbox-label">金仙境</label>
                            </div>
                        </div>
                    </div>

                    <!-- 功法体系 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-breathing-technique-checkbox" name="cultivation.breathingTechnique.enabled" checked />
                                <label for="cultivation-breathing-technique-checkbox" class="checkbox-label">吐纳功法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-body-refining-checkbox" name="cultivation.bodyRefining.enabled" />
                                <label for="cultivation-body-refining-checkbox" class="checkbox-label">炼体功法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-soul-cultivation-checkbox" name="cultivation.soulCultivation.enabled" />
                                <label for="cultivation-soul-cultivation-checkbox" class="checkbox-label">神魂功法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-dual-cultivation-checkbox" name="cultivation.dualCultivation.enabled" />
                                <label for="cultivation-dual-cultivation-checkbox" class="checkbox-label">双修功法</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-sword-cultivation-checkbox" name="cultivation.swordCultivation.enabled" />
                                <label for="cultivation-sword-cultivation-checkbox" class="checkbox-label">剑修功法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-alchemy-checkbox" name="cultivation.alchemy.enabled" />
                                <label for="cultivation-alchemy-checkbox" class="checkbox-label">炼丹术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-formation-checkbox" name="cultivation.formation.enabled" />
                                <label for="cultivation-formation-checkbox" class="checkbox-label">阵法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-talisman-checkbox" name="cultivation.talisman.enabled" />
                                <label for="cultivation-talisman-checkbox" class="checkbox-label">符箓术</label>
                            </div>
                        </div>
                    </div>

                    <!-- 灵力系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spiritual-power-checkbox" name="cultivation.spiritualPower.enabled" checked />
                                <label for="cultivation-spiritual-power-checkbox" class="checkbox-label">灵力值</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spiritual-root-checkbox" name="cultivation.spiritualRoot.enabled" />
                                <label for="cultivation-spiritual-root-checkbox" class="checkbox-label">灵根资质</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-meridians-checkbox" name="cultivation.meridians.enabled" />
                                <label for="cultivation-meridians-checkbox" class="checkbox-label">经脉系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-dantian-checkbox" name="cultivation.dantian.enabled" />
                                <label for="cultivation-dantian-checkbox" class="checkbox-label">丹田气海</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-divine-sense-checkbox" name="cultivation.divineSense.enabled" />
                                <label for="cultivation-divine-sense-checkbox" class="checkbox-label">神识</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-life-span-checkbox" name="cultivation.lifeSpan.enabled" />
                                <label for="cultivation-life-span-checkbox" class="checkbox-label">寿元</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-karma-checkbox" name="cultivation.karma.enabled" />
                                <label for="cultivation-karma-checkbox" class="checkbox-label">因果业力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-heavenly-dao-checkbox" name="cultivation.heavenlyDao.enabled" />
                                <label for="cultivation-heavenly-dao-checkbox" class="checkbox-label">天道感悟</label>
                            </div>
                        </div>
                    </div>

                    <!-- 法宝装备 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-flying-sword-checkbox" name="cultivation.flyingSword.enabled" />
                                <label for="cultivation-flying-sword-checkbox" class="checkbox-label">飞剑</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-magic-treasure-checkbox" name="cultivation.magicTreasure.enabled" />
                                <label for="cultivation-magic-treasure-checkbox" class="checkbox-label">法宝</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spiritual-armor-checkbox" name="cultivation.spiritualArmor.enabled" />
                                <label for="cultivation-spiritual-armor-checkbox" class="checkbox-label">灵甲</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-storage-ring-checkbox" name="cultivation.storageRing.enabled" />
                                <label for="cultivation-storage-ring-checkbox" class="checkbox-label">储物戒</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spirit-beast-checkbox" name="cultivation.spiritBeast.enabled" />
                                <label for="cultivation-spirit-beast-checkbox" class="checkbox-label">灵兽</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-puppet-checkbox" name="cultivation.puppet.enabled" />
                                <label for="cultivation-puppet-checkbox" class="checkbox-label">傀儡</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-avatar-checkbox" name="cultivation.avatar.enabled" />
                                <label for="cultivation-avatar-checkbox" class="checkbox-label">化身</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-clone-checkbox" name="cultivation.clone.enabled" />
                                <label for="cultivation-clone-checkbox" class="checkbox-label">分身</label>
                            </div>
                        </div>
                    </div>

                    <!-- 修炼资源 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spirit-stone-checkbox" name="cultivation.spiritStone.enabled" />
                                <label for="cultivation-spirit-stone-checkbox" class="checkbox-label">灵石</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spirit-herb-checkbox" name="cultivation.spiritHerb.enabled" />
                                <label for="cultivation-spirit-herb-checkbox" class="checkbox-label">灵草</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-pill-checkbox" name="cultivation.pill.enabled" />
                                <label for="cultivation-pill-checkbox" class="checkbox-label">丹药</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-spirit-vein-checkbox" name="cultivation.spiritVein.enabled" />
                                <label for="cultivation-spirit-vein-checkbox" class="checkbox-label">灵脉</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-cave-mansion-checkbox" name="cultivation.caveMansion.enabled" />
                                <label for="cultivation-cave-mansion-checkbox" class="checkbox-label">洞府</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-secret-realm-checkbox" name="cultivation.secretRealm.enabled" />
                                <label for="cultivation-secret-realm-checkbox" class="checkbox-label">秘境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-inheritance-checkbox" name="cultivation.inheritance.enabled" />
                                <label for="cultivation-inheritance-checkbox" class="checkbox-label">传承</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-opportunity-checkbox" name="cultivation.opportunity.enabled" />
                                <label for="cultivation-opportunity-checkbox" class="checkbox-label">机缘</label>
                            </div>
                        </div>
                    </div>

                    <!-- 修炼活动 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-meditation-checkbox" name="cultivation.meditation.enabled" />
                                <label for="cultivation-meditation-checkbox" class="checkbox-label">打坐修炼</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-tribulation-crossing-checkbox" name="cultivation.tribulationCrossing.enabled" />
                                <label for="cultivation-tribulation-crossing-checkbox" class="checkbox-label">渡劫</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-enlightenment-checkbox" name="cultivation.enlightenment.enabled" />
                                <label for="cultivation-enlightenment-checkbox" class="checkbox-label">顿悟</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-breakthrough-checkbox" name="cultivation.breakthrough.enabled" />
                                <label for="cultivation-breakthrough-checkbox" class="checkbox-label">突破</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-sect-checkbox" name="cultivation.sect.enabled" />
                                <label for="cultivation-sect-checkbox" class="checkbox-label">宗门</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-master-disciple-checkbox" name="cultivation.masterDisciple.enabled" />
                                <label for="cultivation-master-disciple-checkbox" class="checkbox-label">师徒关系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-dao-companion-checkbox" name="cultivation.daoCompanion.enabled" />
                                <label for="cultivation-dao-companion-checkbox" class="checkbox-label">道侣</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="cultivation-immortal-ascension-checkbox" name="cultivation.immortalAscension.enabled" />
                                <label for="cultivation-immortal-ascension-checkbox" class="checkbox-label">飞升</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建玄幻世界面板
     */
    createFantasyPanel() {
        return `
            <div class="content-header">
                <h3>玄幻世界配置</h3>
            </div>

            <div class="content-body">
                <!-- 玄幻世界卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🐉</div>
                            <div class="card-text">
                                <div class="card-title">玄幻世界</div>
                                <div class="card-subtitle">奇幻魔法世界设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="fantasy-toggle" name="fantasy.enabled" checked />
                                <label for="fantasy-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">19/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <!-- 子项配置 -->
                <div class="sub-items">
                    <!-- 种族系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-human-checkbox" name="fantasy.human.enabled" checked />
                                <label for="fantasy-human-checkbox" class="checkbox-label">人类</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-elf-checkbox" name="fantasy.elf.enabled" checked />
                                <label for="fantasy-elf-checkbox" class="checkbox-label">精灵</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-dwarf-checkbox" name="fantasy.dwarf.enabled" checked />
                                <label for="fantasy-dwarf-checkbox" class="checkbox-label">矮人</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-orc-checkbox" name="fantasy.orc.enabled" />
                                <label for="fantasy-orc-checkbox" class="checkbox-label">兽人</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-dragon-checkbox" name="fantasy.dragon.enabled" />
                                <label for="fantasy-dragon-checkbox" class="checkbox-label">龙族</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-demon-checkbox" name="fantasy.demon.enabled" />
                                <label for="fantasy-demon-checkbox" class="checkbox-label">魔族</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-angel-checkbox" name="fantasy.angel.enabled" />
                                <label for="fantasy-angel-checkbox" class="checkbox-label">天使</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-undead-checkbox" name="fantasy.undead.enabled" />
                                <label for="fantasy-undead-checkbox" class="checkbox-label">不死族</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-halfling-checkbox" name="fantasy.halfling.enabled" />
                                <label for="fantasy-halfling-checkbox" class="checkbox-label">半身人</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-giant-checkbox" name="fantasy.giant.enabled" />
                                <label for="fantasy-giant-checkbox" class="checkbox-label">巨人</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-fairy-checkbox" name="fantasy.fairy.enabled" />
                                <label for="fantasy-fairy-checkbox" class="checkbox-label">妖精</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-vampire-checkbox" name="fantasy.vampire.enabled" />
                                <label for="fantasy-vampire-checkbox" class="checkbox-label">吸血鬼</label>
                            </div>
                        </div>
                    </div>

                    <!-- 魔法系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-fire-magic-checkbox" name="fantasy.fireMagic.enabled" checked />
                                <label for="fantasy-fire-magic-checkbox" class="checkbox-label">火系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-water-magic-checkbox" name="fantasy.waterMagic.enabled" />
                                <label for="fantasy-water-magic-checkbox" class="checkbox-label">水系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-earth-magic-checkbox" name="fantasy.earthMagic.enabled" />
                                <label for="fantasy-earth-magic-checkbox" class="checkbox-label">土系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-air-magic-checkbox" name="fantasy.airMagic.enabled" />
                                <label for="fantasy-air-magic-checkbox" class="checkbox-label">风系魔法</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-light-magic-checkbox" name="fantasy.lightMagic.enabled" />
                                <label for="fantasy-light-magic-checkbox" class="checkbox-label">光系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-dark-magic-checkbox" name="fantasy.darkMagic.enabled" />
                                <label for="fantasy-dark-magic-checkbox" class="checkbox-label">暗系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-nature-magic-checkbox" name="fantasy.natureMagic.enabled" />
                                <label for="fantasy-nature-magic-checkbox" class="checkbox-label">自然魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-space-magic-checkbox" name="fantasy.spaceMagic.enabled" />
                                <label for="fantasy-space-magic-checkbox" class="checkbox-label">空间魔法</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-time-magic-checkbox" name="fantasy.timeMagic.enabled" />
                                <label for="fantasy-time-magic-checkbox" class="checkbox-label">时间魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-necromancy-checkbox" name="fantasy.necromancy.enabled" />
                                <label for="fantasy-necromancy-checkbox" class="checkbox-label">死灵魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-illusion-magic-checkbox" name="fantasy.illusionMagic.enabled" />
                                <label for="fantasy-illusion-magic-checkbox" class="checkbox-label">幻术魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-enchantment-checkbox" name="fantasy.enchantment.enabled" />
                                <label for="fantasy-enchantment-checkbox" class="checkbox-label">附魔魔法</label>
                            </div>
                        </div>
                    </div>

                    <!-- 职业系统 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-warrior-checkbox" name="fantasy.warrior.enabled" />
                                <label for="fantasy-warrior-checkbox" class="checkbox-label">战士</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-mage-checkbox" name="fantasy.mage.enabled" />
                                <label for="fantasy-mage-checkbox" class="checkbox-label">法师</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-archer-checkbox" name="fantasy.archer.enabled" />
                                <label for="fantasy-archer-checkbox" class="checkbox-label">弓箭手</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-rogue-checkbox" name="fantasy.rogue.enabled" />
                                <label for="fantasy-rogue-checkbox" class="checkbox-label">盗贼</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-priest-checkbox" name="fantasy.priest.enabled" />
                                <label for="fantasy-priest-checkbox" class="checkbox-label">牧师</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-paladin-checkbox" name="fantasy.paladin.enabled" />
                                <label for="fantasy-paladin-checkbox" class="checkbox-label">圣骑士</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-druid-checkbox" name="fantasy.druid.enabled" />
                                <label for="fantasy-druid-checkbox" class="checkbox-label">德鲁伊</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-warlock-checkbox" name="fantasy.warlock.enabled" />
                                <label for="fantasy-warlock-checkbox" class="checkbox-label">术士</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-bard-checkbox" name="fantasy.bard.enabled" />
                                <label for="fantasy-bard-checkbox" class="checkbox-label">吟游诗人</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-monk-checkbox" name="fantasy.monk.enabled" />
                                <label for="fantasy-monk-checkbox" class="checkbox-label">武僧</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-ranger-checkbox" name="fantasy.ranger.enabled" />
                                <label for="fantasy-ranger-checkbox" class="checkbox-label">游侠</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-assassin-checkbox" name="fantasy.assassin.enabled" />
                                <label for="fantasy-assassin-checkbox" class="checkbox-label">刺客</label>
                            </div>
                        </div>
                    </div>

                    <!-- 神话生物 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-phoenix-checkbox" name="fantasy.phoenix.enabled" />
                                <label for="fantasy-phoenix-checkbox" class="checkbox-label">凤凰</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-unicorn-checkbox" name="fantasy.unicorn.enabled" />
                                <label for="fantasy-unicorn-checkbox" class="checkbox-label">独角兽</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-griffin-checkbox" name="fantasy.griffin.enabled" />
                                <label for="fantasy-griffin-checkbox" class="checkbox-label">狮鹫</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-pegasus-checkbox" name="fantasy.pegasus.enabled" />
                                <label for="fantasy-pegasus-checkbox" class="checkbox-label">飞马</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-kraken-checkbox" name="fantasy.kraken.enabled" />
                                <label for="fantasy-kraken-checkbox" class="checkbox-label">海妖</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-chimera-checkbox" name="fantasy.chimera.enabled" />
                                <label for="fantasy-chimera-checkbox" class="checkbox-label">奇美拉</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-basilisk-checkbox" name="fantasy.basilisk.enabled" />
                                <label for="fantasy-basilisk-checkbox" class="checkbox-label">蛇怪</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-hydra-checkbox" name="fantasy.hydra.enabled" />
                                <label for="fantasy-hydra-checkbox" class="checkbox-label">九头蛇</label>
                            </div>
                        </div>
                    </div>

                    <!-- 神器装备 -->
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-legendary-weapon-checkbox" name="fantasy.legendaryWeapon.enabled" />
                                <label for="fantasy-legendary-weapon-checkbox" class="checkbox-label">传说武器</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-magic-armor-checkbox" name="fantasy.magicArmor.enabled" />
                                <label for="fantasy-magic-armor-checkbox" class="checkbox-label">魔法护甲</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-artifact-checkbox" name="fantasy.artifact.enabled" />
                                <label for="fantasy-artifact-checkbox" class="checkbox-label">神器</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-relic-checkbox" name="fantasy.relic.enabled" />
                                <label for="fantasy-relic-checkbox" class="checkbox-label">圣遗物</label>
                            </div>
                        </div>
                    </div>

                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-magic-crystal-checkbox" name="fantasy.magicCrystal.enabled" />
                                <label for="fantasy-magic-crystal-checkbox" class="checkbox-label">魔法水晶</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-enchanted-item-checkbox" name="fantasy.enchantedItem.enabled" />
                                <label for="fantasy-enchanted-item-checkbox" class="checkbox-label">附魔物品</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-potion-checkbox" name="fantasy.potion.enabled" />
                                <label for="fantasy-potion-checkbox" class="checkbox-label">魔法药剂</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="fantasy-scroll-checkbox" name="fantasy.scroll.enabled" />
                                <label for="fantasy-scroll-checkbox" class="checkbox-label">魔法卷轴</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建都市现代面板
     */
    createModernPanel() {
        return `
            <div class="content-header">
                <h3>都市现代配置</h3>
            </div>

            <div class="content-body">
                <!-- 都市现代卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🏙️</div>
                            <div class="card-text">
                                <div class="card-title">都市现代</div>
                                <div class="card-subtitle">现代都市生活设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="modern-toggle" name="modern.enabled" checked />
                                <label for="modern-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">8/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <div class="config-section">
                    <h4>🏙️ 城市生活</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-city-checkbox" name="modern.city.enabled" checked />
                                <label for="modern-city-checkbox" class="checkbox-label">居住城市</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-district-checkbox" name="modern.district.enabled" checked />
                                <label for="modern-district-checkbox" class="checkbox-label">所在区域</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-housing-checkbox" name="modern.housing.enabled" />
                                <label for="modern-housing-checkbox" class="checkbox-label">住房类型</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-transport-checkbox" name="modern.transport.enabled" checked />
                                <label for="modern-transport-checkbox" class="checkbox-label">交通方式</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-neighborhood-checkbox" name="modern.neighborhood.enabled" />
                                <label for="modern-neighborhood-checkbox" class="checkbox-label">社区环境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-facilities-checkbox" name="modern.facilities.enabled" />
                                <label for="modern-facilities-checkbox" class="checkbox-label">周边设施</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-cost-checkbox" name="modern.cost.enabled" />
                                <label for="modern-cost-checkbox" class="checkbox-label">生活成本</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-safety-checkbox" name="modern.safety.enabled" />
                                <label for="modern-safety-checkbox" class="checkbox-label">安全指数</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-pollution-checkbox" name="modern.pollution.enabled" />
                                <label for="modern-pollution-checkbox" class="checkbox-label">环境质量</label>
                            </div>
                        </div>
                    </div>

                    <h4>💼 职业发展</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-job-checkbox" name="modern.job.enabled" checked />
                                <label for="modern-job-checkbox" class="checkbox-label">当前职业</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-company-checkbox" name="modern.company.enabled" />
                                <label for="modern-company-checkbox" class="checkbox-label">工作单位</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-position-checkbox" name="modern.position.enabled" />
                                <label for="modern-position-checkbox" class="checkbox-label">职位级别</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-income-checkbox" name="modern.income.enabled" checked />
                                <label for="modern-income-checkbox" class="checkbox-label">收入水平</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-worktime-checkbox" name="modern.worktime.enabled" />
                                <label for="modern-worktime-checkbox" class="checkbox-label">工作时间</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-benefits-checkbox" name="modern.benefits.enabled" />
                                <label for="modern-benefits-checkbox" class="checkbox-label">福利待遇</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-career-checkbox" name="modern.career.enabled" />
                                <label for="modern-career-checkbox" class="checkbox-label">职业规划</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-skills-checkbox" name="modern.skills.enabled" />
                                <label for="modern-skills-checkbox" class="checkbox-label">专业技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-education-checkbox" name="modern.education.enabled" />
                                <label for="modern-education-checkbox" class="checkbox-label">教育背景</label>
                            </div>
                        </div>
                    </div>

                    <h4>📱 科技生活</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-smartphone-checkbox" name="modern.smartphone.enabled" checked />
                                <label for="modern-smartphone-checkbox" class="checkbox-label">智能手机</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-computer-checkbox" name="modern.computer.enabled" />
                                <label for="modern-computer-checkbox" class="checkbox-label">电脑设备</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-internet-checkbox" name="modern.internet.enabled" />
                                <label for="modern-internet-checkbox" class="checkbox-label">网络使用</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-social-checkbox" name="modern.social.enabled" checked />
                                <label for="modern-social-checkbox" class="checkbox-label">社交媒体</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-gaming-checkbox" name="modern.gaming.enabled" />
                                <label for="modern-gaming-checkbox" class="checkbox-label">游戏娱乐</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-streaming-checkbox" name="modern.streaming.enabled" />
                                <label for="modern-streaming-checkbox" class="checkbox-label">视频平台</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-shopping-checkbox" name="modern.shopping.enabled" />
                                <label for="modern-shopping-checkbox" class="checkbox-label">在线购物</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-payment-checkbox" name="modern.payment.enabled" />
                                <label for="modern-payment-checkbox" class="checkbox-label">移动支付</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-ai-checkbox" name="modern.ai.enabled" />
                                <label for="modern-ai-checkbox" class="checkbox-label">AI助手</label>
                            </div>
                        </div>
                    </div>

                    <h4>🏥 健康管理</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-health-checkbox" name="modern.health.enabled" />
                                <label for="modern-health-checkbox" class="checkbox-label">健康状况</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-fitness-checkbox" name="modern.fitness.enabled" />
                                <label for="modern-fitness-checkbox" class="checkbox-label">健身习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-diet-checkbox" name="modern.diet.enabled" />
                                <label for="modern-diet-checkbox" class="checkbox-label">饮食习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-sleep-checkbox" name="modern.sleep.enabled" />
                                <label for="modern-sleep-checkbox" class="checkbox-label">睡眠质量</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-medical-checkbox" name="modern.medical.enabled" />
                                <label for="modern-medical-checkbox" class="checkbox-label">医疗保险</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-stress-checkbox" name="modern.stress.enabled" />
                                <label for="modern-stress-checkbox" class="checkbox-label">压力管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-mental-checkbox" name="modern.mental.enabled" />
                                <label for="modern-mental-checkbox" class="checkbox-label">心理健康</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-checkup-checkbox" name="modern.checkup.enabled" />
                                <label for="modern-checkup-checkbox" class="checkbox-label">定期体检</label>
                            </div>
                        </div>
                    </div>

                    <h4>🛍️ 消费习惯</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-budget-checkbox" name="modern.budget.enabled" />
                                <label for="modern-budget-checkbox" class="checkbox-label">消费预算</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-brands-checkbox" name="modern.brands.enabled" />
                                <label for="modern-brands-checkbox" class="checkbox-label">品牌偏好</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-fashion-checkbox" name="modern.fashion.enabled" />
                                <label for="modern-fashion-checkbox" class="checkbox-label">时尚风格</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-luxury-checkbox" name="modern.luxury.enabled" />
                                <label for="modern-luxury-checkbox" class="checkbox-label">奢侈品消费</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-investment-checkbox" name="modern.investment.enabled" />
                                <label for="modern-investment-checkbox" class="checkbox-label">投资理财</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-saving-checkbox" name="modern.saving.enabled" />
                                <label for="modern-saving-checkbox" class="checkbox-label">储蓄习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-credit-checkbox" name="modern.credit.enabled" />
                                <label for="modern-credit-checkbox" class="checkbox-label">信用记录</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-insurance-checkbox" name="modern.insurance.enabled" />
                                <label for="modern-insurance-checkbox" class="checkbox-label">保险配置</label>
                            </div>
                        </div>
                    </div>

                    <h4>🎭 娱乐休闲</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-movies-checkbox" name="modern.movies.enabled" />
                                <label for="modern-movies-checkbox" class="checkbox-label">电影偏好</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-music-checkbox" name="modern.music.enabled" />
                                <label for="modern-music-checkbox" class="checkbox-label">音乐品味</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-books-checkbox" name="modern.books.enabled" />
                                <label for="modern-books-checkbox" class="checkbox-label">阅读习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-travel-checkbox" name="modern.travel.enabled" />
                                <label for="modern-travel-checkbox" class="checkbox-label">旅行经历</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-sports-checkbox" name="modern.sports.enabled" />
                                <label for="modern-sports-checkbox" class="checkbox-label">运动爱好</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-hobbies-checkbox" name="modern.hobbies.enabled" />
                                <label for="modern-hobbies-checkbox" class="checkbox-label">兴趣爱好</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-clubs-checkbox" name="modern.clubs.enabled" />
                                <label for="modern-clubs-checkbox" class="checkbox-label">社团活动</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="modern-events-checkbox" name="modern.events.enabled" />
                                <label for="modern-events-checkbox" class="checkbox-label">活动参与</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建历史古代面板
     */
    createHistoricalPanel() {
        return `
            <div class="content-header">
                <h3>历史古代配置</h3>
            </div>

            <div class="content-body">
                <!-- 历史古代卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🏛️</div>
                            <div class="card-text">
                                <div class="card-title">历史古代</div>
                                <div class="card-subtitle">古代历史背景设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="historical-toggle" name="historical.enabled" checked />
                                <label for="historical-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">7/52 项已配置</span>
                        </div>
                    </div>
                </div>

                <div class="config-section">
                    <h4>🏛️ 朝代背景</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-dynasty-checkbox" name="historical.dynasty.enabled" checked />
                                <label for="historical-dynasty-checkbox" class="checkbox-label">历史朝代</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-period-checkbox" name="historical.period.enabled" checked />
                                <label for="historical-period-checkbox" class="checkbox-label">历史时期</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-emperor-checkbox" name="historical.emperor.enabled" />
                                <label for="historical-emperor-checkbox" class="checkbox-label">在位皇帝</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-capital-checkbox" name="historical.capital.enabled" />
                                <label for="historical-capital-checkbox" class="checkbox-label">都城位置</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-region-checkbox" name="historical.region.enabled" />
                                <label for="historical-region-checkbox" class="checkbox-label">所在州府</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-events-checkbox" name="historical.events.enabled" />
                                <label for="historical-events-checkbox" class="checkbox-label">重大事件</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-wars-checkbox" name="historical.wars.enabled" />
                                <label for="historical-wars-checkbox" class="checkbox-label">战争背景</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-politics-checkbox" name="historical.politics.enabled" />
                                <label for="historical-politics-checkbox" class="checkbox-label">政治环境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-economy-checkbox" name="historical.economy.enabled" />
                                <label for="historical-economy-checkbox" class="checkbox-label">经济状况</label>
                            </div>
                        </div>
                    </div>

                    <h4>👑 社会地位</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-class-checkbox" name="historical.class.enabled" checked />
                                <label for="historical-class-checkbox" class="checkbox-label">社会阶层</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-title-checkbox" name="historical.title.enabled" />
                                <label for="historical-title-checkbox" class="checkbox-label">官职爵位</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-family-checkbox" name="historical.family.enabled" checked />
                                <label for="historical-family-checkbox" class="checkbox-label">家族背景</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-wealth-checkbox" name="historical.wealth.enabled" />
                                <label for="historical-wealth-checkbox" class="checkbox-label">财富状况</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-land-checkbox" name="historical.land.enabled" />
                                <label for="historical-land-checkbox" class="checkbox-label">土地财产</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-servants-checkbox" name="historical.servants.enabled" />
                                <label for="historical-servants-checkbox" class="checkbox-label">仆从随从</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-influence-checkbox" name="historical.influence.enabled" />
                                <label for="historical-influence-checkbox" class="checkbox-label">政治影响</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-reputation-checkbox" name="historical.reputation.enabled" />
                                <label for="historical-reputation-checkbox" class="checkbox-label">社会声望</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-connections-checkbox" name="historical.connections.enabled" />
                                <label for="historical-connections-checkbox" class="checkbox-label">人脉关系</label>
                            </div>
                        </div>
                    </div>

                    <h4>📚 文化修养</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-education-checkbox" name="historical.education.enabled" checked />
                                <label for="historical-education-checkbox" class="checkbox-label">教育程度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-poetry-checkbox" name="historical.poetry.enabled" />
                                <label for="historical-poetry-checkbox" class="checkbox-label">诗词歌赋</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-calligraphy-checkbox" name="historical.calligraphy.enabled" />
                                <label for="historical-calligraphy-checkbox" class="checkbox-label">书法绘画</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-music-checkbox" name="historical.music.enabled" />
                                <label for="historical-music-checkbox" class="checkbox-label">音律乐器</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-chess-checkbox" name="historical.chess.enabled" />
                                <label for="historical-chess-checkbox" class="checkbox-label">棋艺博弈</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-classics-checkbox" name="historical.classics.enabled" />
                                <label for="historical-classics-checkbox" class="checkbox-label">经史子集</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-philosophy-checkbox" name="historical.philosophy.enabled" />
                                <label for="historical-philosophy-checkbox" class="checkbox-label">哲学思想</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-etiquette-checkbox" name="historical.etiquette.enabled" />
                                <label for="historical-etiquette-checkbox" class="checkbox-label">礼仪规范</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-language-checkbox" name="historical.language.enabled" />
                                <label for="historical-language-checkbox" class="checkbox-label">语言文字</label>
                            </div>
                        </div>
                    </div>

                    <h4>⚔️ 武艺技能</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-martial-checkbox" name="historical.martial.enabled" checked />
                                <label for="historical-martial-checkbox" class="checkbox-label">武艺水平</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-weapons-checkbox" name="historical.weapons.enabled" />
                                <label for="historical-weapons-checkbox" class="checkbox-label">兵器使用</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-archery-checkbox" name="historical.archery.enabled" />
                                <label for="historical-archery-checkbox" class="checkbox-label">弓箭射术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-horsemanship-checkbox" name="historical.horsemanship.enabled" />
                                <label for="historical-horsemanship-checkbox" class="checkbox-label">骑术马术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-strategy-checkbox" name="historical.strategy.enabled" />
                                <label for="historical-strategy-checkbox" class="checkbox-label">兵法战略</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-bodyguard-checkbox" name="historical.bodyguard.enabled" />
                                <label for="historical-bodyguard-checkbox" class="checkbox-label">护卫技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-hunting-checkbox" name="historical.hunting.enabled" />
                                <label for="historical-hunting-checkbox" class="checkbox-label">狩猎技巧</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-survival-checkbox" name="historical.survival.enabled" />
                                <label for="historical-survival-checkbox" class="checkbox-label">野外生存</label>
                            </div>
                        </div>
                    </div>

                    <h4>🏠 生活方式</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-residence-checkbox" name="historical.residence.enabled" />
                                <label for="historical-residence-checkbox" class="checkbox-label">居住环境</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-clothing-checkbox" name="historical.clothing.enabled" checked />
                                <label for="historical-clothing-checkbox" class="checkbox-label">服饰穿着</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-food-checkbox" name="historical.food.enabled" />
                                <label for="historical-food-checkbox" class="checkbox-label">饮食习惯</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-transport-checkbox" name="historical.transport.enabled" />
                                <label for="historical-transport-checkbox" class="checkbox-label">出行方式</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-entertainment-checkbox" name="historical.entertainment.enabled" />
                                <label for="historical-entertainment-checkbox" class="checkbox-label">娱乐活动</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-festivals-checkbox" name="historical.festivals.enabled" />
                                <label for="historical-festivals-checkbox" class="checkbox-label">节庆习俗</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-religion-checkbox" name="historical.religion.enabled" />
                                <label for="historical-religion-checkbox" class="checkbox-label">宗教信仰</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-medicine-checkbox" name="historical.medicine.enabled" />
                                <label for="historical-medicine-checkbox" class="checkbox-label">医药知识</label>
                            </div>
                        </div>
                    </div>

                    <h4>💼 职业技能</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-profession-checkbox" name="historical.profession.enabled" checked />
                                <label for="historical-profession-checkbox" class="checkbox-label">职业身份</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-crafts-checkbox" name="historical.crafts.enabled" />
                                <label for="historical-crafts-checkbox" class="checkbox-label">手工技艺</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-trade-checkbox" name="historical.trade.enabled" />
                                <label for="historical-trade-checkbox" class="checkbox-label">商贸经营</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-farming-checkbox" name="historical.farming.enabled" />
                                <label for="historical-farming-checkbox" class="checkbox-label">农业种植</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-administration-checkbox" name="historical.administration.enabled" />
                                <label for="historical-administration-checkbox" class="checkbox-label">行政管理</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-teaching-checkbox" name="historical.teaching.enabled" />
                                <label for="historical-teaching-checkbox" class="checkbox-label">教学传授</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-healing-checkbox" name="historical.healing.enabled" />
                                <label for="historical-healing-checkbox" class="checkbox-label">医术治疗</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="historical-construction-checkbox" name="historical.construction.enabled" />
                                <label for="historical-construction-checkbox" class="checkbox-label">建筑营造</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建魔法能力面板
     */
    createMagicPanel() {
        return `
            <div class="content-header">
                <h3>魔法能力配置</h3>
            </div>

            <div class="content-body">
                <!-- 魔法能力卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🔮</div>
                            <div class="card-text">
                                <div class="card-title">魔法能力</div>
                                <div class="card-subtitle">魔法系统能力设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="magic-toggle" name="magic.enabled" checked />
                                <label for="magic-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">9/53 项已配置</span>
                        </div>
                    </div>
                </div>

                <div class="config-section">
                    <h4>🔮 魔法学派</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-evocation-checkbox" name="magic.evocation.enabled" checked />
                                <label for="magic-evocation-checkbox" class="checkbox-label">塑能系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-illusion-checkbox" name="magic.illusion.enabled" checked />
                                <label for="magic-illusion-checkbox" class="checkbox-label">幻术系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-enchantment-checkbox" name="magic.enchantment.enabled" />
                                <label for="magic-enchantment-checkbox" class="checkbox-label">惑控系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-necromancy-checkbox" name="magic.necromancy.enabled" />
                                <label for="magic-necromancy-checkbox" class="checkbox-label">死灵系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-divination-checkbox" name="magic.divination.enabled" />
                                <label for="magic-divination-checkbox" class="checkbox-label">预言系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-transmutation-checkbox" name="magic.transmutation.enabled" />
                                <label for="magic-transmutation-checkbox" class="checkbox-label">变化系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-conjuration-checkbox" name="magic.conjuration.enabled" />
                                <label for="magic-conjuration-checkbox" class="checkbox-label">咒法系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-abjuration-checkbox" name="magic.abjuration.enabled" />
                                <label for="magic-abjuration-checkbox" class="checkbox-label">防护系</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-elemental-checkbox" name="magic.elemental.enabled" />
                                <label for="magic-elemental-checkbox" class="checkbox-label">元素系</label>
                            </div>
                        </div>
                    </div>

                    <h4>⚡ 法术等级</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-cantrip-checkbox" name="magic.cantrip.enabled" checked />
                                <label for="magic-cantrip-checkbox" class="checkbox-label">戏法(0环)</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level1-checkbox" name="magic.level1.enabled" checked />
                                <label for="magic-level1-checkbox" class="checkbox-label">1环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level2-checkbox" name="magic.level2.enabled" />
                                <label for="magic-level2-checkbox" class="checkbox-label">2环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level3-checkbox" name="magic.level3.enabled" />
                                <label for="magic-level3-checkbox" class="checkbox-label">3环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level4-checkbox" name="magic.level4.enabled" />
                                <label for="magic-level4-checkbox" class="checkbox-label">4环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level5-checkbox" name="magic.level5.enabled" />
                                <label for="magic-level5-checkbox" class="checkbox-label">5环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level6-checkbox" name="magic.level6.enabled" />
                                <label for="magic-level6-checkbox" class="checkbox-label">6环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level7-checkbox" name="magic.level7.enabled" />
                                <label for="magic-level7-checkbox" class="checkbox-label">7环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level8-checkbox" name="magic.level8.enabled" />
                                <label for="magic-level8-checkbox" class="checkbox-label">8环法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level9-checkbox" name="magic.level9.enabled" />
                                <label for="magic-level9-checkbox" class="checkbox-label">9环法术</label>
                            </div>
                        </div>
                    </div>

                    <h4>🧙 法师属性</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-level-checkbox" name="magic.level.enabled" checked />
                                <label for="magic-level-checkbox" class="checkbox-label">法师等级</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-mana-checkbox" name="magic.mana.enabled" checked />
                                <label for="magic-mana-checkbox" class="checkbox-label">法力值</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-intelligence-checkbox" name="magic.intelligence.enabled" />
                                <label for="magic-intelligence-checkbox" class="checkbox-label">智力属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-wisdom-checkbox" name="magic.wisdom.enabled" />
                                <label for="magic-wisdom-checkbox" class="checkbox-label">感知属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-charisma-checkbox" name="magic.charisma.enabled" />
                                <label for="magic-charisma-checkbox" class="checkbox-label">魅力属性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-concentration-checkbox" name="magic.concentration.enabled" />
                                <label for="magic-concentration-checkbox" class="checkbox-label">专注能力</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-spellpower-checkbox" name="magic.spellpower.enabled" />
                                <label for="magic-spellpower-checkbox" class="checkbox-label">法术强度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-resistance-checkbox" name="magic.resistance.enabled" />
                                <label for="magic-resistance-checkbox" class="checkbox-label">魔法抗性</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-regeneration-checkbox" name="magic.regeneration.enabled" />
                                <label for="magic-regeneration-checkbox" class="checkbox-label">法力回复</label>
                            </div>
                        </div>
                    </div>

                    <h4>📚 法术书库</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-spellbook-checkbox" name="magic.spellbook.enabled" checked />
                                <label for="magic-spellbook-checkbox" class="checkbox-label">法术书</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-known-checkbox" name="magic.known.enabled" />
                                <label for="magic-known-checkbox" class="checkbox-label">已知法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-prepared-checkbox" name="magic.prepared.enabled" />
                                <label for="magic-prepared-checkbox" class="checkbox-label">准备法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-slots-checkbox" name="magic.slots.enabled" />
                                <label for="magic-slots-checkbox" class="checkbox-label">法术位</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-components-checkbox" name="magic.components.enabled" />
                                <label for="magic-components-checkbox" class="checkbox-label">法术材料</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-rituals-checkbox" name="magic.rituals.enabled" />
                                <label for="magic-rituals-checkbox" class="checkbox-label">仪式法术</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-metamagic-checkbox" name="magic.metamagic.enabled" />
                                <label for="magic-metamagic-checkbox" class="checkbox-label">超魔专长</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-scrolls-checkbox" name="magic.scrolls.enabled" />
                                <label for="magic-scrolls-checkbox" class="checkbox-label">法术卷轴</label>
                            </div>
                        </div>
                    </div>

                    <h4>🔥 元素魔法</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-fire-checkbox" name="magic.fire.enabled" checked />
                                <label for="magic-fire-checkbox" class="checkbox-label">火系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-water-checkbox" name="magic.water.enabled" />
                                <label for="magic-water-checkbox" class="checkbox-label">水系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-earth-checkbox" name="magic.earth.enabled" />
                                <label for="magic-earth-checkbox" class="checkbox-label">土系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-air-checkbox" name="magic.air.enabled" />
                                <label for="magic-air-checkbox" class="checkbox-label">风系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-lightning-checkbox" name="magic.lightning.enabled" />
                                <label for="magic-lightning-checkbox" class="checkbox-label">雷系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-ice-checkbox" name="magic.ice.enabled" />
                                <label for="magic-ice-checkbox" class="checkbox-label">冰系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-light-checkbox" name="magic.light.enabled" />
                                <label for="magic-light-checkbox" class="checkbox-label">光系魔法</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-dark-checkbox" name="magic.dark.enabled" />
                                <label for="magic-dark-checkbox" class="checkbox-label">暗系魔法</label>
                            </div>
                        </div>
                    </div>

                    <h4>🛡️ 魔法装备</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-staff-checkbox" name="magic.staff.enabled" />
                                <label for="magic-staff-checkbox" class="checkbox-label">法杖</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-wand-checkbox" name="magic.wand.enabled" />
                                <label for="magic-wand-checkbox" class="checkbox-label">魔杖</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-orb-checkbox" name="magic.orb.enabled" />
                                <label for="magic-orb-checkbox" class="checkbox-label">法球</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-robe-checkbox" name="magic.robe.enabled" />
                                <label for="magic-robe-checkbox" class="checkbox-label">法袍</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-amulet-checkbox" name="magic.amulet.enabled" />
                                <label for="magic-amulet-checkbox" class="checkbox-label">护身符</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-ring-checkbox" name="magic.ring.enabled" />
                                <label for="magic-ring-checkbox" class="checkbox-label">魔法戒指</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-crystal-checkbox" name="magic.crystal.enabled" />
                                <label for="magic-crystal-checkbox" class="checkbox-label">魔法水晶</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="magic-tome-checkbox" name="magic.tome.enabled" />
                                <label for="magic-tome-checkbox" class="checkbox-label">魔法典籍</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    /**
     * 创建调教系统面板
     */
    createTrainingPanel() {
        return `
            <div class="content-header">
                <h3>调教系统配置</h3>
            </div>

            <div class="content-body">
                <!-- 调教系统卡片 -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-info-left">
                            <div class="card-icon">🎯</div>
                            <div class="card-text">
                                <div class="card-title">调教系统</div>
                                <div class="card-subtitle">训练系统功能设定</div>
                            </div>
                        </div>
                        <div class="card-toggle">
                            <div class="toggle-switch">
                                <input type="checkbox" id="training-toggle" name="training.enabled" checked />
                                <label for="training-toggle" class="switch-slider"></label>
                            </div>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="card-status">
                            <span class="status-badge enabled">已启用</span>
                            <span class="status-count">6/51 项已配置</span>
                        </div>
                    </div>
                </div>

                <div class="config-section">
                    <h4>📚 基础训练</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-obedience-checkbox" name="training.obedience.enabled" checked />
                                <label for="training-obedience-checkbox" class="checkbox-label">服从训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-discipline-checkbox" name="training.discipline.enabled" checked />
                                <label for="training-discipline-checkbox" class="checkbox-label">纪律训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-etiquette-checkbox" name="training.etiquette.enabled" />
                                <label for="training-etiquette-checkbox" class="checkbox-label">礼仪训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-posture-checkbox" name="training.posture.enabled" />
                                <label for="training-posture-checkbox" class="checkbox-label">姿态训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-speech-checkbox" name="training.speech.enabled" />
                                <label for="training-speech-checkbox" class="checkbox-label">言语训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-behavior-checkbox" name="training.behavior.enabled" />
                                <label for="training-behavior-checkbox" class="checkbox-label">行为规范</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-attention-checkbox" name="training.attention.enabled" />
                                <label for="training-attention-checkbox" class="checkbox-label">注意力训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-patience-checkbox" name="training.patience.enabled" />
                                <label for="training-patience-checkbox" class="checkbox-label">耐心训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-focus-checkbox" name="training.focus.enabled" />
                                <label for="training-focus-checkbox" class="checkbox-label">专注训练</label>
                            </div>
                        </div>
                    </div>

                    <h4>🎯 技能训练</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-service-checkbox" name="training.service.enabled" checked />
                                <label for="training-service-checkbox" class="checkbox-label">服务技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-cooking-checkbox" name="training.cooking.enabled" />
                                <label for="training-cooking-checkbox" class="checkbox-label">烹饪技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-cleaning-checkbox" name="training.cleaning.enabled" />
                                <label for="training-cleaning-checkbox" class="checkbox-label">清洁技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-massage-checkbox" name="training.massage.enabled" />
                                <label for="training-massage-checkbox" class="checkbox-label">按摩技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-entertainment-checkbox" name="training.entertainment.enabled" />
                                <label for="training-entertainment-checkbox" class="checkbox-label">娱乐技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-music-checkbox" name="training.music.enabled" />
                                <label for="training-music-checkbox" class="checkbox-label">音乐技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-dance-checkbox" name="training.dance.enabled" />
                                <label for="training-dance-checkbox" class="checkbox-label">舞蹈技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-art-checkbox" name="training.art.enabled" />
                                <label for="training-art-checkbox" class="checkbox-label">艺术技能</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-language-checkbox" name="training.language.enabled" />
                                <label for="training-language-checkbox" class="checkbox-label">语言技能</label>
                            </div>
                        </div>
                    </div>

                    <h4>💪 体能训练</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-strength-checkbox" name="training.strength.enabled" />
                                <label for="training-strength-checkbox" class="checkbox-label">力量训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-endurance-checkbox" name="training.endurance.enabled" />
                                <label for="training-endurance-checkbox" class="checkbox-label">耐力训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-flexibility-checkbox" name="training.flexibility.enabled" />
                                <label for="training-flexibility-checkbox" class="checkbox-label">柔韧训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-balance-checkbox" name="training.balance.enabled" />
                                <label for="training-balance-checkbox" class="checkbox-label">平衡训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-coordination-checkbox" name="training.coordination.enabled" />
                                <label for="training-coordination-checkbox" class="checkbox-label">协调训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-agility-checkbox" name="training.agility.enabled" />
                                <label for="training-agility-checkbox" class="checkbox-label">敏捷训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-stamina-checkbox" name="training.stamina.enabled" />
                                <label for="training-stamina-checkbox" class="checkbox-label">体力训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-recovery-checkbox" name="training.recovery.enabled" />
                                <label for="training-recovery-checkbox" class="checkbox-label">恢复训练</label>
                            </div>
                        </div>
                    </div>

                    <h4>🧠 心理训练</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-confidence-checkbox" name="training.confidence.enabled" checked />
                                <label for="training-confidence-checkbox" class="checkbox-label">自信训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-stress-checkbox" name="training.stress.enabled" />
                                <label for="training-stress-checkbox" class="checkbox-label">抗压训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-emotion-checkbox" name="training.emotion.enabled" />
                                <label for="training-emotion-checkbox" class="checkbox-label">情绪控制</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-memory-checkbox" name="training.memory.enabled" />
                                <label for="training-memory-checkbox" class="checkbox-label">记忆训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-logic-checkbox" name="training.logic.enabled" />
                                <label for="training-logic-checkbox" class="checkbox-label">逻辑训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-creativity-checkbox" name="training.creativity.enabled" />
                                <label for="training-creativity-checkbox" class="checkbox-label">创造力训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-meditation-checkbox" name="training.meditation.enabled" />
                                <label for="training-meditation-checkbox" class="checkbox-label">冥想训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-mindfulness-checkbox" name="training.mindfulness.enabled" />
                                <label for="training-mindfulness-checkbox" class="checkbox-label">正念训练</label>
                            </div>
                        </div>
                    </div>

                    <h4>⚙️ 训练设置</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-intensity-checkbox" name="training.intensity.enabled" checked />
                                <label for="training-intensity-checkbox" class="checkbox-label">训练强度</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-duration-checkbox" name="training.duration.enabled" />
                                <label for="training-duration-checkbox" class="checkbox-label">训练时长</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-frequency-checkbox" name="training.frequency.enabled" />
                                <label for="training-frequency-checkbox" class="checkbox-label">训练频率</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-progress-checkbox" name="training.progress.enabled" />
                                <label for="training-progress-checkbox" class="checkbox-label">进度跟踪</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-rewards-checkbox" name="training.rewards.enabled" />
                                <label for="training-rewards-checkbox" class="checkbox-label">奖励系统</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-punishment-checkbox" name="training.punishment.enabled" />
                                <label for="training-punishment-checkbox" class="checkbox-label">惩罚机制</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-schedule-checkbox" name="training.schedule.enabled" />
                                <label for="training-schedule-checkbox" class="checkbox-label">训练计划</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-evaluation-checkbox" name="training.evaluation.enabled" />
                                <label for="training-evaluation-checkbox" class="checkbox-label">效果评估</label>
                            </div>
                        </div>
                    </div>

                    <h4>📊 高级功能</h4>
                    <div class="sub-item-row">
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-auto-checkbox" name="training.auto.enabled" checked />
                                <label for="training-auto-checkbox" class="checkbox-label">自动训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-adaptive-checkbox" name="training.adaptive.enabled" />
                                <label for="training-adaptive-checkbox" class="checkbox-label">自适应训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-ai-checkbox" name="training.ai.enabled" />
                                <label for="training-ai-checkbox" class="checkbox-label">AI辅助训练</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-analytics-checkbox" name="training.analytics.enabled" />
                                <label for="training-analytics-checkbox" class="checkbox-label">数据分析</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-reports-checkbox" name="training.reports.enabled" />
                                <label for="training-reports-checkbox" class="checkbox-label">训练报告</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-export-checkbox" name="training.export.enabled" />
                                <label for="training-export-checkbox" class="checkbox-label">数据导出</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-backup-checkbox" name="training.backup.enabled" />
                                <label for="training-backup-checkbox" class="checkbox-label">数据备份</label>
                            </div>
                        </div>
                        <div class="sub-item">
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="training-sync-checkbox" name="training.sync.enabled" />
                                <label for="training-sync-checkbox" class="checkbox-label">云端同步</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 错误处理
     */
    handleError(error) {
        this.errorCount++;
        console.error(`[InfoBarSettings] ❌ 错误 #${this.errorCount}:`, error);
    }

    /**
     * 创建主题预览网格
     */
    createThemePreviewGrid() {
        const themes = [
            {
                id: 'default-dark',
                name: '默认深色',
                description: '经典深色主题，护眼舒适',
                colors: { bg: '#1a1a1a', text: '#ffffff', primary: '#007bff', border: '#333' }
            },
            {
                id: 'default-light',
                name: '默认浅色',
                description: '清新浅色主题，简洁明亮',
                colors: { bg: '#ffffff', text: '#333333', primary: '#007bff', border: '#dee2e6' }
            },
            {
                id: 'ocean-blue',
                name: '海洋蓝',
                description: '深邃海洋风格，宁静专注',
                colors: { bg: '#0f1419', text: '#e6fffa', primary: '#00d4aa', border: '#1e3a8a' }
            },
            {
                id: 'forest-green',
                name: '森林绿',
                description: '自然森林风格，清新护眼',
                colors: { bg: '#0d1b0d', text: '#e8f5e8', primary: '#22c55e', border: '#166534' }
            },
            {
                id: 'sunset-orange',
                name: '夕阳橙',
                description: '温暖夕阳风格，活力四射',
                colors: { bg: '#1a0f0a', text: '#fff7ed', primary: '#f97316', border: '#c2410c' }
            },
            {
                id: 'purple-night',
                name: '紫夜',
                description: '神秘紫色风格，优雅高贵',
                colors: { bg: '#1a0f1a', text: '#f3e8ff', primary: '#a855f7', border: '#7c3aed' }
            },
            {
                id: 'cherry-blossom',
                name: '樱花粉',
                description: '浪漫樱花风格，温柔甜美',
                colors: { bg: '#fdf2f8', text: '#831843', primary: '#ec4899', border: '#f9a8d4' }
            },
            {
                id: 'golden-sand',
                name: '金沙',
                description: '奢华金色风格，典雅大气',
                colors: { bg: '#1a1611', text: '#fef3c7', primary: '#f59e0b', border: '#d97706' }
            },
            {
                id: 'ice-blue',
                name: '冰蓝',
                description: '清冷冰蓝风格，冷静理性',
                colors: { bg: '#0f1419', text: '#e0f2fe', primary: '#0ea5e9', border: '#0284c7' }
            },
            {
                id: 'rose-red',
                name: '玫瑰红',
                description: '热情玫瑰风格，浪漫激情',
                colors: { bg: '#1a0a0a', text: '#ffe4e6', primary: '#e11d48', border: '#be123c' }
            },
            {
                id: 'mint-green',
                name: '薄荷绿',
                description: '清新薄荷风格，舒缓放松',
                colors: { bg: '#f0fdf4', text: '#14532d', primary: '#10b981', border: '#a7f3d0' }
            },
            {
                id: 'lavender',
                name: '薰衣草',
                description: '淡雅薰衣草风格，宁静安详',
                colors: { bg: '#faf5ff', text: '#581c87', primary: '#8b5cf6', border: '#c4b5fd' }
            },
            {
                id: 'coffee-brown',
                name: '咖啡棕',
                description: '温暖咖啡风格，沉稳内敛',
                colors: { bg: '#1c1917', text: '#fef7ed', primary: '#a16207', border: '#78716c' }
            },
            {
                id: 'slate-gray',
                name: '石板灰',
                description: '现代石板风格，简约专业',
                colors: { bg: '#0f172a', text: '#f1f5f9', primary: '#64748b', border: '#475569' }
            },
            {
                id: 'custom',
                name: '自定义',
                description: '创建您的专属主题',
                colors: { bg: '#1a1a1a', text: '#ffffff', primary: '#007bff', border: '#333' }
            }
        ];

        return themes.map(theme => {
            const isActive = theme.id === 'default-dark' ? 'active' : '';
            const isCustom = theme.id === 'custom';
            const currentBadge = theme.id === 'default-dark' ? '<div class="current-badge">当前</div>' : '';

            return `
                <div class="theme-preview-card ${isActive}"
                     data-theme="${theme.id}"
                     data-custom="${isCustom}">
                    <div class="theme-preview-mini" style="background: ${theme.colors.bg}; border: 1px solid ${theme.colors.border};">
                        <div class="preview-header-mini" style="background: ${theme.colors.primary}; color: ${theme.colors.bg};">标题</div>
                        <div class="preview-content-mini" style="color: ${theme.colors.text};">内容</div>
                        <div class="preview-button-mini" style="background: ${theme.colors.primary}; color: ${theme.colors.bg};">按钮</div>
                    </div>
                    <div class="theme-info">
                        <h4>${theme.name}</h4>
                        <p>${theme.description}</p>
                    </div>
                    ${currentBadge}
                </div>
            `;
        }).join('');
    }

    /**
     * 创建信息栏风格预览网格
     */
    createStylePreviewGrid() {
        const styles = [
            {
                id: 'end-generated',
                name: '结尾生成式',
                description: '在对话结尾显示信息栏，不干扰对话流程',
                icon: '📝',
                preview: {
                    layout: 'end',
                    position: 'bottom',
                    integration: 'separate'
                }
            },
            {
                id: 'flat',
                name: '扁平式',
                description: '简洁扁平的顶部栏，支持一键展开/收起',
                icon: '📋',
                preview: {
                    layout: 'flat',
                    position: 'bottom',
                    integration: 'separate'
                }
            },
            {
                id: 'conversation-wrapped',
                name: '对话包裹式',
                description: '将整个对话内容包裹在信息栏框架中',
                icon: '🎁',
                preview: {
                    layout: 'wrapped',
                    position: 'around',
                    integration: 'integrated'
                }
            },
            {
                id: 'sidebar',
                name: '侧边栏式',
                description: '在对话侧边显示固定的信息栏',
                icon: '📋',
                preview: {
                    layout: 'sidebar',
                    position: 'side',
                    integration: 'parallel'
                }
            },
            {
                id: 'floating',
                name: '浮动式',
                description: '悬浮显示的可拖拽信息栏',
                icon: '🎈',
                preview: {
                    layout: 'floating',
                    position: 'overlay',
                    integration: 'independent'
                }
            },
            {
                id: 'embedded',
                name: '内嵌式',
                description: '嵌入到对话内容中的信息栏',
                icon: '🔗',
                preview: {
                    layout: 'embedded',
                    position: 'inline',
                    integration: 'merged'
                }
            },
            {
                id: 'interactive',
                name: '前端交互式',
                description: '功能丰富的交互式信息栏界面，包含按钮、输入框、标签页等',
                icon: '🎛️',
                preview: {
                    layout: 'interactive',
                    position: 'overlay',
                    integration: 'advanced'
                }
            },
            {
                id: 'custom-html',
                name: 'HTML式',
                description: '使用自定义HTML模板渲染信息栏，支持完全自定义的样式和布局',
                icon: '🎨',
                preview: {
                    layout: 'custom',
                    position: 'template',
                    integration: 'html'
                }
            }
        ];

        return styles.map(style => {
            const isActive = style.id === 'end-generated' ? 'active' : '';
            const currentBadge = style.id === 'end-generated' ? '<div class="current-badge">当前</div>' : '';

            return `
                <div class="style-preview-card ${isActive}"
                     data-style="${style.id}">
                    <div class="style-preview-mini">
                        <div class="style-icon">${style.icon}</div>
                        <div class="style-layout-demo">
                            ${this.createStyleLayoutDemo(style.preview)}
                        </div>
                    </div>
                    <div class="style-info">
                        <h4>${style.name}</h4>
                        <p>${style.description}</p>
                    </div>
                    ${currentBadge}
                </div>
            `;
        }).join('');
    }

    /**
     * 创建风格布局演示
     * @param {Object} preview - 预览配置
     */
    createStyleLayoutDemo(preview) {
        switch (preview.layout) {
            case 'end':
                return `
                    <div class="demo-chat">💬</div>
                    <div class="demo-infobar">📊</div>
                `;
            case 'flat':
                return `
                    <div class="demo-chat">💬</div>
                    <div class="demo-infobar">—📊—</div>
                `;
            case 'wrapped':
                return `
                    <div class="demo-wrapper">
                        <div class="demo-chat">💬</div>
                        <div class="demo-frame">📊</div>
                    </div>
                `;
            case 'sidebar':
                return `
                    <div class="demo-layout">
                        <div class="demo-chat">💬</div>
                        <div class="demo-sidebar">📊</div>
                    </div>
                `;
            case 'floating':
                return `
                    <div class="demo-base">💬</div>
                    <div class="demo-float">📊</div>
                `;
            case 'embedded':
                return `
                    <div class="demo-merged">
                        💬📊
                    </div>
                `;
            case 'custom':
                return `
                    <div class="demo-custom">
                        <div class="demo-chat">💬</div>
                        <div class="demo-html">🎨</div>
                    </div>
                `;
            default:
                return `<div class="demo-default">📊</div>`;
        }
    }
    /**
     * 选择主题
     * @param {string} themeId - 主题ID
     */
    async selectTheme(themeId) {
        try {
            console.log('[InfoBarSettings] 🎨 选择主题:', themeId);

            // 获取主题配置
            const theme = this.getThemeById(themeId);
            if (!theme) {
                console.error('[InfoBarSettings] ❌ 未找到主题:', themeId);
                return;
            }

            // 应用主题
            this.applyTheme(theme);

            // 更新主题卡片状态
            this.updateThemeCardStates(themeId);

            // 更新当前主题信息
            this.updateCurrentThemeInfo(theme);

            // 保存主题配置
            await this.saveThemeConfig(themeId);

            console.log('[InfoBarSettings] ✅ 主题切换完成:', theme.name);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 选择主题失败:', error);
        }
    }

    /**
     * 选择信息栏风格
     * @param {string} styleId - 风格ID
     */
    async selectStyle(styleId) {
        try {
            console.log('[InfoBarSettings] 🎭 选择信息栏风格:', styleId);

            // 获取风格配置
            const style = this.getStyleById(styleId);
            if (!style) {
                console.error('[InfoBarSettings] ❌ 未找到风格:', styleId);
                return;
            }

            // 应用风格
            this.applyStyle(style);

            // 更新风格卡片状态
            this.updateStyleCardStates(styleId);

            // 更新当前风格信息
            this.updateCurrentStyleInfo(style);

            // 保存风格配置
            await this.saveStyleConfig(styleId);

            // 刷新所有已渲染的信息栏
            await this.refreshAllInfoBars();

            console.log('[InfoBarSettings] ✅ 风格切换完成:', style.name);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 选择风格失败:', error);
        }
    }

    /**
     * 刷新所有已渲染的信息栏
     */
    async refreshAllInfoBars() {
        try {
            console.log('[InfoBarSettings] 🔄 开始刷新所有信息栏');

            // 获取MessageInfoBarRenderer实例
            const renderer = window.SillyTavernInfobar?.modules?.messageInfoBarRenderer;
            if (renderer && typeof renderer.refreshAllInfoBars === 'function') {
                await renderer.refreshAllInfoBars();
                console.log('[InfoBarSettings] ✅ 信息栏刷新完成');
            } else {
                console.log('[InfoBarSettings] ⚠️ MessageInfoBarRenderer未找到或不支持刷新');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新信息栏失败:', error);
        }
    }

    /**
     * 根据ID获取风格配置
     * @param {string} styleId - 风格ID
     * @returns {Object|null} 风格配置对象
     */
    getStyleById(styleId) {
        const styles = [
            {
                id: 'end-generated',
                name: '结尾生成式',
                description: '在对话结尾显示信息栏，不干扰对话流程',
                config: {
                    position: 'end',
                    layout: 'bottom',
                    integration: 'separate',
                    animation: 'slideUp',
                    autoHide: false,
                    collapsible: true
                }
            },
            {
                id: 'flat',
                name: '扁平式',
                description: '简洁扁平的顶部栏，支持一键展开/收起',
                config: {
                    position: 'end',
                    layout: 'flat',
                    integration: 'separate',
                    animation: 'none',
                    autoHide: false,
                    collapsible: true
                }
            },
            {
                id: 'conversation-wrapped',
                name: '对话包裹式',
                description: '将整个对话内容包裹在信息栏框架中',
                config: {
                    position: 'wrapper',
                    layout: 'frame',
                    integration: 'integrated',
                    animation: 'fadeIn',
                    autoHide: false,
                    collapsible: false
                }
            },
            {
                id: 'sidebar',
                name: '侧边栏式',
                description: '在对话侧边显示固定的信息栏',
                config: {
                    position: 'side',
                    layout: 'vertical',
                    integration: 'parallel',
                    animation: 'slideLeft',
                    autoHide: false,
                    collapsible: true
                }
            },
            {
                id: 'floating',
                name: '浮动式',
                description: '悬浮显示的可拖拽信息栏',
                config: {
                    position: 'overlay',
                    layout: 'floating',
                    integration: 'independent',
                    animation: 'bounce',
                    autoHide: true,
                    collapsible: true,
                    draggable: true
                }
            },
            {
                id: 'embedded',
                name: '内嵌式',
                description: '嵌入到对话内容中的信息栏',
                config: {
                    position: 'inline',
                    layout: 'embedded',
                    integration: 'merged',
                    animation: 'expand',
                    autoHide: false,
                    collapsible: false
                }
            },
            {
                id: 'interactive',
                name: '前端交互式',
                description: '功能丰富的交互式信息栏界面，包含按钮、输入框、标签页等',
                config: {
                    position: 'overlay',
                    layout: 'interactive',
                    integration: 'advanced',
                    animation: 'slideIn',
                    autoHide: false,
                    collapsible: true,
                    draggable: true,
                    resizable: true,
                    tabbed: true,
                    interactive: true
                }
            },
            {
                id: 'custom-html',
                name: 'HTML式',
                description: '使用自定义HTML模板渲染信息栏，支持完全自定义的样式和布局',
                config: {
                    position: 'end',
                    layout: 'custom',
                    integration: 'template',
                    animation: 'fadeIn',
                    autoHide: false,
                    collapsible: true,
                    customTemplate: true,
                    htmlSupport: true,
                    dataBinding: true
                }
            }
        ];

        return styles.find(style => style.id === styleId) || null;
    }

    /**
     * 应用信息栏风格
     * @param {Object} style - 风格配置对象
     */
    applyStyle(style) {
        try {
            console.log('[InfoBarSettings] 🎭 应用信息栏风格:', style.name);

            // 更新全局风格配置
            window.InfoBarStyleConfig = {
                currentStyle: style.id,
                config: style.config,
                timestamp: Date.now()
            };

            // 通过事件系统通知其他模块风格变更
            if (this.eventSystem) {
                this.eventSystem.emit('style:changed', {
                    styleId: style.id,
                    config: style.config,
                    name: style.name
                });
            }

            console.log('[InfoBarSettings] ✅ 信息栏风格应用完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用信息栏风格失败:', error);
        }
    }

    /**
     * 更新风格卡片状态
     * @param {string} activeStyleId - 激活的风格ID
     */
    updateStyleCardStates(activeStyleId) {
        try {
            const styleCards = this.modal.querySelectorAll('.style-preview-card');
            styleCards.forEach(card => {
                const styleId = card.dataset.style;
                const isActive = styleId === activeStyleId;

                // 更新激活状态
                card.classList.toggle('active', isActive);

                // 更新当前标签
                const currentBadge = card.querySelector('.current-badge');
                if (isActive && !currentBadge) {
                    card.insertAdjacentHTML('beforeend', '<div class="current-badge">当前</div>');
                } else if (!isActive && currentBadge) {
                    currentBadge.remove();
                }
            });
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新风格卡片状态失败:', error);
        }
    }

    /**
     * 更新当前风格信息
     * @param {Object} style - 风格配置对象
     */
    updateCurrentStyleInfo(style) {
        try {
            const currentStyleInput = this.modal.querySelector('input[name="style.current"]');
            const styleDescTextarea = this.modal.querySelector('textarea[name="style.description"]');

            if (currentStyleInput) {
                currentStyleInput.value = style.name;
            }

            if (styleDescTextarea) {
                styleDescTextarea.value = style.description;
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新当前风格信息失败:', error);
        }
    }

    /**
     * 保存风格配置
     * @param {string} styleId - 风格ID
     */
    async saveStyleConfig(styleId) {
        try {
            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 保存风格配置
            extensionSettings['Information bar integration tool'].style = {
                current: styleId,
                lastUpdated: new Date().toISOString()
            };

            // 使用 SillyTavern 的持久化方法
            context.saveSettingsDebounced();

            console.log('[InfoBarSettings] 💾 风格配置已保存到 extensionSettings:', styleId);
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存风格配置失败:', error);
        }
    }

    /**
     * 根据ID获取主题配置
     * @param {string} themeId - 主题ID
     * @returns {Object|null} 主题配置对象
     */
    getThemeById(themeId) {
        const themes = [
            {
                id: 'default-dark',
                name: '默认深色',
                description: '经典深色主题，护眼舒适',
                colors: { bg: '#1a1a1a', text: '#ffffff', primary: '#007bff', border: '#333' }
            },
            {
                id: 'default-light',
                name: '默认浅色',
                description: '清新浅色主题，简洁明亮',
                colors: { bg: '#ffffff', text: '#333333', primary: '#007bff', border: '#dee2e6' }
            },
            {
                id: 'ocean-blue',
                name: '海洋蓝',
                description: '深邃海洋风格，宁静专注',
                colors: { bg: '#0f1419', text: '#e6fffa', primary: '#00d4aa', border: '#1e3a8a' }
            },
            {
                id: 'forest-green',
                name: '森林绿',
                description: '自然森林风格，清新护眼',
                colors: { bg: '#0d1b0d', text: '#e8f5e8', primary: '#22c55e', border: '#166534' }
            },
            {
                id: 'sunset-orange',
                name: '夕阳橙',
                description: '温暖夕阳风格，活力四射',
                colors: { bg: '#1a0f0a', text: '#fff4e6', primary: '#ff8c00', border: '#cc4400' }
            },
            {
                id: 'purple-night',
                name: '紫夜',
                description: '神秘紫色风格，优雅高贵',
                colors: { bg: '#1a0d1a', text: '#f0e6ff', primary: '#9d4edd', border: '#6a1b9a' }
            },
            {
                id: 'cherry-blossom',
                name: '樱花粉',
                description: '浪漫樱花风格，温柔甜美',
                colors: { bg: '#1a1014', text: '#ffe6f0', primary: '#ff69b4', border: '#d1477a' }
            },
            {
                id: 'golden-sand',
                name: '金沙',
                description: '奢华金色风格，尊贵典雅',
                colors: { bg: '#1a1610', text: '#fff8dc', primary: '#ffd700', border: '#b8860b' }
            },
            {
                id: 'ice-blue',
                name: '冰蓝',
                description: '清冷冰蓝风格，纯净清新',
                colors: { bg: '#0a1419', text: '#e6f7ff', primary: '#00bfff', border: '#0080cc' }
            },
            {
                id: 'rose-red',
                name: '玫瑰红',
                description: '热情玫瑰风格，浪漫激情',
                colors: { bg: '#1a0a0f', text: '#ffe6eb', primary: '#dc143c', border: '#a0102a' }
            },
            {
                id: 'mint-green',
                name: '薄荷绿',
                description: '清新薄荷风格，自然舒缓',
                colors: { bg: '#0a1a14', text: '#e6fff2', primary: '#00fa9a', border: '#00cc7a' }
            },
            {
                id: 'lavender',
                name: '薰衣草',
                description: '淡雅薰衣草风格，宁静安详',
                colors: { bg: '#14141a', text: '#f0f0ff', primary: '#9370db', border: '#7b68ee' }
            },
            {
                id: 'coffee-brown',
                name: '咖啡棕',
                description: '温暖咖啡风格，沉稳内敛',
                colors: { bg: '#1a1410', text: '#f5f0e6', primary: '#8b4513', border: '#654321' }
            },
            {
                id: 'slate-gray',
                name: '石板灰',
                description: '现代石板风格，简约专业',
                colors: { bg: '#1a1a1a', text: '#e6e6e6', primary: '#708090', border: '#556b7d' }
            },
            {
                id: 'custom',
                name: '自定义',
                description: '创建您的专属主题',
                colors: { bg: '#1a1a1a', text: '#ffffff', primary: '#007bff', border: '#333' }
            }
        ];

        return themes.find(theme => theme.id === themeId) || null;
    }

    /**
     * 应用主题
     * @param {Object} theme - 主题配置对象
     */
    applyTheme(theme) {
        try {
            console.log('[InfoBarSettings] 🎨 应用主题:', theme.name);

            // 计算衍生颜色
            const bgSecondary = this.adjustColor(theme.colors.bg, 10);
            const textSecondary = this.adjustColor(theme.colors.text, -20);
            const primaryHover = this.adjustColor(theme.colors.primary, -10);

            // 更新CSS变量
            const root = document.documentElement;
            root.style.setProperty('--theme-bg-primary', theme.colors.bg);
            root.style.setProperty('--theme-bg-secondary', bgSecondary);
            root.style.setProperty('--theme-text-primary', theme.colors.text);
            root.style.setProperty('--theme-text-secondary', textSecondary);
            root.style.setProperty('--theme-primary-color', theme.colors.primary);
            root.style.setProperty('--theme-primary-hover', primaryHover);
            root.style.setProperty('--theme-border-color', theme.colors.border);

            // 应用到信息栏设置界面
            this.applyThemeToInfoBarSettings(theme);

            // 应用到数据表格界面
            this.applyThemeToDataTable(theme);

            console.log('[InfoBarSettings] ✅ 主题应用完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用主题失败:', error);
        }
    }

    /**
     * 更新主题卡片状态
     * @param {string} activeThemeId - 激活的主题ID
     */
    updateThemeCardStates(activeThemeId) {
        try {
            const themeCards = this.modal.querySelectorAll('.theme-preview-card');
            themeCards.forEach(card => {
                const themeId = card.dataset.theme;
                const currentBadge = card.querySelector('.current-badge');

                if (themeId === activeThemeId) {
                    card.classList.add('active');
                    if (!currentBadge) {
                        const badge = document.createElement('div');
                        badge.className = 'current-badge';
                        badge.textContent = '当前';
                        card.appendChild(badge);
                    }
                } else {
                    card.classList.remove('active');
                    if (currentBadge) {
                        currentBadge.remove();
                    }
                }
            });
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新主题卡片状态失败:', error);
        }
    }

    /**
     * 更新当前主题信息
     * @param {Object} theme - 主题配置对象
     */
    updateCurrentThemeInfo(theme) {
        try {
            const currentThemeInput = this.modal.querySelector('[name="theme.current"]');
            const themeDescriptionTextarea = this.modal.querySelector('[name="theme.description"]');

            if (currentThemeInput) {
                currentThemeInput.value = theme.name;
            }

            if (themeDescriptionTextarea) {
                themeDescriptionTextarea.value = theme.description;
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新当前主题信息失败:', error);
        }
    }

    /**
     * 保存主题配置
     * @param {string} themeId - 主题ID
     */
    async saveThemeConfig(themeId) {
        try {
            // 使用 SillyTavern 标准存储机制
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;

            // 确保扩展设置对象存在
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 保存主题配置
            extensionSettings['Information bar integration tool'].theme = {
                current: themeId,
                lastUpdated: new Date().toISOString()
            };

            // 使用 SillyTavern 的持久化方法
            context.saveSettingsDebounced();

            console.log('[InfoBarSettings] ✅ 主题配置已保存到 extensionSettings:', themeId);
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存主题配置失败:', error);
        }
    }

    /**
     * 应用主题到信息栏设置界面
     * @param {Object} theme - 主题配置对象
     */
    applyThemeToInfoBarSettings(theme) {
        try {
            if (!this.modal) return;

            // 应用到模态框
            this.modal.style.backgroundColor = theme.colors.bg;
            this.modal.style.color = theme.colors.text;
            this.modal.style.borderColor = theme.colors.border;

            // 应用到所有相关元素，但排除导航项
            const elements = this.modal.querySelectorAll('.modal-header, .modal-body, .modal-footer, .content-panel');
            elements.forEach(element => {
                element.style.backgroundColor = theme.colors.bg;
                element.style.color = theme.colors.text;
                element.style.borderColor = theme.colors.border;
            });

            // 🔧 修复：单独处理导航项，保持激活状态的正确样式
            const navItems = this.modal.querySelectorAll('.nav-item');
            navItems.forEach(navItem => {
                if (navItem.classList.contains('active')) {
                    // 激活状态的导航项使用主题色
                    navItem.style.backgroundColor = theme.colors.primary;
                    navItem.style.color = theme.colors.text;
                    navItem.style.borderLeftColor = theme.colors.primary;
                } else {
                    // 非激活状态的导航项使用背景色
                    navItem.style.backgroundColor = theme.colors.bg;
                    navItem.style.color = theme.colors.text;
                    navItem.style.borderColor = theme.colors.border;
                }
            });

            // 🔧 修复：应用主题到总结面板特定元素
            this.applySummaryPanelTheme(theme);

            // 🔧 修复：应用主题到变量管理器特定元素
            this.applyVariableManagerTheme(theme);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用主题到信息栏设置失败:', error);
        }
    }

    /**
     * 🔧 新增：单独应用导航项主题样式
     */
    applyNavItemTheme() {
        try {
            if (!this.modal) return;

            // 获取当前激活的主题
            const activeThemeCard = this.modal.querySelector('.theme-preview-card.active');
            if (!activeThemeCard) {
                console.log('[InfoBarSettings] ⚠️ 未找到激活的主题卡片');
                return;
            }

            const themeId = activeThemeCard.getAttribute('data-theme');
            const currentTheme = this.getThemeById(themeId);
            if (!currentTheme || !currentTheme.colors) {
                console.log('[InfoBarSettings] ⚠️ 未找到主题配置:', themeId);
                return;
            }

            // 应用导航项主题样式
            const navItems = this.modal.querySelectorAll('.nav-item');
            navItems.forEach(navItem => {
                if (navItem.classList.contains('active')) {
                    // 激活状态的导航项使用主题色
                    navItem.style.backgroundColor = currentTheme.colors.primary;
                    navItem.style.color = currentTheme.colors.text;
                    navItem.style.borderLeftColor = currentTheme.colors.primary;
                } else {
                    // 非激活状态的导航项使用背景色
                    navItem.style.backgroundColor = currentTheme.colors.bg;
                    navItem.style.color = currentTheme.colors.text;
                    navItem.style.borderColor = currentTheme.colors.border;
                }
            });

            console.log('[InfoBarSettings] ✅ 导航项主题应用完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导航项主题应用失败:', error);
        }
    }

    /**
     * 应用主题到总结面板元素
     * @param {Object} theme - 主题配置对象
     */
    applySummaryPanelTheme(theme) {
        try {
            if (!this.modal) return;

            // 总结面板容器
            const summaryContainers = this.modal.querySelectorAll('.summary-settings-container, .summary-history-container, .summary-content-container');
            summaryContainers.forEach(container => {
                container.style.backgroundColor = theme.colors.bg;
                container.style.color = theme.colors.text;
                container.style.borderColor = theme.colors.border;
            });

            // 设置区域
            const settingSections = this.modal.querySelectorAll('.settings-section, .history-section, .content-section');
            settingSections.forEach(section => {
                section.style.backgroundColor = this.adjustColor(theme.colors.bg, 5);
                section.style.color = theme.colors.text;
                section.style.borderColor = theme.colors.border;
            });

            // 输入框和选择框
            const inputs = this.modal.querySelectorAll('#content-auto-summary-enabled, #content-summary-floor-count, #content-summary-type, #content-summary-word-count, #content-summary-history-select');
            inputs.forEach(input => {
                input.style.backgroundColor = theme.colors.bg;
                input.style.color = theme.colors.text;
                input.style.borderColor = theme.colors.border;
            });

            // 删除按钮
            const deleteBtn = this.modal.querySelector('#content-delete-summary-btn');
            if (deleteBtn) {
                deleteBtn.style.backgroundColor = theme.colors.primary;
                deleteBtn.style.color = theme.colors.bg;
                deleteBtn.style.borderColor = theme.colors.primary;
            }

            // 按钮
            const buttons = this.modal.querySelectorAll('#header-manual-summary-btn, #header-refresh-summary-btn, #content-save-settings-btn, #content-delete-summary-btn, [data-action="open-error-log"], [data-action="open-project-link"], [data-action="save-profile"], [data-action="load-profile"], [data-action="delete-profile"], [data-action="export"], [data-action="import"]');
            buttons.forEach(button => {
                button.style.backgroundColor = theme.colors.primary;
                button.style.color = theme.colors.bg;
                button.style.borderColor = theme.colors.primary;
            });

            // 标签和提示文本
            const labels = this.modal.querySelectorAll('.setting-label, .setting-hint, .content-meta');
            labels.forEach(label => {
                label.style.color = this.adjustColor(theme.colors.text, -20);
            });

            // 内容显示区域
            const contentBody = this.modal.querySelector('#content-summary-content-body');
            if (contentBody) {
                contentBody.style.backgroundColor = this.adjustColor(theme.colors.bg, 3);
                contentBody.style.color = theme.colors.text;
                contentBody.style.borderColor = theme.colors.border;
            }

            console.log('[InfoBarSettings] ✅ 总结面板主题应用完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用总结面板主题失败:', error);
        }
    }

    /**
     * 🔧 修复：应用主题到变量管理器
     */
    applyVariableManagerTheme(theme) {
        try {
            console.log('[InfoBarSettings] 🎨 应用变量管理器主题...');

            // 变量管理器模态框
            const variableModal = document.querySelector('#variable-manager-modal');
            if (!variableModal) {
                console.log('[InfoBarSettings] ℹ️ 变量管理器未打开，跳过主题应用');
                return;
            }

            // 应用主题到模态框容器
            const modalContainer = variableModal.querySelector('.modal-container');
            if (modalContainer) {
                modalContainer.style.backgroundColor = theme.colors.bg;
                modalContainer.style.color = theme.colors.text;
                modalContainer.style.borderColor = theme.colors.border;
            }

            // 应用主题到变量项
            const variableItems = variableModal.querySelectorAll('.variable-item');
            variableItems.forEach(item => {
                item.style.setProperty('background-color', this.adjustColor(theme.colors.bg, 3), 'important');
                item.style.setProperty('color', theme.colors.text, 'important');
                item.style.setProperty('border-color', theme.colors.border, 'important');
            });

            // 🔧 修复：强制应用主题到object-property和nested-array元素
            const objectProperties = variableModal.querySelectorAll('.object-property, .nested-array, .nested-object');
            objectProperties.forEach(element => {
                element.style.setProperty('background-color', this.adjustColor(theme.colors.bg, 5), 'important');
                element.style.setProperty('color', theme.colors.text, 'important');
                element.style.setProperty('border-color', theme.colors.border, 'important');
            });

            // 应用主题到嵌套项容器
            const nestedItems = variableModal.querySelectorAll('.nested-items');
            nestedItems.forEach(container => {
                container.style.setProperty('background-color', this.adjustColor(theme.colors.bg, 2), 'important');
                container.style.setProperty('border-color', theme.colors.border, 'important');
            });

            // 应用主题到输入框和选择框
            const inputs = variableModal.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.style.setProperty('background-color', theme.colors.bg, 'important');
                input.style.setProperty('color', theme.colors.text, 'important');
                input.style.setProperty('border-color', theme.colors.border, 'important');
            });

            // 应用主题到按钮
            const buttons = variableModal.querySelectorAll('.btn, .btn-icon, .btn-icon-small');
            buttons.forEach(button => {
                if (button.classList.contains('btn-primary') || button.classList.contains('btn-success')) {
                    button.style.setProperty('background-color', theme.colors.primary, 'important');
                    button.style.setProperty('color', theme.colors.bg, 'important');
                } else if (button.classList.contains('btn-danger')) {
                    button.style.setProperty('background-color', '#dc3545', 'important');
                    button.style.setProperty('color', 'white', 'important');
                } else {
                    button.style.setProperty('background-color', this.adjustColor(theme.colors.bg, 10), 'important');
                    button.style.setProperty('color', theme.colors.text, 'important');
                }
                button.style.setProperty('border-color', theme.colors.border, 'important');
            });

            console.log('[InfoBarSettings] ✅ 变量管理器主题应用完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用变量管理器主题失败:', error);
        }
    }

    /**
     * 应用主题到数据表格界面
     * @param {Object} theme - 主题配置对象
     */
    applyThemeToDataTable(theme) {
        try {
            console.log('[InfoBarSettings] 🎨 应用主题到数据表格:', theme.name || theme.id);

            // 通过事件系统通知数据表格更新主题
            if (this.eventSystem) {
                this.eventSystem.emit('theme:changed', {
                    themeId: theme.id,
                    colors: theme.colors
                });
            }

            // 🔧 新增：直接更新数据表格标题的主题样式
            this.updateDataTableHeaderTheme(theme);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用主题到数据表格失败:', error);
        }
    }
    /**
     * 更新数据表格标题的主题样式
     * @param {Object} theme - 主题配置对象
     */
    updateDataTableHeaderTheme(theme) {
        try {
            // 查找数据表格模态框
            const dataTableModal = document.querySelector('.data-table-modal, .datatable-modal-new');
            if (!dataTableModal) {
                console.log('[InfoBarSettings] ℹ️ 数据表格界面未打开，跳过标题主题更新');
                return;
            }

            // 更新模态框标题
            const modalHeader = dataTableModal.querySelector('.modal-header');
            const modalTitle = dataTableModal.querySelector('.modal-title, h2');

            if (modalHeader && theme.colors) {
                // 应用主题背景色
                if (theme.colors.headerBg) {
                    modalHeader.style.background = theme.colors.headerBg;
                }
                if (theme.colors.headerBorder) {
                    modalHeader.style.borderBottomColor = theme.colors.headerBorder;
                }
            }

            if (modalTitle && theme.colors) {
                // 应用主题文字色
                if (theme.colors.headerText) {
                    modalTitle.style.color = theme.colors.headerText;
                }
            }

            // 更新表格标题行
            const tableHeader = dataTableModal.querySelector('.table-header');
            if (tableHeader && theme.colors) {
                if (theme.colors.tableBg) {
                    tableHeader.style.backgroundColor = theme.colors.tableBg;
                }
                if (theme.colors.tableText) {
                    tableHeader.style.color = theme.colors.tableText;
                }
                if (theme.colors.tableBorder) {
                    tableHeader.style.borderBottomColor = theme.colors.tableBorder;
                }
            }

            console.log('[InfoBarSettings] ✅ 数据表格标题主题已更新');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新数据表格标题主题失败:', error);
        }
    }

    /**
     * 调整颜色亮度
     * @param {string} color - 十六进制颜色值
     * @param {number} amount - 调整量（-100到100）
     * @returns {string} 调整后的颜色值
     */
    adjustColor(color, amount) {
        try {
            const num = parseInt(color.replace('#', ''), 16);
            const r = Math.max(0, Math.min(255, (num >> 16) + amount));
            const g = Math.max(0, Math.min(255, (num >> 8 & 0x00FF) + amount));
            const b = Math.max(0, Math.min(255, (num & 0x0000FF) + amount));
            return `#${(r << 16 | g << 8 | b).toString(16).padStart(6, '0')}`;
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 调整颜色失败:', error);
            return color;
        }
    }

    /**
     * 获取状态信息
     */
    getStatus() {
        return {
            initialized: this.initialized,
            visible: this.visible,
            currentTab: this.currentTab,
            errorCount: this.errorCount
        };
    }

    /**
     * 销毁组件
     */
    destroy() {
        if (this.modal) {
            this.modal.remove();
            this.modal = null;
        }

        this.initialized = false;
        console.log('[InfoBarSettings] 💥 设置界面已销毁');
    }

    /**
     * 🔧 新增：从缓存加载模型列表
     */
    async loadCachedModelList(apiConfig) {
        try {
            console.log('[InfoBarSettings] 📋 尝试从缓存加载模型列表...');

            // 生成缓存键，基于提供商和API配置
            const cacheKey = this.generateModelCacheKey(apiConfig);
            console.log('[InfoBarSettings] 🔑 缓存键:', cacheKey);

            // 从ConfigManager获取缓存的模型数据
            const configManager = window.SillyTavernInfobar?.modules?.configManager;
            if (!configManager) {
                console.warn('[InfoBarSettings] ⚠️ ConfigManager未找到，无法读取缓存');
                return null;
            }

            const cachedData = await configManager.getConfig(`apiConfig.modelCache.${cacheKey}`);
            if (!cachedData) {
                console.log('[InfoBarSettings] ℹ️ 缓存中没有找到模型数据');
                return null;
            }

            // 检查缓存是否过期（默认24小时）
            const cacheMaxAge = 24 * 60 * 60 * 1000; // 24小时
            const now = Date.now();
            if (now - cachedData.timestamp > cacheMaxAge) {
                console.log('[InfoBarSettings] ⏰ 缓存已过期，需要重新加载');
                return null;
            }

            console.log(`[InfoBarSettings] ✅ 从缓存加载了 ${cachedData.models.length} 个模型`);
            return cachedData.models;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 从缓存加载模型列表失败:', error);
            return null;
        }
    }

    /**
     * 🔧 新增：生成模型缓存键
     */
    generateModelCacheKey(apiConfig) {
        // 基于提供商、接口类型和基础URL生成唯一键
        const provider = apiConfig.provider || 'unknown';
        const interfaceType = apiConfig.format || 'unknown';
        const baseUrl = apiConfig.baseUrl || apiConfig.endpoint || 'default';

        // 创建简短但唯一的哈希
        const keyString = `${provider}_${interfaceType}_${baseUrl}`;
        return keyString.replace(/[^a-zA-Z0-9_]/g, '_').substring(0, 50);
    }

    /**
     * 🔧 新增：保存模型列表到缓存
     */
    async saveCachedModelList(apiConfig, models) {
        try {
            console.log('[InfoBarSettings] 💾 保存模型列表到缓存...');

            const cacheKey = this.generateModelCacheKey(apiConfig);
            const cachedData = {
                models: models,
                timestamp: Date.now(),
                provider: apiConfig.provider,
                config: {
                    provider: apiConfig.provider,
                    format: apiConfig.format,
                    baseUrl: apiConfig.baseUrl || apiConfig.endpoint
                }
            };

            // 保存到ConfigManager
            const configManager = window.SillyTavernInfobar?.modules?.configManager;
            if (configManager) {
                await configManager.setConfig(`apiConfig.modelCache.${cacheKey}`, cachedData);
                console.log(`[InfoBarSettings] ✅ 已缓存 ${models.length} 个模型`);
            } else {
                console.warn('[InfoBarSettings] ⚠️ ConfigManager未找到，无法保存缓存');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存模型列表缓存失败:', error);
        }
    }

    /**
     * 🔧 新增：填充模型选择框
     */
    populateModelSelect(models) {
        try {
            const modelSelect = this.modal.querySelector('#api-model');
            if (!modelSelect) {
                console.warn('[InfoBarSettings] ⚠️ 模型选择框未找到');
                return;
            }

            // 清空现有选项
            modelSelect.innerHTML = '<option value="">请选择模型</option>';

            // 添加模型选项
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = model.name;
                option.title = model.description || model.name;
                modelSelect.appendChild(option);
            });

            console.log(`[InfoBarSettings] ✅ 已填充 ${models.length} 个模型到选择框`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 填充模型选择框失败:', error);
        }
    }

    /**
     * 🔧 新增：显示模型加载提示
     */
    showModelLoadingHint() {
        try {
            const connectionStatus = this.modal.querySelector('#connection-status');
            if (connectionStatus) {
                connectionStatus.innerHTML = `
                    <div style="color: #f59e0b;">
                        ⚠️ 模型列表需要手动加载<br>
                        <small>点击"📋 加载模型列表"按钮获取最新模型</small>
                    </div>
                `;
            }

            // 同时更新模型选择框的提示
            const modelSelect = this.modal.querySelector('#api-model');
            if (modelSelect) {
                modelSelect.innerHTML = '<option value="">请先加载模型列表</option>';
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示模型加载提示失败:', error);
        }
    }

    /**
     * 加载模型列表
     */
    async loadModelList() {
        console.log('[InfoBarSettings] 开始加载模型列表');
        const loadModelsBtn = document.getElementById('load-models-btn');
        const modelSelect = document.getElementById('api-model');
        const connectionStatus = document.getElementById('connection-status');

        if (loadModelsBtn) {
            loadModelsBtn.textContent = '🔄 加载中...';
            loadModelsBtn.disabled = true;
        }

        try {
            // 获取当前配置
            const provider = document.getElementById('api-provider')?.value;
            const interfaceType = document.getElementById('interface-type')?.value;
            const baseUrl = document.getElementById('api-base-url')?.value;
            const apiKey = document.getElementById('api-key')?.value;

            if (!provider || !interfaceType || !baseUrl || !apiKey) {
                throw new Error('请先完成API配置（提供商、接口类型、基础URL、API密钥）');
            }

            let models = [];

            if (provider === 'gemini' && interfaceType === 'native') {
                // Gemini原生接口
                models = await this.loadGeminiNativeModels(baseUrl, apiKey);
            } else if ((provider === 'gemini' && interfaceType === 'openai-compatible') ||
                       (provider === 'localproxy' && interfaceType === 'openai-compatible') ||
                       (provider === 'custom' && interfaceType === 'openai-compatible')) {
                // OpenAI兼容接口
                models = await this.loadOpenAICompatibleModels(baseUrl, apiKey, provider);
            }

            // 🔧 新增：保存模型列表到缓存
            const apiConfig = {
                provider: provider,
                format: interfaceType,
                baseUrl: baseUrl,
                endpoint: baseUrl
            };
            await this.saveCachedModelList(apiConfig, models);

            // 更新模型选择框
            this.populateModelSelect(models);

            if (connectionStatus) {
                connectionStatus.innerHTML = `
                    <div style="color: #10b981;">
                        ✅ 成功加载 ${models.length} 个模型<br>
                        <small>模型列表已缓存，下次打开时将自动使用缓存</small>
                    </div>
                `;
            }

            console.log(`[InfoBarSettings] ✅ 成功加载 ${models.length} 个模型并已缓存:`, models);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载模型列表失败:', error);

            if (connectionStatus) {
                connectionStatus.textContent = `❌ 加载失败: ${error.message}`;
                connectionStatus.style.color = '#ef4444';
            }

            // 显示错误提示
            this.showNotification('加载模型失败: ' + error.message, 'error');
        } finally {
            if (loadModelsBtn) {
                loadModelsBtn.textContent = '🔄 重新加载模型列表';
                loadModelsBtn.disabled = false;
            }
        }
    }

    /**
     * 加载Gemini原生接口模型
     */
    async loadGeminiNativeModels(baseUrl, apiKey) {
        console.log('[InfoBarSettings] 🔄 加载Gemini原生模型...');

        // 使用正确的Gemini API端点
        const modelsUrl = `${baseUrl}/v1beta/models?key=${apiKey}`;

        console.log('[InfoBarSettings] 🌐 使用CORS兼容请求:', modelsUrl);

        let response;
        try {
            // 🔧 修复：使用APIIntegration的CORS兼容fetch方法
            if (this.apiIntegration && typeof this.apiIntegration.proxyCompatibleFetch === 'function') {
                console.log('[InfoBarSettings] ✅ 使用CORS兼容的fetch方法');
                response = await this.apiIntegration.proxyCompatibleFetch(modelsUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': 'SillyTavern-InfoBar/1.0'
                    }
                });
            } else {
                console.warn('[InfoBarSettings] ⚠️ APIIntegration不可用，使用原生fetch');
                response = await fetch(modelsUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': 'SillyTavern-InfoBar/1.0'
                    }
                });
            }
        } catch (fetchError) {
            console.error('[InfoBarSettings] ❌ Gemini请求失败:', fetchError);

            // 检查是否是CORS错误
            if (fetchError.message.includes('CORS_BLOCKED') ||
                fetchError.message.includes('CORS') ||
                (fetchError.name === 'TypeError' && fetchError.message.includes('fetch'))) {

                throw new Error('CORS跨域错误：无法访问Gemini模型列表，请检查API配置或使用服务器端代理');
            }

            throw fetchError;
        }

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Gemini API错误 (${response.status}): ${errorText}`);
        }

        const data = await response.json();

        // 解析Gemini API响应格式
        const models = data.models?.map(model => ({
            id: model.name.replace('models/', ''), // 移除 "models/" 前缀
            name: model.displayName || model.name.replace('models/', ''),
            description: model.description || `Gemini模型: ${model.name}`
        })) || [];

        // 过滤出支持generateContent的模型
        const supportedModels = models.filter(model =>
            model.id.includes('gemini') &&
            !model.id.includes('embedding')
        );

        console.log(`[InfoBarSettings] Gemini原生接口加载了 ${supportedModels.length} 个模型`);
        return supportedModels;
    }

    /**
     * 加载本地反代模型 (通过SillyTavern后端)
     */
    async loadLocalProxyModels(baseUrl, apiKey) {
        try {
            console.log('[InfoBarSettings] 🔄 通过SillyTavern后端加载本地反代模型...');

            // 获取CSRF令牌
            const csrfResponse = await fetch('/csrf-token');
            const csrfData = await csrfResponse.json();
            const csrfToken = csrfData.token;

            // 构建状态检查请求
            const statusUrl = `${window.location.origin}/api/backends/chat-completions/status`;
            const requestBody = {
                reverse_proxy: baseUrl,
                proxy_password: apiKey,
                chat_completion_source: "custom",
                custom_url: baseUrl,
                custom_include_headers: ""
            };

            console.log('[InfoBarSettings] 📊 本地反代状态检查:', {
                statusUrl,
                reverseProxy: baseUrl,
                hasPassword: !!apiKey
            });

            const response = await fetch(statusUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                throw new Error(`本地反代状态检查失败: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log('[InfoBarSettings] 📊 本地反代状态响应:', data);

            // 解析模型列表
            let models = [];
            if (data.data && Array.isArray(data.data)) {
                models = data.data.map(model => ({
                    id: model.id || model.model || 'unknown',
                    name: model.id || model.model || model.name || 'Unknown Model',
                    description: model.description || `本地反代模型: ${model.id || model.model}`
                }));
            } else if (data.models && Array.isArray(data.models)) {
                models = data.models.map(model => ({
                    id: model.id || model.model || model.name || 'unknown',
                    name: model.name || model.id || model.model || 'Unknown Model',
                    description: model.description || `本地反代模型: ${model.id}`
                }));
            } else {
                // 提供默认模型列表
                console.log('[InfoBarSettings] ⚠️ 未获取到模型列表，使用默认模型');
                models = [
                    { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', description: '本地反代默认模型' },
                    { id: 'gpt-4', name: 'GPT-4', description: '本地反代高级模型' },
                    { id: 'claude-3-sonnet', name: 'Claude 3 Sonnet', description: '本地反代Claude模型' }
                ];
            }

            console.log(`[InfoBarSettings] ✅ 成功加载 ${models.length} 个本地反代模型`);
            return models;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载本地反代模型失败:', error);

            // 提供降级模型列表
            const fallbackModels = [
                { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo (降级)', description: '连接失败时的默认模型' },
                { id: 'gpt-4', name: 'GPT-4 (降级)', description: '连接失败时的默认模型' },
                { id: 'claude-3-sonnet', name: 'Claude 3 Sonnet (降级)', description: '连接失败时的默认模型' }
            ];

            const enhancedError = new Error(`${error.message} - 已提供降级模型列表`);
            enhancedError.fallbackModels = fallbackModels;
            enhancedError.originalError = error;
            throw enhancedError;
        }
    }

    /**
     * 加载OpenAI兼容接口模型
     */
    async loadOpenAICompatibleModels(baseUrl, apiKey, provider) {
        console.log('[InfoBarSettings] 🔄 加载OpenAI兼容模型...');

        let modelsUrl;
        let headers;

        if (provider === 'gemini') {
            // Gemini OpenAI兼容接口
            modelsUrl = `https://generativelanguage.googleapis.com/v1beta/openai/models`;
            headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
                'User-Agent': 'SillyTavern-InfoBar/1.0'
            };
        } else if (provider === 'localproxy') {
            // 本地反代接口 - 使用SillyTavern后端代理
            console.log('[InfoBarSettings] 🔄 使用本地反代模式加载模型...');
            return await this.loadLocalProxyModels(baseUrl, apiKey);
        } else {
            // 自定义OpenAI兼容接口
            modelsUrl = `${baseUrl}/models`;
            headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
                'User-Agent': 'SillyTavern-InfoBar/1.0'
            };
        }

        console.log('[InfoBarSettings] 🌐 使用CORS兼容请求:', modelsUrl);

        let response;
        try {
            // 🔧 修复：使用APIIntegration的CORS兼容fetch方法
            if (this.apiIntegration && typeof this.apiIntegration.proxyCompatibleFetch === 'function') {
                console.log('[InfoBarSettings] ✅ 使用CORS兼容的fetch方法');
                response = await this.apiIntegration.proxyCompatibleFetch(modelsUrl, {
                    method: 'GET',
                    headers: headers
                });
            } else {
                console.warn('[InfoBarSettings] ⚠️ APIIntegration不可用，使用原生fetch');
                response = await fetch(modelsUrl, {
                    method: 'GET',
                    headers: headers
                });
            }
        } catch (fetchError) {
            console.error('[InfoBarSettings] ❌ 请求失败:', fetchError);

            // 检查是否是CORS错误
            if (fetchError.message.includes('CORS_BLOCKED') ||
                fetchError.message.includes('CORS') ||
                (fetchError.name === 'TypeError' && fetchError.message.includes('fetch'))) {

                throw new Error('CORS跨域错误：无法访问模型列表，请检查反代服务器的CORS配置或使用服务器端代理');
            }

            throw fetchError;
        }

        if (!response.ok) {
            let errorText = '';
            try {
                errorText = await response.text();
            } catch (e) {
                errorText = '无法读取错误响应';
            }

            console.error('[InfoBarSettings] 🔥 API响应错误:', {
                status: response.status,
                statusText: response.statusText,
                url: modelsUrl,
                errorText: errorText.substring(0, 200)
            });

            throw new Error(`API错误 (${response.status}): ${errorText}`);
        }

        let data;
        try {
            data = await response.json();
            console.log('[InfoBarSettings] 📊 API响应数据结构:', Object.keys(data));
        } catch (parseError) {
            console.error('[InfoBarSettings] ❌ 响应解析失败:', parseError);
            throw new Error('API响应格式错误：无法解析JSON数据');
        }

        // 🔧 增强的响应格式兼容性处理
        let models = [];

        if (data.data && Array.isArray(data.data)) {
            // 标准OpenAI格式: { "data": [...] }
            console.log('[InfoBarSettings] 📋 检测到标准OpenAI格式');
            models = data.data.map(model => ({
                id: model.id || model.model || 'unknown',
                name: model.id || model.model || model.name || 'Unknown Model',
                description: model.description || `模型: ${model.id || model.model || 'unknown'}`
            }));
        } else if (data.models && Array.isArray(data.models)) {
            // 某些反代使用的格式: { "models": [...] }
            console.log('[InfoBarSettings] 📋 检测到自定义models格式');
            models = data.models.map(model => ({
                id: model.id || model.model || model.name || 'unknown',
                name: model.name || model.id || model.model || 'Unknown Model',
                description: model.description || `模型: ${model.id || model.name || 'unknown'}`
            }));
        } else if (Array.isArray(data)) {
            // 直接数组格式: [...]
            console.log('[InfoBarSettings] 📋 检测到直接数组格式');
            models = data.map(model => {
                if (typeof model === 'string') {
                    return { id: model, name: model, description: `模型: ${model}` };
                } else {
                    return {
                        id: model.id || model.model || model.name || 'unknown',
                        name: model.name || model.id || model.model || 'Unknown Model',
                        description: model.description || `模型: ${model.id || model.name || 'unknown'}`
                    };
                }
            });
        } else {
            console.warn('[InfoBarSettings] ⚠️ 未识别的响应格式，提供降级模型列表');
            console.log('[InfoBarSettings] 🔍 原始响应:', JSON.stringify(data, null, 2));

            // 提供降级模型列表
            if (provider === 'gemini') {
                models = [
                    { id: 'gemini-pro', name: 'Gemini Pro (降级)', description: '无法获取模型列表时的默认Gemini模型' },
                    { id: 'gemini-pro-vision', name: 'Gemini Pro Vision (降级)', description: '无法获取模型列表时的默认Gemini视觉模型' }
                ];
            } else {
                models = [
                    { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo (降级)', description: '无法获取模型列表时的默认模型' },
                    { id: 'gpt-4', name: 'GPT-4 (降级)', description: '无法获取模型列表时的默认模型' },
                    { id: 'gpt-4-turbo', name: 'GPT-4 Turbo (降级)', description: '无法获取模型列表时的默认模型' }
                ];
            }
        }

        // 过滤和验证模型列表
        models = models.filter(model =>
            model &&
            typeof model === 'object' &&
            model.id &&
            typeof model.id === 'string' &&
            model.id.trim() !== ''
        );

        console.log(`[InfoBarSettings] ✅ OpenAI兼容接口成功加载了 ${models.length} 个模型`);
        models.forEach((model, index) => {
            console.log(`[InfoBarSettings] 📋 模型 ${index + 1}: ${model.id} (${model.name})`);
        });

        return models;
    }

    /**
     * 处理API启用状态变更
     */
    async handleAPIEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔄 API启用状态变更:', enabled);

            if (enabled) {
                // 启用自定义API
                console.log('[InfoBarSettings] ✅ 启用自定义API模式');

                // 🔧 修复：设置主API限制规则，禁止输出冲突标签
                await this.setupMainAPIRestrictions();

                // 初始化自定义API处理
                await this.initCustomAPIHandling();

                // 显示成功消息
                this.showNotification('✅ 自定义API已启用，主API Hook已清理', 'success');

            } else {
                // 禁用自定义API
                console.log('[InfoBarSettings] ⏸️ 禁用自定义API模式');

                // 🔧 修复：移除主API限制规则
                await this.removeMainAPIRestrictions();

                // 清理自定义API处理
                await this.clearCustomAPIHandling();

                // 显示成功消息
                this.showNotification('⏸️ 自定义API已禁用，主API Hook已恢复', 'info');
            }

            // 更新配置
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }
            if (!extensionSettings['Information bar integration tool'].apiConfig) {
                extensionSettings['Information bar integration tool'].apiConfig = {};
            }

            extensionSettings['Information bar integration tool'].apiConfig.enabled = enabled;
            context.saveSettingsDebounced();

            // 🔧 新增：通知变量系统提示词模块API状态变更
            const variableSystemPrompt = window.SillyTavernInfobar?.modules?.variableSystemPrompt;
            if (variableSystemPrompt) {
                try {
                    if (enabled) {
                        // 启用自定义API时，清除变量提示词避免冲突
                        if (variableSystemPrompt.context?.setExtensionPrompt) {
                            variableSystemPrompt.context.setExtensionPrompt('information_bar_variable_reader', '', 1, 0);
                            console.log('[InfoBarSettings] 🧹 已清除主API变量提示词，避免与自定义API冲突');
                        }
                    } else {
                        // 禁用自定义API时，重新启用变量提示词
                        console.log('[InfoBarSettings] 🔄 重新启用主API变量提示词...');
                        // 设置标记以便下次生成时重新注入
                        variableSystemPrompt.injectionActive = false;
                    }
                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 更新变量系统提示词状态失败:', error);
                }
            }

            console.log('[InfoBarSettings] ✅ API启用状态已更新');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理API启用状态变更失败:', error);
            this.showNotification('❌ API状态变更失败: ' + error.message, 'error');
        }
    }

    /**
     * 处理API提供商变更
     */
    handleProviderChange(provider) {
        console.log('[InfoBarSettings] API提供商变更:', provider);

        const interfaceTypeSelect = document.getElementById('interface-type');
        const baseUrlInput = document.getElementById('api-base-url');

        if (!interfaceTypeSelect || !baseUrlInput) return;

        // 确保name属性正确
        interfaceTypeSelect.name = 'apiConfig.format';

        // 清空接口类型选项
        interfaceTypeSelect.innerHTML = '<option value="">请选择接口类型</option>';
        baseUrlInput.value = '';

        if (provider === 'gemini') {
            // Gemini提供商的接口类型
            interfaceTypeSelect.innerHTML = `
                <option value="">请选择接口类型</option>
                <option value="native">Gemini原生接口</option>
                <option value="openai-compatible">OpenAI兼容接口</option>
            `;
        } else if (provider === 'localproxy') {
            // 本地反代提供商的接口类型
            interfaceTypeSelect.innerHTML = `
                <option value="">请选择接口类型</option>
                <option value="openai-compatible">OpenAI兼容接口</option>
            `;
            // 设置默认端点
            baseUrlInput.value = 'http://127.0.0.1:7861/v1';
            baseUrlInput.placeholder = 'http://127.0.0.1:7861/v1';
        } else if (provider === 'custom') {
            // 自定义提供商的接口类型
            interfaceTypeSelect.innerHTML = `
                <option value="">请选择接口类型</option>
                <option value="openai-compatible">OpenAI兼容接口</option>
            `;
        }
    }

    /**
     * 处理接口类型变更
     */
    handleInterfaceTypeChange(interfaceType) {
        console.log('[InfoBarSettings] 接口类型变更:', interfaceType);

        const provider = document.getElementById('api-provider')?.value;
        const baseUrlInput = document.getElementById('api-base-url');

        if (!baseUrlInput) return;

        // 根据提供商和接口类型设置默认URL
        if (provider === 'gemini') {
            if (interfaceType === 'native') {
                baseUrlInput.value = 'https://generativelanguage.googleapis.com';
            } else if (interfaceType === 'openai-compatible') {
                baseUrlInput.value = 'https://generativelanguage.googleapis.com/v1beta/openai';
            }
        } else if (provider === 'localproxy') {
            if (interfaceType === 'openai-compatible') {
                baseUrlInput.value = 'http://127.0.0.1:7861/v1';
                baseUrlInput.placeholder = 'http://127.0.0.1:7861/v1';
            }
        } else if (provider === 'custom') {
            if (interfaceType === 'openai-compatible') {
                baseUrlInput.value = '';
                baseUrlInput.placeholder = 'https://your-api.com/v1';
            }
        }
    }

    /**
     * 测试本地反代连接 (通过SillyTavern后端)
     */
    async testLocalProxyConnection(baseUrl, apiKey, connectionStatus) {
        try {
            console.log('[InfoBarSettings] 🔄 测试本地反代连接...');

            // 获取CSRF令牌
            const csrfResponse = await fetch('/csrf-token');
            const csrfData = await csrfResponse.json();
            const csrfToken = csrfData.token;

            // 构建状态检查请求
            const statusUrl = `${window.location.origin}/api/backends/chat-completions/status`;
            const requestBody = {
                reverse_proxy: baseUrl,
                proxy_password: apiKey,
                chat_completion_source: "custom",
                custom_url: baseUrl,
                custom_include_headers: ""
            };

            console.log('[InfoBarSettings] 📊 本地反代连接测试:', {
                statusUrl,
                reverseProxy: baseUrl,
                hasPassword: !!apiKey
            });

            const response = await fetch(statusUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                throw new Error(`本地反代连接测试失败: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log('[InfoBarSettings] 📊 本地反代连接测试响应:', data);

            // 检查是否有错误
            if (data.error) {
                throw new Error(`本地反代错误: ${data.error.message || data.error}`);
            }

            // 连接成功
            if (connectionStatus) {
                connectionStatus.textContent = '✅ 本地反代连接成功';
                connectionStatus.style.color = '#10b981';
            }

            let modelCount = 0;
            if (data.data && Array.isArray(data.data)) {
                modelCount = data.data.length;
            } else if (data.models && Array.isArray(data.models)) {
                modelCount = data.models.length;
            }

            this.showNotification(`本地反代连接测试成功！检测到 ${modelCount} 个可用模型`, 'success');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 本地反代连接测试失败:', error);

            if (connectionStatus) {
                connectionStatus.textContent = '❌ 本地反代连接失败';
                connectionStatus.style.color = '#ef4444';
            }

            throw new Error(`本地反代连接测试失败: ${error.message}`);
        }
    }

    /**
     * 测试API连接
     */
    async testConnection() {
        console.log('[InfoBarSettings] 开始测试API连接');

        const testBtn = document.getElementById('test-connection-btn');
        const connectionStatus = document.getElementById('connection-status');

        if (testBtn) {
            testBtn.textContent = '🔄 测试中...';
            testBtn.disabled = true;
        }

        try {
            // 获取配置
            const provider = document.getElementById('api-provider')?.value;
            const interfaceType = document.getElementById('interface-type')?.value;
            const baseUrl = document.getElementById('api-base-url')?.value;
            const apiKey = document.getElementById('api-key')?.value;

            if (!provider || !interfaceType || !baseUrl || !apiKey) {
                throw new Error('请完成所有必填配置项');
            }

            // 执行连接测试
            if (provider === 'localproxy') {
                // 本地反代使用专用的测试逻辑
                console.log('[InfoBarSettings] 🔄 使用本地反代专用测试逻辑...');
                await this.testLocalProxyConnection(baseUrl, apiKey, connectionStatus);
                return;
            }

            let testUrl;
            let headers;

            if (provider === 'gemini' && interfaceType === 'native') {
                testUrl = `${baseUrl}/v1beta/models?key=${apiKey}`;
                headers = {
                    'Content-Type': 'application/json',
                    'User-Agent': 'SillyTavern-InfoBar/1.0'
                };
            } else {
                testUrl = `${baseUrl}/models`;
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`,
                    'User-Agent': 'SillyTavern-InfoBar/1.0'
                };
            }

            console.log('[InfoBarSettings] 🌐 使用CORS兼容连接测试:', testUrl);

            let response;
            try {
                // 🔧 修复：使用APIIntegration的CORS兼容fetch方法
                if (this.apiIntegration && typeof this.apiIntegration.proxyCompatibleFetch === 'function') {
                    console.log('[InfoBarSettings] ✅ 使用CORS兼容的fetch方法');
                    response = await this.apiIntegration.proxyCompatibleFetch(testUrl, {
                        method: 'GET',
                        headers: headers,
                        timeout: 10000
                    });
                } else {
                    console.warn('[InfoBarSettings] ⚠️ APIIntegration不可用，使用原生fetch');
                    response = await fetch(testUrl, {
                        method: 'GET',
                        headers: headers,
                        timeout: 10000
                    });
                }
            } catch (fetchError) {
                console.error('[InfoBarSettings] ❌ 连接测试请求失败:', fetchError);

                // 检查是否是CORS错误
                if (fetchError.message.includes('CORS_BLOCKED') ||
                    fetchError.message.includes('CORS') ||
                    (fetchError.name === 'TypeError' && fetchError.message.includes('fetch'))) {

                    throw new Error('CORS跨域错误：无法访问API服务器，请检查反代配置或使用服务器端代理');
                }

                throw fetchError;
            }

            if (response.ok) {
                if (connectionStatus) {
                    connectionStatus.textContent = '✅ 连接成功';
                    connectionStatus.style.color = '#10b981';
                }
                this.showNotification('API连接测试成功！', 'success');
            } else {
                throw new Error(`连接失败: ${response.status} ${response.statusText}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] API连接测试失败:', error);

            if (connectionStatus) {
                connectionStatus.textContent = `❌ 连接失败: ${error.message}`;
                connectionStatus.style.color = '#ef4444';
            }

            this.showNotification('API连接测试失败: ' + error.message, 'error');
        } finally {
            if (testBtn) {
                testBtn.textContent = '🔍 测试连接';
                testBtn.disabled = false;
            }
        }
    }

    /**
     * 设置主API限制规则，禁止输出特定标签
     */
    async setupMainAPIRestrictions() {
        try {
            console.log('[InfoBarSettings] 🚫 设置主API限制规则，禁止输出冲突标签...');

            // 🔧 修复：发送限制规则提示词给主API，而不是拦截
            await this.injectRestrictionPromptToMainAPI();

            // 🔧 保留：拦截主API对消息内容的访问，隐藏infobar_data
            await this.setupMessageContentFilter();

            console.log('[InfoBarSettings] ✅ 主API限制规则设置完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 设置主API限制规则失败:', error);
            throw error;
        }
    }

    /**
     * 向主API注入限制规则提示词
     */
    async injectRestrictionPromptToMainAPI() {
        try {
            console.log('[InfoBarSettings] 📝 向主API注入限制规则提示词...');

            // 创建限制规则提示词
            const restrictionPrompt = this.createRestrictionPrompt();

            // 使用SillyTavern的扩展提示词机制
            const context = SillyTavern.getContext();
            if (context && context.setExtensionPrompt) {
                context.setExtensionPrompt(
                    'Information bar integration tool - Restrictions',
                    restrictionPrompt,
                    1, // 高优先级
                    false // 不禁用
                );
                console.log('[InfoBarSettings] ✅ 限制规则提示词已注入到主API');
                console.log('[InfoBarSettings] 📝 提示词长度:', restrictionPrompt.length);
            } else {
                console.warn('[InfoBarSettings] ⚠️ 无法使用SillyTavern扩展提示词机制');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 注入限制规则提示词失败:', error);
        }
    }

    /**
     * 创建限制规则提示词
     */
    createRestrictionPrompt() {
        return `【重要技术性限制 - 禁止输出特定标签】
⚠️ 严格禁止在回复中包含以下技术性标签：

🚫 禁止输出的XML标签：
- <aiThinkProcess>...</aiThinkProcess>
- <infobar_data>...</infobar_data>



📋 说明：
这些是纯技术性限制，用于避免与专用信息栏系统产生冲突。
这些限制不影响你的正常创作和表达能力。

---`;
    }

    /**
     * 初始化自定义API处理
     */
    async initCustomAPIHandling() {
        try {
            console.log('[InfoBarSettings] 🔧 初始化自定义API处理...');

            // 注册消息接收事件监听器
            const context = SillyTavern.getContext();
            if (context && context.eventSource) {
                // 使用稳定的绑定引用，确保removeListener生效
                if (!this._boundHandlers.handleGenerationEnded) {
                    this._boundHandlers.handleGenerationEnded = this.handleGenerationEnded.bind(this);
                }
                if (!this._boundHandlers.handleMessageReceived) {
                    this._boundHandlers.handleMessageReceived = this.handleMessageReceived.bind(this);
                }

                // 移除可能存在的旧监听器（使用相同引用）
                context.eventSource.removeListener('message_received', this._boundHandlers.handleMessageReceived);
                context.eventSource.removeListener('generation_ended', this._boundHandlers.handleGenerationEnded);

                // 添加监听器（仅添加一次）
                context.eventSource.on('generation_ended', this._boundHandlers.handleGenerationEnded);
                // 按需：如果也需要在message_received时触发，则打开下一行
                // context.eventSource.on('message_received', this._boundHandlers.handleMessageReceived);

                console.log('[InfoBarSettings] ✅ 自定义API事件监听器已注册');
            }

            console.log('[InfoBarSettings] ✅ 自定义API处理初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化自定义API处理失败:', error);
            throw error;
        }
    }

    /**
     * 处理生成结束事件（确保主API完成后才处理）
     * 🔧 修复：增加AI消息验证，避免处理旧消息
     */
    async handleGenerationEnded() {
        try {
            console.log('[InfoBarSettings] 🏁 收到生成结束事件...');

            // 检查API是否启用
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            if (!configs.apiConfig || !configs.apiConfig.enabled) {
                console.log('[InfoBarSettings] ℹ️ 自定义API未启用，跳过处理');
                return;
            }

            // 获取最新的AI消息
            const latestAIMessage = this.getLatestAIMessage();
            if (!latestAIMessage) {
                console.log('[InfoBarSettings] ℹ️ 没有找到AI消息，跳过处理');
                return;
            }

            // 🔧 修复：验证AI消息是否为真正新生成的消息
            const isValidMessage = this.validateAIMessageIsNew(latestAIMessage);
            if (!isValidMessage) {
                console.log('[InfoBarSettings] ⚠️ 检测到的AI消息不是新生成的消息，可能是AI生成失败，跳过处理');
                console.log('[InfoBarSettings] 📝 这避免了使用上一条AI消息的剧情内容调用自定义API的错误');

                // 调用失败处理函数
                this.handleAIGenerationFailure('AI消息验证失败：获取到的是旧消息，可能AI生成未成功');
                return;
            }

            console.log('[InfoBarSettings] ✅ 验证通过：这是一条新生成的AI消息');

            // 🔧 新增：验证AI消息长度是否足够生成信息栏数据
            const lengthValidation = this.validateAIMessageLength(latestAIMessage, 100);
            if (!lengthValidation.isValid) {
                console.log('[InfoBarSettings] ⚠️ AI消息长度不足，跳过信息栏数据生成');
                console.log('[InfoBarSettings] 📝 这通常表示AI输出被截断或内容过于简短');

                // 调用失败处理函数
                this.handleAIGenerationFailure(`AI消息长度不足：${lengthValidation.reason}`);
                return;
            }

            console.log('[InfoBarSettings] ✅ AI消息长度验证通过，内容长度充足');

            // 在双API协作模式下，主API不应该包含infobar_data
            // 如果包含了，说明主API Hook没有生效，需要清理
            if (latestAIMessage.mes && latestAIMessage.mes.includes('<infobar_data>')) {
                console.log('[InfoBarSettings] ⚠️ 检测到主API返回了infobar_data，清理并重新处理...');

                // 清理主API返回的infobar_data
                const cleanedMessage = latestAIMessage.mes.replace(/<infobar_data>[\s\S]*?<\/infobar_data>/g, '').trim();
                latestAIMessage.mes = cleanedMessage;

                console.log('[InfoBarSettings] 🧹 已清理主API返回的infobar_data');
            }

            console.log('[InfoBarSettings] 🤖 主API生成完成，开始处理信息栏数据...');

            // 🔧 优化：使用任务队列处理，避免频繁并发调用
            if (this.customAPITaskQueue) {
                console.log('[InfoBarSettings] 📋 使用任务队列处理信息栏数据生成');
                this.customAPITaskQueue.addTask({
                    type: 'INFOBAR_DATA',
                    data: { content: latestAIMessage.mes },
                    source: 'generation_ended'
                });
            } else {
                // 回退到原有逻辑
                console.log('[InfoBarSettings] ⚠️ 任务队列不可用，使用原有逻辑');
                await this.processWithCustomAPI(latestAIMessage.mes);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理生成结束事件失败:', error);
        }
    }

    /**
     * 设置消息内容过滤器，在自定义API模式下隐藏infobar_data
     */
    async setupMessageContentFilter() {
        try {
            console.log('[InfoBarSettings] 🔧 设置消息内容过滤器...');

            const context = SillyTavern.getContext();
            if (!context || !context.chat) {
                console.warn('[InfoBarSettings] ⚠️ 无法获取聊天上下文');
                return;
            }

            // 保存原始的chat数组（如果还没有保存）
            if (!context._originalChat) {
                // 创建原始数组的副本，避免循环引用
                context._originalChat = [...context.chat];
                console.log('[InfoBarSettings] 💾 已保存原始聊天数组引用，长度:', context._originalChat.length);
            }

            // 创建一个代理数组，动态过滤infobar_data内容
            const filteredChat = new Proxy(context._originalChat, {
                get: (target, prop) => {
                    // 如果访问的是数组索引
                    if (typeof prop === 'string' && /^\d+$/.test(prop)) {
                        const index = parseInt(prop);
                        const message = target[index];

                        if (message && message.mes && typeof message.mes === 'string') {
                            // 检查是否启用了自定义API模式
                            const currentContext = SillyTavern.getContext();
                            const extensionSettings = currentContext.extensionSettings['Information bar integration tool'] || {};
                            const apiConfig = extensionSettings.apiConfig || {};

                            if (apiConfig.enabled && apiConfig.apiKey && apiConfig.model) {
                                // 在自定义API模式下，过滤掉infobar_data内容
                                const filteredMessage = { ...message };
                                const originalMes = message.mes;
                                filteredMessage.mes = originalMes.replace(/<infobar_data>[\s\S]*?<\/infobar_data>/gi, '').trim();

                                // 如果过滤后内容发生变化，记录日志
                                if (filteredMessage.mes !== originalMes) {
                                    console.log('[InfoBarSettings] 🔍 已过滤消息中的infobar_data内容，消息索引:', index);
                                    console.log('[InfoBarSettings] 📏 原始长度:', originalMes.length, '过滤后长度:', filteredMessage.mes.length);
                                }

                                return filteredMessage;
                            }
                        }

                        return message;
                    }

                    // 对于其他属性（如length, push, pop等），直接返回原始值
                    const value = target[prop];
                    if (typeof value === 'function') {
                        return value.bind(target);
                    }
                    return value;
                }
            });

            // 替换context.chat为过滤后的代理数组
            context.chat = filteredChat;
            console.log('[InfoBarSettings] ✅ 消息内容过滤器已设置');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 设置消息内容过滤器失败:', error);
            throw error;
        }
    }

    /**
     * 移除主API限制规则
     */
    async removeMainAPIRestrictions() {
        try {
            console.log('[InfoBarSettings] 🔄 移除主API限制规则...');

            // 🔧 修复：移除限制规则提示词
            await this.removeRestrictionPromptFromMainAPI();

            // 🔧 保留：恢复原始的聊天数组
            const context = SillyTavern.getContext();
            if (context && context._originalChat) {
                context.chat = context._originalChat;
                delete context._originalChat;
                console.log('[InfoBarSettings] ✅ 原始聊天数组已恢复');
            }

            console.log('[InfoBarSettings] ✅ 主API限制规则移除完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 移除主API限制规则失败:', error);
            throw error;
        }
    }

    /**
     * 从主API移除限制规则提示词
     */
    async removeRestrictionPromptFromMainAPI() {
        try {
            console.log('[InfoBarSettings] 🗑️ 从主API移除限制规则提示词...');

            // 使用SillyTavern的扩展提示词机制移除限制规则
            const context = SillyTavern.getContext();
            if (context && context.setExtensionPrompt) {
                context.setExtensionPrompt(
                    'Information bar integration tool - Restrictions',
                    '', // 空提示词表示移除
                    1,
                    true // 禁用
                );
                console.log('[InfoBarSettings] ✅ 限制规则提示词已从主API移除');
            } else {
                console.warn('[InfoBarSettings] ⚠️ 无法使用SillyTavern扩展提示词机制移除限制规则');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 移除限制规则提示词失败:', error);
        }
    }

    /**
     * 清理自定义API处理
     */
    async clearCustomAPIHandling() {
        try {
            console.log('[InfoBarSettings] 🧹 清理自定义API处理...');

            // 移除事件监听器
            const context = SillyTavern.getContext();
            if (context && context.eventSource) {
                context.eventSource.removeListener('message_received', this.handleMessageReceived);
                context.eventSource.removeListener('generation_ended', this.handleGenerationEnded);
                console.log('[InfoBarSettings] ✅ 自定义API事件监听器已移除');
            }

            console.log('[InfoBarSettings] ✅ 自定义API处理清理完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理自定义API处理失败:', error);
            throw error;
        }
    }

    /**
     * 处理消息接收事件（自定义API模式）
     * 🔧 修复：增加AI消息验证，避免处理旧消息
     */
    async handleMessageReceived() {
        try {
            console.log('[InfoBarSettings] 📨 收到消息接收事件...');

            // 检查API是否启用
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            if (!configs.apiConfig || !configs.apiConfig.enabled) {
                console.log('[InfoBarSettings] ℹ️ 自定义API未启用，跳过处理');
                return;
            }

            // 获取最新的AI消息
            const latestAIMessage = this.getLatestAIMessage();
            if (!latestAIMessage) {
                console.log('[InfoBarSettings] ℹ️ 没有找到AI消息，跳过处理');
                return;
            }

            // 🔧 修复：验证AI消息是否为真正新生成的消息
            const isValidMessage = this.validateAIMessageIsNew(latestAIMessage);
            if (!isValidMessage) {
                console.log('[InfoBarSettings] ⚠️ 检测到的AI消息不是新生成的消息，跳过处理');
                return;
            }

            // 🔧 新增：验证AI消息长度是否足够生成信息栏数据
            const lengthValidation = this.validateAIMessageLength(latestAIMessage, 100);
            if (!lengthValidation.isValid) {
                console.log('[InfoBarSettings] ⚠️ AI消息长度不足，跳过信息栏数据生成');
                console.log('[InfoBarSettings] 📝 这通常表示AI输出被截断或内容过于简短');

                // 调用失败处理函数
                this.handleAIGenerationFailure(`AI消息长度不足：${lengthValidation.reason}`);
                return;
            }

            console.log('[InfoBarSettings] ✅ AI消息长度验证通过，内容长度充足');

            // 检查消息是否已经包含infobar_data
            if (latestAIMessage.mes && latestAIMessage.mes.includes('<infobar_data>')) {
                console.log('[InfoBarSettings] ℹ️ 消息已包含infobar_data，跳过处理');
                return;
            }

            console.log('[InfoBarSettings] 🤖 检测到新的AI消息，准备处理...');

            // 🔧 优化：使用任务队列处理，避免频繁并发调用
            if (this.customAPITaskQueue) {
                console.log('[InfoBarSettings] 📋 使用任务队列处理信息栏数据生成');
                this.customAPITaskQueue.addTask({
                    type: 'INFOBAR_DATA',
                    data: { content: latestAIMessage.mes },
                    source: 'message_received'
                });
            } else {
                // 回退到原有逻辑
                console.log('[InfoBarSettings] ⚠️ 任务队列不可用，使用原有逻辑');
                await this.processWithCustomAPI(latestAIMessage.mes);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理消息接收事件失败:', error);
        }
    }

    /**
     * 获取最新的AI消息
     * 🔧 修复：增加消息验证，确保获取的是真正新生成的AI消息
     */
    getLatestAIMessage() {
        try {
            const context = SillyTavern.getContext();
            if (!context || !context.chat || context.chat.length === 0) {
                return null;
            }

            // 从后往前查找最新的AI消息
            for (let i = context.chat.length - 1; i >= 0; i--) {
                const message = context.chat[i];
                if (message && !message.is_user) {
                    console.log('[InfoBarSettings] 🔍 找到AI消息:', {
                        index: i,
                        messageId: message.mes_id || 'unknown',
                        sendDate: message.send_date || 'unknown',
                        contentLength: message.mes ? message.mes.length : 0,
                        hasInfobarData: message.mes ? message.mes.includes('<infobar_data>') : false
                    });
                    return message;
                }
            }

            return null;
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取最新AI消息失败:', error);
            return null;
        }
    }

    /**
     * 🔧 新增：验证AI消息是否为真正新生成的消息
     */
    validateAIMessageIsNew(aiMessage) {
        try {
            if (!aiMessage) {
                console.log('[InfoBarSettings] ⚠️ AI消息为空，验证失败');
                return false;
            }

            const context = SillyTavern.getContext();
            if (!context || !context.chat || context.chat.length === 0) {
                console.log('[InfoBarSettings] ⚠️ 聊天上下文无效，验证失败');
                return false;
            }

            // 获取最后一条用户消息的索引
            let lastUserMessageIndex = -1;
            for (let i = context.chat.length - 1; i >= 0; i--) {
                const message = context.chat[i];
                if (message && message.is_user) {
                    lastUserMessageIndex = i;
                    break;
                }
            }

            if (lastUserMessageIndex === -1) {
                console.log('[InfoBarSettings] ⚠️ 未找到用户消息，跳过验证');
                return true; // 如果没有用户消息，可能是特殊情况，允许处理
            }

            // 获取AI消息在聊天记录中的索引
            let aiMessageIndex = -1;
            for (let i = 0; i < context.chat.length; i++) {
                const message = context.chat[i];
                if (message === aiMessage) {
                    aiMessageIndex = i;
                    break;
                }
            }

            if (aiMessageIndex === -1) {
                console.log('[InfoBarSettings] ⚠️ 无法在聊天记录中找到AI消息，验证失败');
                return false;
            }

            // AI消息应该在最后一条用户消息之后
            const isAfterLastUser = aiMessageIndex > lastUserMessageIndex;

            console.log('[InfoBarSettings] 🔍 AI消息验证结果:', {
                aiMessageIndex: aiMessageIndex,
                lastUserMessageIndex: lastUserMessageIndex,
                isAfterLastUser: isAfterLastUser,
                aiMessageTime: aiMessage.send_date || 'unknown'
            });

            return isAfterLastUser;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 验证AI消息失败:', error);
            return false; // 验证失败时默认不处理，避免错误
        }
    }

    /**
     * 🔧 新增：处理AI生成失败的情况
     */
    handleAIGenerationFailure(reason = 'unknown') {
        try {
            console.log('[InfoBarSettings] ⚠️ 处理AI生成失败:', reason);

            // 记录失败统计
            if (!window.InfoBarGenerationStats) {
                window.InfoBarGenerationStats = {
                    failures: 0,
                    lastFailureTime: null,
                    lastFailureReason: null
                };
            }

            window.InfoBarGenerationStats.failures++;
            window.InfoBarGenerationStats.lastFailureTime = new Date().toISOString();
            window.InfoBarGenerationStats.lastFailureReason = reason;

            console.log('[InfoBarSettings] 📊 生成失败统计已更新:', {
                totalFailures: window.InfoBarGenerationStats.failures,
                lastFailure: window.InfoBarGenerationStats.lastFailureTime,
                reason: reason
            });

            // 通知事件系统AI生成失败
            if (this.eventSystem) {
                this.eventSystem.emit('ai:generation:failed', {
                    reason: reason,
                    timestamp: Date.now(),
                    context: 'custom_api_processing'
                });
            }

            // 如果设置界面可见，显示状态提示
            if (this.visible && this.modal) {
                this.showMessage(`AI生成失败: ${reason}`, 'warning');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理AI生成失败逻辑出错:', error);
        }
    }

    /**
     * 🔧 新增：验证AI消息长度是否足够生成信息栏数据
     */
    validateAIMessageLength(aiMessage, minLength = 100) {
        try {
            if (!aiMessage || !aiMessage.mes) {
                console.log('[InfoBarSettings] ⚠️ AI消息内容为空，长度验证失败');
                return { isValid: false, actualLength: 0, reason: '消息内容为空' };
            }

            // 获取消息内容并清理可能存在的标签
            let messageContent = aiMessage.mes;

            // 移除可能存在的XML标签和多余空白
            messageContent = messageContent
                .replace(/<[^>]+>/g, '') // 移除所有XML/HTML标签
                .replace(/\s+/g, ' ')    // 将多个空白字符替换为单个空格
                .trim();

            const actualLength = messageContent.length;
            const isValid = actualLength >= minLength;

            console.log('[InfoBarSettings] 📏 AI消息长度验证:', {
                minRequired: minLength,
                actualLength: actualLength,
                isValid: isValid,
                contentPreview: messageContent.substring(0, 50) + (messageContent.length > 50 ? '...' : '')
            });

            return {
                isValid: isValid,
                actualLength: actualLength,
                reason: isValid ? '长度充足' : `内容过短，实际长度${actualLength}字，要求至少${minLength}字`
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 验证AI消息长度失败:', error);
            return { isValid: false, actualLength: 0, reason: '长度验证出错: ' + error.message };
        }
    }

    /**
     * 🔧 新增：直接处理自定义API调用（供任务队列使用）
     * 避免任务队列的循环调用
     */
    async processWithCustomAPIDirectly(plotContent) {
        return await this.processWithCustomAPIInternal(plotContent);
    }

    /**
     * 使用自定义API处理剧情内容
     */
    async processWithCustomAPI(plotContent) {
        // 🔧 修复：用户主动触发新生成时，重置中止标志
        console.log('[InfoBarSettings] 🔄 用户触发新的自定义API生成，重置中止标志');
        this._customAPIAborted = false;

        // 🔧 优化：如果有任务队列，使用任务队列处理
        if (this.customAPITaskQueue) {
            console.log('[InfoBarSettings] 📋 使用任务队列处理自定义API调用（手动触发）');
            this.customAPITaskQueue.addTask({
                type: 'INFOBAR_DATA',
                data: { content: plotContent },
                source: 'manual_refill'  // 🔧 修复：标记为手动重新填表
            });
            return;
        }

        // 否则直接处理
        return await this.processWithCustomAPIInternal(plotContent);
    }

    /**
     * 🔧 内部方法：实际的自定义API处理逻辑
     */
    async processWithCustomAPIInternal(plotContent) {
        try {
            // 🔧 修复：在开始处理前检查中止标志
            if (this._customAPIAborted) {
                console.log('[InfoBarSettings] 🛑 检测到中止标志，拒绝新的API请求');
                // 抛出特殊错误，让任务队列知道这是用户主动中止
                const abortError = new Error('用户已中止API生成');
                abortError.name = 'AbortError';
                abortError.isUserAbort = true;
                throw abortError;
            }

            // 并发保护：防止重复触发
            if (this._customAPIProcessing) {
                console.warn('[InfoBarSettings] ⚠️ 自定义API处理已在进行中，忽略重复调用');
                this.showNotification('⏳ 自定义API处理中，请勿重复触发', 'warning');
                return;
            }
            this._customAPIProcessing = true;

            // 🔧 修复：不要在这里重置中止标志，保持用户的中止意图
            // 只在真正开始新的生成时才重置（由外部调用者控制）
            // this._customAPIAborted = false; // ❌ 删除

            // 🔧 新增：创建AbortController用于中止请求
            this.currentAPIController = new AbortController();

            console.log('[InfoBarSettings] 🚀 开始使用自定义API处理剧情内容...');

            // 🔧 新增：显示自定义API生成中提示
            this.showCustomAPIStatus('generating');

            // 验证剧情内容
            if (!plotContent || typeof plotContent !== 'string') {
                console.warn('[InfoBarSettings] ⚠️ 剧情内容无效:', typeof plotContent);
                this.showCustomAPIStatus('error', '剧情内容无效');
                return;
            }

            console.log('[InfoBarSettings] 📝 剧情内容长度:', plotContent.length);

            // 🔧 修复：移除重复的智能提示词处理
            // 智能提示词会在enhanceMessagesWithSystemPrompt()中统一处理
            console.log('[InfoBarSettings] ✅ 智能提示词将在消息增强阶段统一处理');

            // 🔧 修复：正确调用变量系统提示词生成方法
            let variablePrompt = '';
            try {
                const variableSystemPrompt = window.SillyTavernInfobar?.modules?.variableSystemPrompt;
                if (variableSystemPrompt && typeof variableSystemPrompt.generatePromptTemplate === 'function') {
                    variablePrompt = await variableSystemPrompt.generatePromptTemplate();
                    console.log('[InfoBarSettings] ✅ 获取到变量系统读取提示词，长度:', variablePrompt.length);
                } else {
                    console.warn('[InfoBarSettings] ⚠️ 变量系统提示词模块不可用或缺少generatePromptTemplate方法');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 获取变量系统读取提示词失败:', error);
            }

            // 🔧 新增：获取世界书内容
            let worldBookContent = '';
            const context = SillyTavern.getContext();
            const apiConfig = context.extensionSettings['Information bar integration tool']?.apiConfig || {};
            if (apiConfig.includeWorldBook) {
                try {
                    worldBookContent = await this.getWorldBookContent();
                    if (worldBookContent) {
                        console.log('[InfoBarSettings] 📚 获取到世界书内容，长度:', worldBookContent.length);
                    } else {
                        console.log('[InfoBarSettings] 📚 世界书内容为空或未激活');
                    }
                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 获取世界书内容失败:', error);
                }
            }

            // 🔧 修复：智能提示词现在在消息增强阶段处理，这里不再需要
            let fullSystemPrompt = '';

            // 🔧 修复：手动处理变量替换，然后添加变量系统读取提示词
            if (variablePrompt) {
                try {
                    // 手动调用SillyTavern的变量替换功能
                    if (typeof context.substituteParams === 'function') {
                        variablePrompt = context.substituteParams(variablePrompt);
                        console.log('[InfoBarSettings] ✅ 变量替换完成，处理后长度:', variablePrompt.length);
                    } else {
                        console.warn('[InfoBarSettings] ⚠️ SillyTavern变量替换功能不可用，跳过变量处理');
                    }
                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 变量替换失败:', error);
                }
                fullSystemPrompt = variablePrompt + '\n\n' + fullSystemPrompt;
            }

            // 添加世界书内容
            if (worldBookContent) {
                fullSystemPrompt = fullSystemPrompt + '\n\n## 📚 世界书信息\n\n' + worldBookContent;
            }

            // 准备API请求
            console.log('[InfoBarSettings] 📡 准备发送自定义API请求...');
            const messages = [
                {
                    role: 'system',
                    content: fullSystemPrompt
                },
                {
                    role: 'user',
                    content: `请根据以下剧情内容生成信息栏数据：\n\n${plotContent}`
                }
            ];

            console.log('[InfoBarSettings] 📊 请求详情:', {
                messagesCount: messages.length,
                systemPromptLength: fullSystemPrompt.length,

                variablePromptLength: variablePrompt.length,
                worldBookLength: worldBookContent.length,
                userPromptLength: plotContent.length,
                apiProvider: this.getAPIProvider(),
                apiModel: this.getAPIModel(),
                includeWorldBook: apiConfig.includeWorldBook
            });

            // 发送自定义API请求（增强重试逻辑）
            const cfg = context.extensionSettings['Information bar integration tool']?.apiConfig || {};
            const maxRetry = Number(cfg.retryCount ?? 5); // 增加默认重试次数
            const baseRetryDelayMs = 2000; // 增加基础延迟时间

            let attempt = 0;
            let lastError = null;
            while (attempt <= maxRetry) {
                // 🔧 新增：检查是否已中止
                if (this._customAPIAborted) {
                    console.log('[InfoBarSettings] 🛑 检测到中止标志，停止处理');
                    return;
                }

                attempt++;
                const result = await this.sendCustomAPIRequest(messages, {
                    skipSystemPrompt: false,
                    signal: this.currentAPIController?.signal // 传递AbortSignal
                });

                // 🔧 新增：再次检查是否已中止
                if (this._customAPIAborted) {
                    console.log('[InfoBarSettings] 🛑 检测到中止标志，停止处理');
                    return;
                }

                if (result && result.success && typeof result.text === 'string' && result.text.trim().length > 0) {
                    console.log('[InfoBarSettings] ✅ 自定义API返回结果，长度:', result.text.length, ' 尝试次数:', attempt);
                    await this.processAPIResult(result.text);
                    // 🔧 新增：显示自定义API生成完成提示
                    this.showCustomAPIStatus('success');
                    break;
                } else {
                    lastError = result?.error || '空响应或格式无效';
                    console.warn(`[InfoBarSettings] ⚠️ API结果为空或无效，准备重试 (${attempt}/${maxRetry}) ...`);
                    if (attempt > maxRetry) {
                        console.error('[InfoBarSettings] ❌ 重试达上限，放弃。本次错误:', lastError);
                        this.showCustomAPIStatus('error', '重试失败: ' + lastError);
                        break;
                    }
                    // 🔧 指数退避重试策略：每次重试延迟时间递增
                    const retryDelayMs = baseRetryDelayMs * Math.pow(1.5, attempt - 1);
                    console.log(`[InfoBarSettings] ⏳ 等待 ${retryDelayMs}ms 后重试...`);
                    await new Promise(r=>setTimeout(r, retryDelayMs));
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 使用自定义API处理失败:', error);

            // 🔧 修复：检查是否是中止错误
            if (error.name === 'AbortError' || this._customAPIAborted || error.isUserAbort) {
                console.log('[InfoBarSettings] 🛑 API请求已被中止');
                // 中止时不显示错误提示，因为已经显示了中止提示
                // 🔧 修复：重新抛出错误，让任务队列知道任务被中止
                throw error;
            } else {
                // 🔧 新增：显示自定义API错误提示
                this.showCustomAPIStatus('error', error.message);
                // 🔧 修复：重新抛出错误，让任务队列知道任务失败
                throw error;
            }
        } finally {
            // 复位并发标记
            this._customAPIProcessing = false;

            // 🔧 新增：清理AbortController
            if (this.currentAPIController) {
                this.currentAPIController = null;
            }
            // 🔧 新增：清理统一的超时句柄
            if (this.currentAPITimeoutId) {
                clearTimeout(this.currentAPITimeoutId);
                this.currentAPITimeoutId = null;
            }
        }
    }

    /**
     * 显示自定义API状态提示
     */
    showCustomAPIStatus(status, message = '') {
        try {
            // 移除现有的状态提示
            const existingToast = document.querySelector('.custom-api-status-toast');
            if (existingToast) {
                existingToast.remove();
            }

            let toastContent = '';
            let toastClass = 'custom-api-status-toast';
            let autoHide = false;

            switch (status) {
                case 'generating':
                    toastContent = '🤖 自定义API生成中...';
                    toastClass += ' generating';
                    break;
                case 'success':
                    toastContent = '✅ 自定义API已生成';
                    toastClass += ' success';
                    autoHide = true;
                    break;
                case 'error':
                    toastContent = `❌ 自定义API生成失败${message ? ': ' + message : ''}`;
                    toastClass += ' error';
                    autoHide = true;
                    break;
                case 'aborted':
                    toastContent = '⚠️ 自定义API生成已中止';
                    toastClass += ' aborted';
                    autoHide = true;
                    break;
            }

            // 创建提示元素
            const toast = document.createElement('div');
            toast.className = toastClass;

            // 🔧 新增：为generating状态添加中止按钮
            if (status === 'generating') {
                toast.innerHTML = `
                    <div class="toast-content">
                        <span class="toast-text">${toastContent}</span>
                        <div class="toast-actions">
                            <button class="toast-abort-btn" data-action="abort-api">中止</button>
                            <button class="toast-close" onclick="this.parentElement.parentElement.remove()">×</button>
                        </div>
                    </div>
                `;
            } else {
                toast.innerHTML = `
                    <div class="toast-content">
                        <span class="toast-text">${toastContent}</span>
                        <button class="toast-close" onclick="this.parentElement.parentElement.remove()">×</button>
                    </div>
                `;
            }

            // 添加样式
            if (!document.getElementById('custom-api-status-styles')) {
                const style = document.createElement('style');
                style.id = 'custom-api-status-styles';
                style.textContent = `
                    .custom-api-status-toast {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        z-index: 10000;
                        min-width: 300px;
                        max-width: 500px;
                        padding: 0;
                        border-radius: 8px;
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        animation: slideInRight 0.3s ease-out;
                    }
                    .custom-api-status-toast.generating {
                        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                        color: white;
                    }
                    .custom-api-status-toast.success {
                        background: linear-gradient(135deg, #10b981, #059669);
                        color: white;
                    }
                    .custom-api-status-toast.error {
                        background: linear-gradient(135deg, #ef4444, #dc2626);
                        color: white;
                    }
                    .custom-api-status-toast.aborted {
                        background: linear-gradient(135deg, #f59e0b, #d97706);
                        color: white;
                    }
                    .toast-content {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        padding: 12px 16px;
                    }
                    .toast-text {
                        flex: 1;
                        font-size: 14px;
                        font-weight: 500;
                    }
                    .toast-actions {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                        margin-left: 12px;
                    }
                    .toast-abort-btn {
                        background: rgba(255, 255, 255, 0.2);
                        border: 1px solid rgba(255, 255, 255, 0.3);
                        color: white;
                        font-size: 12px;
                        font-weight: 500;
                        cursor: pointer;
                        padding: 4px 12px;
                        border-radius: 4px;
                        transition: all 0.2s;
                    }
                    .toast-abort-btn:hover {
                        background: rgba(255, 255, 255, 0.3);
                        border-color: rgba(255, 255, 255, 0.5);
                    }
                    .toast-close {
                        background: none;
                        border: none;
                        color: inherit;
                        font-size: 18px;
                        font-weight: bold;
                        cursor: pointer;
                        padding: 0;
                        opacity: 0.8;
                        transition: opacity 0.2s;
                    }
                    .toast-close:hover {
                        opacity: 1;
                    }
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                    @keyframes slideOutRight {
                        from {
                            transform: translateX(0);
                            opacity: 1;
                        }
                        to {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(style);
            }

            // 添加到页面
            document.body.appendChild(toast);

            // 🔧 新增：绑定中止按钮事件
            if (status === 'generating') {
                const abortBtn = toast.querySelector('.toast-abort-btn');
                if (abortBtn) {
                    abortBtn.addEventListener('click', () => {
                        console.log('[InfoBarSettings] 🛑 用户点击中止按钮');
                        this.abortCustomAPIGeneration();
                        toast.remove();
                    });
                }
            }

            // 自动隐藏
            if (autoHide) {
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.style.animation = 'slideOutRight 0.3s ease-in';
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.remove();
                            }
                        }, 300);
                    }
                }, 3000);
            }

            console.log('[InfoBarSettings] 📢 自定义API状态提示已显示:', status, message);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示自定义API状态提示失败:', error);
        }
    }

    /**
     * 🆕 中止自定义API生成
     */
    async abortCustomAPIGeneration() {
        try {
            console.log('[InfoBarSettings] 🛑 中止自定义API生成...');

            // 🔧 修复：设置中止标志（这个标志会阻止新的API请求）
            this._customAPIAborted = true;

            // 🔧 修复：复位处理标志
            this._customAPIProcessing = false;

            // 🔧 修复：先通知后端取消（如果可能），再本地中止
            await this.sendBackendCancelIfPossible();
            if (this.currentAPIController) {
                console.log('[InfoBarSettings] 🛑 中止正在进行的API请求');
                this.currentAPIController.abort();
                this.currentAPIController = null;
            }

            // 🔧 修复：清空任务队列中的待处理任务
            const taskQueue = window.SillyTavernInfobar?.modules?.customAPITaskQueue;
            if (taskQueue && taskQueue.taskQueue) {
                const beforeCount = taskQueue.taskQueue.length;
                // 移除所有INFOBAR_DATA类型的待处理任务
                taskQueue.taskQueue = taskQueue.taskQueue.filter(task => task.type !== 'INFOBAR_DATA');
                const afterCount = taskQueue.taskQueue.length;
                const removedCount = beforeCount - afterCount;
                if (removedCount > 0) {
                    console.log(`[InfoBarSettings] 🗑️ 已清除 ${removedCount} 个待处理的信息栏数据生成任务`);
                }
            }

            // 显示中止提示
            this.showCustomAPIStatus('aborted');

            console.log('[InfoBarSettings] ✅ 自定义API生成已中止');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 中止自定义API生成失败:', error);
        }
    }

    /**
     * 发送后端取消请求（若使用了SillyTavern本地反代）
     */
    async sendBackendCancelIfPossible() {
        try {
            if (!this.lastRequestUrl || !this.currentAPIRequestId) return;
            const isBackendGenerate = this.lastRequestUrl.includes('/api/backends/chat-completions/generate');
            if (!isBackendGenerate) return;

            const cancelUrl = `${window.location.origin}/api/backends/chat-completions/cancel`;
            // 获取CSRF令牌
            const csrfResp = await fetch('/csrf-token');
            const csrfData = await csrfResp.json();
            const csrfToken = csrfData.token;

            const payload = { request_id: this.currentAPIRequestId };
            await fetch(cancelUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken,
                    'X-Request-ID': this.currentAPIRequestId
                },
                body: JSON.stringify(payload)
            });
            console.log('[InfoBarSettings] 🛑 已向后端发送取消请求:', payload);
        } catch (err) {
            console.warn('[InfoBarSettings] ⚠️ 发送取消请求失败（将忽略并继续本地中止）：', err);
        } finally {
            // 清理请求ID
            this.currentAPIRequestId = null;
            this.lastRequestUrl = null;
        }
    }


    /**
     * 导出数据功能
     */
    async exportData() {
        try {
            console.log('[InfoBarSettings] 📤 开始导出数据...');

            // 获取用户选择的范围和格式
            const scopeSelect = this.modal.querySelector('#data-scope-select');
            const formatSelect = this.modal.querySelector('#data-format-select');

            if (!scopeSelect || !formatSelect) {
                this.showMessage('❌ 无法获取导出设置', 'error');
                return;
            }

            const scope = scopeSelect.value; // 'current' 或 'all'
            const format = formatSelect.value; // 'json', 'csv', 或 'xml'

            console.log('[InfoBarSettings] 📊 导出设置:', { scope, format });

            // 显示导出进度提示
            this.showMessage('🔄 正在收集数据...', 'info');

            // 收集数据
            const exportData = await this.collectExportData(scope);

            if (!exportData || Object.keys(exportData).length === 0) {
                this.showMessage('⚠️ 没有找到可导出的数据', 'warning');
                return;
            }

            console.log('[InfoBarSettings] 📊 收集到的数据:', {
                chats: exportData.chats?.length || 0,
                totalMessages: exportData.chats?.reduce((sum, chat) => sum + (chat.messages?.length || 0), 0) || 0,
                infobarDataEntries: Object.keys(exportData.infobarData || {}).length
            });

            // 转换为指定格式
            let exportContent;
            let fileName;
            let mimeType;

            switch (format) {
                case 'json':
                    exportContent = JSON.stringify(exportData, null, 2);
                    fileName = `infobar_data_${this.getTimestamp()}.json`;
                    mimeType = 'application/json';
                    break;
                case 'csv':
                    exportContent = this.convertToCSV(exportData);
                    fileName = `infobar_data_${this.getTimestamp()}.csv`;
                    mimeType = 'text/csv';
                    break;
                case 'xml':
                    exportContent = this.convertToXML(exportData);
                    fileName = `infobar_data_${this.getTimestamp()}.xml`;
                    mimeType = 'application/xml';
                    break;
                default:
                    throw new Error('不支持的导出格式: ' + format);
            }

            // 触发下载
            this.downloadFile(exportContent, fileName, mimeType);

            this.showMessage(`✅ 数据已导出为 ${fileName}`, 'success');
            console.log('[InfoBarSettings] ✅ 数据导出完成:', fileName);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导出数据失败:', error);
            this.showMessage('❌ 导出数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 收集导出数据
     */
    async collectExportData(scope) {
        try {
            const exportData = {
                metadata: {
                    exportTime: new Date().toISOString(),
                    scope: scope,
                    version: '1.0.0',
                    source: 'Information bar integration tool'
                },
                chats: [],
                infobarData: {},
                settings: {}
            };

            // 获取SillyTavern上下文
            const context = SillyTavern.getContext();
            if (!context) {
                throw new Error('无法获取SillyTavern上下文');
            }

            // 收集聊天数据
            if (scope === 'current') {
                // 当前聊天
                const currentChatId = context.chatId;
                if (currentChatId && context.chat) {
                    const chatData = {
                        chatId: currentChatId,
                        chatName: context.name2 || 'Unknown',
                        character: context.name2 || 'Unknown',
                        messages: context.chat || [],
                        timestamp: new Date().toISOString()
                    };
                    exportData.chats.push(chatData);

                    // 收集当前聊天的信息栏数据
                    if (this.unifiedDataCore?.getChatData) {
                        const chatInfobarData = await this.unifiedDataCore.getChatData(currentChatId);
                        if (chatInfobarData && Object.keys(chatInfobarData).length > 0) {
                            exportData.infobarData[currentChatId] = chatInfobarData;
                        }
                    }
                }
            } else {
                // 所有聊天
                const allChats = context.characters || [];
                for (const character of allChats) {
                    if (character) {
                        const chatData = {
                            chatId: character.filename || character.name,
                            chatName: character.name,
                            character: character.name,
                            // 注意：非当前聊天的消息正文通常未预加载，避免导出错误结构
                            messages: Array.isArray(character.chat) ? character.chat : [],
                            timestamp: new Date().toISOString()
                        };
                        exportData.chats.push(chatData);

                        // 收集该聊天的信息栏数据
                        if (this.unifiedDataCore?.getChatData) {
                            const cid = character.filename || character.name;
                            const chatInfobarData = await this.unifiedDataCore.getChatData(cid);
                            if (chatInfobarData && Object.keys(chatInfobarData).length > 0) {
                                exportData.infobarData[cid] = chatInfobarData;
                            }
                        }
                    }
                }
            }

            // 收集扩展设置（脱敏apiKey）
            const extensionSettings = context.extensionSettings;
            if (extensionSettings && extensionSettings['Information bar integration tool']) {
                const safeSettings = JSON.parse(JSON.stringify(extensionSettings['Information bar integration tool']));
                if (safeSettings?.apiConfig?.apiKey) {
                    safeSettings.apiConfig.apiKey = '***REMOVED***';
                }
                exportData.settings = safeSettings;
            }

            console.log('[InfoBarSettings] 📊 数据收集完成:', {
                chats: exportData.chats.length,
                infobarDataKeys: Object.keys(exportData.infobarData).length,
                hasSettings: !!exportData.settings
            });

            return exportData;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 收集导出数据失败:', error);
            throw error;
        }
    }

    /**
     * 转换数据为CSV格式
     */
    convertToCSV(data) {
        try {
            let csvContent = '';

            // CSV头部信息
            csvContent += '# Information Bar Integration Tool Data Export\n';
            csvContent += `# Export Time: ${data.metadata.exportTime}\n`;
            csvContent += `# Scope: ${data.metadata.scope}\n`;
            csvContent += '\n';

            // 聊天数据表
            if (data.chats && data.chats.length > 0) {
                csvContent += 'Chat Data\n';
                csvContent += 'Chat ID,Chat Name,Character,Message Count,Last Message Time\n';

                data.chats.forEach(chat => {
                    const messageCount = chat.messages ? chat.messages.length : 0;
                    const lastMessageTime = chat.messages && chat.messages.length > 0
                        ? (chat.messages[chat.messages.length - 1].send_date || 'Unknown')
                        : 'No messages';

                    csvContent += `"${chat.chatId}","${chat.chatName}","${chat.character}",${messageCount},"${lastMessageTime}"\n`;
                });
                csvContent += '\n';
            }

            // 信息栏数据表
            if (data.infobarData && Object.keys(data.infobarData).length > 0) {
                csvContent += 'InfoBar Data\n';
                csvContent += 'Chat ID,Message ID,Panel Type,Data Key,Data Value\n';

                Object.entries(data.infobarData).forEach(([chatId, chatData]) => {
                    Object.entries(chatData).forEach(([messageId, messageData]) => {
                        Object.entries(messageData).forEach(([panelType, panelData]) => {
                            if (typeof panelData === 'object') {
                                Object.entries(panelData).forEach(([key, value]) => {
                                    const valueStr = typeof value === 'object' ? JSON.stringify(value) : String(value);
                                    csvContent += `"${chatId}","${messageId}","${panelType}","${key}","${valueStr}"\n`;
                                });
                            }
                        });
                    });
                });
            }

            return csvContent;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 转换CSV格式失败:', error);
            throw new Error('CSV格式转换失败: ' + error.message);
        }
    }

    /**
     * 转换数据为XML格式
     */
    convertToXML(data) {
        try {
            let xmlContent = '<?xml version="1.0" encoding="UTF-8"?>\n';
            xmlContent += '<InfoBarExport>\n';

            // 元数据
            xmlContent += '  <Metadata>\n';
            xmlContent += `    <ExportTime>${this.escapeXML(data.metadata.exportTime)}</ExportTime>\n`;
            xmlContent += `    <Scope>${this.escapeXML(data.metadata.scope)}</Scope>\n`;
            xmlContent += `    <Version>${this.escapeXML(data.metadata.version)}</Version>\n`;
            xmlContent += `    <Source>${this.escapeXML(data.metadata.source)}</Source>\n`;
            xmlContent += '  </Metadata>\n';

            // 聊天数据
            if (data.chats && data.chats.length > 0) {
                xmlContent += '  <Chats>\n';
                data.chats.forEach(chat => {
                    xmlContent += '    <Chat>\n';
                    xmlContent += `      <ChatId>${this.escapeXML(chat.chatId)}</ChatId>\n`;
                    xmlContent += `      <ChatName>${this.escapeXML(chat.chatName)}</ChatName>\n`;
                    xmlContent += `      <Character>${this.escapeXML(chat.character)}</Character>\n`;
                    xmlContent += `      <MessageCount>${chat.messages ? chat.messages.length : 0}</MessageCount>\n`;
                    xmlContent += `      <Timestamp>${this.escapeXML(chat.timestamp)}</Timestamp>\n`;
                    xmlContent += '    </Chat>\n';
                });
                xmlContent += '  </Chats>\n';
            }

            // 信息栏数据
            if (data.infobarData && Object.keys(data.infobarData).length > 0) {
                xmlContent += '  <InfoBarData>\n';
                Object.entries(data.infobarData).forEach(([chatId, chatData]) => {
                    xmlContent += `    <ChatData chatId="${this.escapeXML(chatId)}">\n`;
                    Object.entries(chatData).forEach(([messageId, messageData]) => {
                        xmlContent += `      <MessageData messageId="${this.escapeXML(messageId)}">\n`;
                        Object.entries(messageData).forEach(([panelType, panelData]) => {
                            xmlContent += `        <Panel type="${this.escapeXML(panelType)}">\n`;
                            if (typeof panelData === 'object') {
                                Object.entries(panelData).forEach(([key, value]) => {
                                    const valueStr = typeof value === 'object' ? JSON.stringify(value) : String(value);
                                    xmlContent += `          <Data key="${this.escapeXML(key)}">${this.escapeXML(valueStr)}</Data>\n`;
                                });
                            }
                            xmlContent += '        </Panel>\n';
                        });
                        xmlContent += '      </MessageData>\n';
                    });
                    xmlContent += '    </ChatData>\n';
                });
                xmlContent += '  </InfoBarData>\n';
            }

            xmlContent += '</InfoBarExport>';
            return xmlContent;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 转换XML格式失败:', error);
            throw new Error('XML格式转换失败: ' + error.message);
        }
    }

    /**
     * XML转义函数
     */
    escapeXML(str) {
        if (typeof str !== 'string') {
            str = String(str);
        }
        return str.replace(/[<>&'"]/g, (char) => {
            switch (char) {
                case '<': return '&lt;';
                case '>': return '&gt;';
                case '&': return '&amp;';
                case "'": return '&apos;';
                case '"': return '&quot;';
                default: return char;
            }
        });
    }

    /**
     * 获取时间戳字符串
     */
    getTimestamp() {
        const now = new Date();
        return now.toISOString().replace(/[:.]/g, '-').slice(0, -5);
    }

    /**
     * 下载文件
     */
    downloadFile(content, fileName, mimeType) {
        try {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // 清理URL对象
            setTimeout(() => URL.revokeObjectURL(url), 1000);

            console.log('[InfoBarSettings] 📁 文件下载触发:', fileName);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 下载文件失败:', error);
            throw new Error('文件下载失败: ' + error.message);
        }
    }

    /**
     * 导入数据功能
     */
    async importData() {
        try {
            console.log('[InfoBarSettings] 📥 开始导入数据...');

            // 创建文件选择器
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json,.csv,.xml';
            fileInput.style.display = 'none';

            // 监听文件选择
            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (!file) {
                    return;
                }

                try {
                    this.showMessage('🔄 正在读取文件...', 'info');

                    // 读取文件内容
                    const content = await this.readFileContent(file);

                    // 解析数据
                    const importData = await this.parseImportData(content, file.name);

                    // 显示确认对话框
                    const confirmed = await this.showImportConfirmDialog(importData);

                    if (confirmed) {
                        // 执行导入
                        await this.executeImport(importData);
                        this.showMessage('✅ 数据导入成功', 'success');
                    } else {
                        this.showMessage('ℹ️ 导入已取消', 'info');
                    }

                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 导入数据失败:', error);
                    this.showMessage('❌ 导入数据失败: ' + error.message, 'error');
                } finally {
                    // 清理文件输入
                    if (fileInput.parentNode) {
                        fileInput.parentNode.removeChild(fileInput);
                    }
                }
            });

            // 触发文件选择
            document.body.appendChild(fileInput);
            fileInput.click();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 导入数据失败:', error);
            this.showMessage('❌ 导入数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 读取文件内容
     */
    readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(new Error('文件读取失败'));
            reader.readAsText(file, 'UTF-8');
        });
    }

    /**
     * 解析导入数据
     */
    async parseImportData(content, fileName) {
        try {
            const fileExtension = fileName.split('.').pop().toLowerCase();
            let parsedData;

            switch (fileExtension) {
                case 'json':
                    parsedData = JSON.parse(content);
                    break;
                case 'csv':
                    parsedData = this.parseCSVData(content);
                    break;
                case 'xml':
                    parsedData = this.parseXMLData(content);
                    break;
                default:
                    throw new Error('不支持的文件格式: ' + fileExtension);
            }

            // 验证数据结构
            this.validateImportData(parsedData);

            return parsedData;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 解析导入数据失败:', error);
            throw new Error('数据解析失败: ' + error.message);
        }
    }

    /**
     * 解析CSV数据（简化版本）
     */
    parseCSVData(content) {
        // 这里实现一个简化的CSV解析
        // 实际项目中可能需要更复杂的CSV解析逻辑
        throw new Error('CSV导入功能暂未实现，请使用JSON格式');
    }

    /**
     * 解析XML数据（简化版本）
     */
    parseXMLData(content) {
        // 这里实现一个简化的XML解析
        // 实际项目中可能需要更复杂的XML解析逻辑
        throw new Error('XML导入功能暂未实现，请使用JSON格式');
    }

    /**
     * 验证导入数据结构
     */
    validateImportData(data) {
        if (!data || typeof data !== 'object') {
            throw new Error('数据格式无效');
        }

        if (!data.metadata) {
            throw new Error('缺少元数据信息');
        }

        if (!data.metadata.source || data.metadata.source !== 'Information bar integration tool') {
            throw new Error('数据来源不匹配，请确保是本工具导出的数据');
        }

        console.log('[InfoBarSettings] ✅ 数据验证通过');
    }

    /**
     * 显示导入确认对话框
     */
    showImportConfirmDialog(importData) {
        return new Promise((resolve) => {
            try {
                // 统计导入数据
                const stats = {
                    chats: importData.chats ? importData.chats.length : 0,
                    totalMessages: importData.chats ? importData.chats.reduce((sum, chat) => sum + (chat.messages?.length || 0), 0) : 0,
                    infobarDataEntries: importData.infobarData ? Object.keys(importData.infobarData).length : 0,
                    hasSettings: !!importData.settings
                };

                // 创建确认对话框
                const dialog = document.createElement('div');
                dialog.className = 'import-confirm-dialog';
                dialog.innerHTML = `
                    <div class="dialog-overlay">
                        <div class="dialog-content">
                            <h3>确认导入数据</h3>
                            <div class="import-stats">
                                <p><strong>导入数据统计：</strong></p>
                                <ul>
                                    <li>聊天数量: ${stats.chats}</li>
                                    <li>消息总数: ${stats.totalMessages}</li>
                                    <li>信息栏数据条目: ${stats.infobarDataEntries}</li>
                                    <li>包含设置: ${stats.hasSettings ? '是' : '否'}</li>
                                </ul>
                                <p><strong>导出时间:</strong> ${importData.metadata.exportTime}</p>
                                <p><strong>数据范围:</strong> ${importData.metadata.scope === 'current' ? '当前聊天' : '所有聊天'}</p>
                            </div>
                            <div class="import-warning">
                                <p>⚠️ <strong>注意：</strong></p>
                                <ul>
                                    <li>导入操作将覆盖现有的信息栏数据</li>
                                    <li>建议在导入前先导出当前数据作为备份</li>
                                    <li>此操作无法撤销</li>
                                </ul>
                            </div>
                            <div class="dialog-actions">
                                <button class="btn btn-danger" data-action="confirm">确认导入</button>
                                <button class="btn btn-secondary" data-action="cancel">取消</button>
                            </div>
                        </div>
                    </div>
                `;

                // 添加样式
                if (!document.getElementById('import-dialog-styles')) {
                    const style = document.createElement('style');
                    style.id = 'import-dialog-styles';
                    style.textContent = `
                        .import-confirm-dialog {
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            z-index: 10001;
                        }
                        .dialog-overlay {
                            width: 100%;
                            height: 100%;
                            background: rgba(0, 0, 0, 0.5);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                        }
                        .dialog-content {
                            background: white;
                            border-radius: 8px;
                            padding: 24px;
                            max-width: 500px;
                            max-height: 80vh;
                            overflow-y: auto;
                            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                        }
                        .dialog-content h3 {
                            margin: 0 0 16px 0;
                            color: #333;
                        }
                        .import-stats {
                            background: #f8f9fa;
                            padding: 16px;
                            border-radius: 6px;
                            margin: 16px 0;
                        }
                        .import-stats ul {
                            margin: 8px 0;
                            padding-left: 20px;
                        }
                        .import-warning {
                            background: #fff3cd;
                            border: 1px solid #ffeaa7;
                            padding: 16px;
                            border-radius: 6px;
                            margin: 16px 0;
                        }
                        .import-warning ul {
                            margin: 8px 0;
                            padding-left: 20px;
                        }
                        .dialog-actions {
                            display: flex;
                            gap: 12px;
                            justify-content: flex-end;
                            margin-top: 24px;
                        }
                        .dialog-actions .btn {
                            padding: 8px 16px;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                            font-size: 14px;
                        }
                        .dialog-actions .btn-danger {
                            background: #dc3545;
                            color: white;
                        }
                        .dialog-actions .btn-secondary {
                            background: #6c757d;
                            color: white;
                        }
                    `;
                    document.head.appendChild(style);
                }

                // 事件处理
                dialog.addEventListener('click', (e) => {
                    const action = e.target.dataset.action;
                    if (action === 'confirm') {
                        dialog.remove();
                        resolve(true);
                    } else if (action === 'cancel' || e.target === dialog.querySelector('.dialog-overlay')) {
                        dialog.remove();
                        resolve(false);
                    }
                });

                // 显示对话框
                document.body.appendChild(dialog);

            } catch (error) {
                console.error('[InfoBarSettings] ❌ 显示导入确认对话框失败:', error);
                resolve(false);
            }
        });
    }

    /**
     * 执行导入操作
     */
    async executeImport(importData) {
        try {
            console.log('[InfoBarSettings] 🔄 开始执行导入操作...');

            let importedCount = 0;

            // 导入信息栏数据到统一数据核心
            if (importData.infobarData && this.unifiedDataCore) {
                Object.entries(importData.infobarData).forEach(([chatId, chatData]) => {
                    Object.entries(chatData).forEach(([messageId, messageData]) => {
                        // 将数据写入统一数据核心
                        this.unifiedDataCore.setMessageData(chatId, messageId, messageData);
                        importedCount++;
                    });
                });
                console.log('[InfoBarSettings] 📊 已导入信息栏数据条目:', importedCount);
            }

            // 导入设置（可选）
            if (importData.settings) {
                const context = SillyTavern.getContext();
                if (context && context.extensionSettings) {
                    // 备份当前设置
                    const currentSettings = context.extensionSettings['Information bar integration tool'] || {};

                    // 合并设置（保留当前的API配置等敏感信息）
                    const mergedSettings = {
                        ...importData.settings,
                        // 保留当前的API配置
                        apiConfig: currentSettings.apiConfig || importData.settings.apiConfig
                    };

                    context.extensionSettings['Information bar integration tool'] = mergedSettings;

                    // 保存设置
                    await this.saveExtensionSettings();
                    console.log('[InfoBarSettings] ⚙️ 已导入扩展设置');
                }
            }

            // 触发数据更新事件
            if (this.eventSource) {
                this.eventSource.emit('dataImported', {
                    importedCount,
                    source: importData.metadata.source,
                    timestamp: new Date().toISOString()
                });
            }

            console.log('[InfoBarSettings] ✅ 导入操作完成，共导入', importedCount, '条数据');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 执行导入操作失败:', error);
            throw new Error('导入执行失败: ' + error.message);
        }
    }

    /**
     * 保存扩展设置到SillyTavern
     */
    async saveExtensionSettings() {
        try {
            const context = SillyTavern.getContext();
            if (context && context.saveSettingsDebounced) {
                await context.saveSettingsDebounced();
                console.log('[InfoBarSettings] 💾 扩展设置已保存');
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存扩展设置失败:', error);
        }
    }

    /**
     * 确保数据管理样式已加载
     */
    ensureDataManagementStyles() {
        try {
            if (document.getElementById('data-management-styles')) {
                return; // 样式已存在
            }

            const style = document.createElement('style');
            style.id = 'data-management-styles';
            style.textContent = `
                /* 数据管理功能区域样式 */
                .data-management-actions {
                    display: flex !important;
                    flex-direction: row !important;
                    gap: 12px !important;
                    margin-top: 8px !important;
                    width: 100% !important;
                }
                .data-export-btn, .data-import-btn {
                    flex: 1 !important;
                    display: flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    gap: 6px !important;
                    padding: 10px 16px !important;
                    border: none !important;
                    border-radius: 6px !important;
                    font-size: 14px !important;
                    font-weight: 500 !important;
                    cursor: pointer !important;
                    transition: all 0.2s ease !important;
                    min-height: 40px !important;
                    white-space: nowrap !important;
                }
                .data-export-btn {
                    background: var(--theme-primary-color, #ff6b35) !important;
                    color: white !important;
                }
                .data-export-btn:hover {
                    background: var(--theme-primary-hover, #e55a2b) !important;
                    transform: translateY(-1px) !important;
                    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3) !important;
                }
                .data-import-btn {
                    background: var(--theme-bg-secondary, #4a5568) !important;
                    color: white !important;
                    border: 1px solid var(--theme-border-color, #666) !important;
                }
                .data-import-btn:hover {
                    background: var(--theme-primary-color, #ff6b35) !important;
                    transform: translateY(-1px) !important;
                    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.2) !important;
                }
                .data-management-hint {
                    color: var(--theme-text-secondary, #a0a0a0) !important;
                    font-size: 13px !important;
                    line-height: 1.4 !important;
                    margin-top: 8px !important;
                    padding: 8px 12px !important;
                    background: var(--theme-bg-secondary, rgba(107, 114, 128, 0.1)) !important;
                    border-radius: 4px !important;
                    border-left: 3px solid var(--theme-primary-color, #ff6b35) !important;
                }
            `;
            document.head.appendChild(style);
            console.log('[InfoBarSettings] ✅ 数据管理样式已加载');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载数据管理样式失败:', error);
        }
    }

    /**
     * 获取世界书内容
     */
    async getWorldBookContent() {
        try {
            console.log('[InfoBarSettings] 📚 开始获取世界书内容...');

            const context = SillyTavern.getContext();
            if (!context) {
                console.warn('[InfoBarSettings] ⚠️ 无法获取SillyTavern上下文');
                return '';
            }

            // 方法1：尝试从 context.worldInfoData 获取
            if (context.worldInfoData && Array.isArray(context.worldInfoData) && context.worldInfoData.length > 0) {
                console.log('[InfoBarSettings] 📖 从worldInfoData获取世界书内容');
                const activeEntries = context.worldInfoData.filter(entry =>
                    entry && !entry.disable && entry.content && entry.content.trim()
                );

                if (activeEntries.length > 0) {
                    const worldBookText = activeEntries.map(entry => {
                        const title = entry.key || entry.keys || 'Unknown';
                        const content = entry.content || '';
                        return `**${title}**: ${content}`;
                    }).join('\n\n');

                    console.log('[InfoBarSettings] ✅ 获取到世界书条目数量:', activeEntries.length);
                    return worldBookText;
                }
            }

            // 方法2：尝试从 context.world_info 获取
            if (context.world_info && Array.isArray(context.world_info) && context.world_info.length > 0) {
                console.log('[InfoBarSettings] 📖 从world_info获取世界书内容');
                const activeEntries = context.world_info.filter(entry =>
                    entry && !entry.disable && entry.content && entry.content.trim()
                );

                if (activeEntries.length > 0) {
                    const worldBookText = activeEntries.map(entry => {
                        const title = entry.key || entry.keys || 'Unknown';
                        const content = entry.content || '';
                        return `**${title}**: ${content}`;
                    }).join('\n\n');

                    console.log('[InfoBarSettings] ✅ 获取到世界书条目数量:', activeEntries.length);
                    return worldBookText;
                }
            }

            // 方法3：尝试通过 SillyTavern API 获取
            if (typeof context.getWorldInfoSettings === 'function') {
                console.log('[InfoBarSettings] 📖 通过API获取世界书设置');
                const worldInfo = context.getWorldInfoSettings();
                if (worldInfo && worldInfo.length > 0) {
                    const activeEntries = worldInfo.filter(entry =>
                        entry && !entry.disable && entry.content && entry.content.trim()
                    );

                    if (activeEntries.length > 0) {
                        const worldBookText = activeEntries.map(entry => {
                            const title = entry.key || entry.keys || 'Unknown';
                            const content = entry.content || '';
                            return `**${title}**: ${content}`;
                        }).join('\n\n');

                        console.log('[InfoBarSettings] ✅ 获取到世界书条目数量:', activeEntries.length);
                        return worldBookText;
                    }
                }
            }

            // 方法4：尝试直接从全局变量获取
            if (window.world_info && Array.isArray(window.world_info) && window.world_info.length > 0) {
                console.log('[InfoBarSettings] 📖 从全局变量获取世界书内容');
                const activeEntries = window.world_info.filter(entry =>
                    entry && !entry.disable && entry.content && entry.content.trim()
                );

                if (activeEntries.length > 0) {
                    const worldBookText = activeEntries.map(entry => {
                        const title = entry.key || entry.keys || 'Unknown';
                        const content = entry.content || '';
                        return `**${title}**: ${content}`;
                    }).join('\n\n');

                    console.log('[InfoBarSettings] ✅ 获取到世界书条目数量:', activeEntries.length);
                    return worldBookText;
                }
            }

            console.log('[InfoBarSettings] 📚 没有找到激活的世界书内容');
            return '';

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取世界书内容失败:', error);
            return '';
        }
    }

    /**
     * 获取备用系统提示词
     */
    getBackupSystemPrompt() {
        return `🔥🔥🔥🔥🔥 **CRITICAL: 绝对禁止表格格式！** 🔥🔥🔥🔥🔥

❌❌❌ **SYSTEM WILL CRASH IF YOU USE TABLE FORMAT** ❌❌❌
❌ **绝对禁止**: | 类别 | 内容 | ← TABLE = CRASH!
❌ **绝对禁止**: ### **场景信息栏** ← MARKDOWN = CRASH!
❌ **绝对禁止**: | :--- | :--- | ← ANY TABLE SYMBOL = CRASH!

你是一个专业的信息栏数据生成助手。请根据用户提供的剧情内容，生成结构化的信息栏数据。

🚨🚨🚨 **MANDATORY OUTPUT FORMAT - 强制输出格式** 🚨🚨🚨

**必须按照以下顺序输出两个标签：**

1. **FIRST**: <aiThinkProcess><!--五步分析思考--></aiThinkProcess>
2. **SECOND**: <infobar_data><!--操作指令格式数据--></infobar_data>

✅ **操作指令格式示例（唯一正确格式）**：
<infobar_data>
<!--
add personal(1 {"1","张凡","2","25","3","男","4","工程师","5","专注工作"})
add world(1 {"1","现代都市","2","现实世界","3","2024年下午","4","办公室","5","繁忙"})
add interaction(1 {"1","小雨","2","同事","3","友好","4","讨论项目","5","合作"})
-->
</infobar_data>

🚨 **严格要求**：
1. 必须先输出aiThinkProcess，再输出infobar_data
2. 内容必须在 <!-- --> 注释中
3. 必须使用操作指令格式：add/update 面板名(行号 {"列号","值",...})
4. 绝对禁止使用表格格式 | 符号
5. 绝对禁止使用### 标题格式
6. interaction面板必须使用npc0.前缀格式`;
    }

    /**
     * 发送自定义API请求
     * @param {Array} messages - 消息数组
     * @param {Object} options - 选项配置
     * @param {boolean} options.skipSystemPrompt - 是否跳过系统提示词添加（用于总结等场景）
     */
    async sendCustomAPIRequest(messages, options = {}) {
        try {
            console.log('[InfoBarSettings] 📡 发送自定义API请求...');

            // 🔧 获取API配置：优先使用传递的配置，否则从扩展设置获取
            let apiConfig;
            if (options.apiConfig) {
                console.log('[InfoBarSettings] 🔧 使用传递的API配置（总结模式）');
                apiConfig = options.apiConfig;
                console.log('[InfoBarSettings] 📊 传递的API配置详情:', {
                    provider: apiConfig.provider,
                    model: apiConfig.model,
                    baseUrl: apiConfig.baseUrl,
                    endpoint: apiConfig.endpoint,
                    format: apiConfig.format,
                    maxTokens: apiConfig.maxTokens,
                    temperature: apiConfig.temperature,
                    hasApiKey: !!apiConfig.apiKey
                });
            } else {
                console.log('[InfoBarSettings] 📊 使用扩展设置的API配置');
                const context = SillyTavern.getContext();
                const extensionSettings = context.extensionSettings;
                apiConfig = extensionSettings['Information bar integration tool']?.apiConfig || {};
            }

            if (!apiConfig.provider || !apiConfig.model || !apiConfig.apiKey) {
                throw new Error('API配置不完整');
            }

            let enhancedMessages;
            if (options.skipSystemPrompt) {
                console.log('[InfoBarSettings] ⏭️ 跳过系统提示词添加（总结模式）');
                enhancedMessages = messages;
            } else {
                // 🔧 修复：为自定义API添加系统提示词，确保输出正确的中文格式和五步分析
                console.log('[InfoBarSettings] 🔧 为自定义API添加系统提示词...');
                enhancedMessages = await this.enhanceMessagesWithSystemPrompt(messages);
            }

            // 根据提供商和接口类型发送请求
            if (apiConfig.provider === 'gemini' && apiConfig.format === 'native') {
                return await this.sendGeminiNativeRequest(enhancedMessages, apiConfig, options);
            } else if (apiConfig.provider === 'localproxy') {
                return await this.sendLocalProxyRequest(enhancedMessages, apiConfig);
            } else {
                return await this.sendOpenAICompatibleRequest(enhancedMessages, apiConfig);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 发送自定义API请求失败:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * 🔧 新增：为自定义API消息添加系统提示词
     * 确保自定义API能够输出正确的中文格式和五步分析
     */
    async enhanceMessagesWithSystemPrompt(messages) {
        try {
            console.log('[InfoBarSettings] 🔧 为自定义API添加系统提示词...');

            // 生成自定义API专用的系统提示词
            const systemPrompt = await this.generateCustomAPISystemPrompt();

            // 检查是否已有系统消息
            const hasSystemMessage = messages.some(msg => msg.role === 'system');

            if (hasSystemMessage) {
                // 如果已有系统消息，将新的系统提示词合并到第一个系统消息中
                const systemMessageIndex = messages.findIndex(msg => msg.role === 'system');
                const existingSystemContent = messages[systemMessageIndex].content;
                messages[systemMessageIndex].content = systemPrompt + '\n\n' + existingSystemContent;
                console.log('[InfoBarSettings] 🔧 已合并系统提示词到现有系统消息');
            } else {
                // 如果没有系统消息，在开头添加系统消息
                messages.unshift({
                    role: 'system',
                    content: systemPrompt
                });
                console.log('[InfoBarSettings] 🔧 已添加新的系统消息');
            }

            // 🔧 新增：在用户消息末尾添加格式提醒，确保输出正确格式
            const lastUserMessageIndex = messages.map(msg => msg.role).lastIndexOf('user');
            if (lastUserMessageIndex !== -1) {
                const formatReminder = `

🚨🚨🚨 **CRITICAL REMINDER: 必须输出以下两个标签** 🚨🚨🚨
1. <aiThinkProcess><!--五步分析思考--></aiThinkProcess>
2. <infobar_data><!--面板数据--></infobar_data>
⚠️ **严禁颠倒顺序！严禁内容不被注释符号包裹！**`;

                messages[lastUserMessageIndex].content += formatReminder;
                console.log('[InfoBarSettings] 🔥 已在用户消息末尾添加格式提醒');
            }

            console.log('[InfoBarSettings] ✅ 系统提示词增强完成，消息数量:', messages.length);
            return messages;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 增强消息失败:', error);
            // 如果增强失败，返回原始消息
            return messages;
        }
    }

    /**
     * 🔧 新增：生成自定义API专用的系统提示词
     * 包含五步分析、中文格式、增量更新等完整要求
     */
    async generateCustomAPISystemPrompt() {
        try {
            console.log('[InfoBarSettings] 📝 生成自定义API系统提示词...');

            // 获取当前启用的面板信息
            const enabledPanelsInfo = await this.getEnabledPanelsInfo();

            // 获取当前数据状态（用于增量更新判断）
            const currentDataInfo = await this.getCurrentDataInfo();

            // 🔧 重要修复：确保智能提示词被强化置于系统消息最前面
            console.log('[InfoBarSettings] 🔥 已将强化格式约束置于系统消息最前面');
            console.log('[InfoBarSettings] 🧠 智能提示词即将注入，长度:', enabledPanelsInfo.length);

            // 构建完整的系统提示词，智能提示词放在最前面
            const systemPrompt = `${enabledPanelsInfo}

🚨【信息栏数据格式规范 - 自定义API专用】🚨

🌟 **重要说明：您正在使用自定义API模式处理信息栏数据** 🌟

🚨 **严禁生成剧情内容！只能输出数据分析和面板数据！** 🚨

📋 **核心输出要求**：
**🚨 必须严格按照以下顺序输出，严禁颠倒 🚨**

**第一步：必须先输出五步分析思考**
<aiThinkProcess>
<!--
[输出模式: 自定义API]

五步分析过程：
0. 更新策略: 根据现有数据判断是全量更新还是增量更新
1. 剧情分析：当前发生什么事件？角色在哪里？在做什么？
2. 数据变化识别：哪些信息发生了变化？哪些是新信息？
3. 更新策略判断：需要新增哪些字段？需要更新哪些字段？哪些保持不变？
4. 数据完整性检查：确保所有启用面板都有完整数据
5. 质量验证：确认数据逻辑一致性和合理性
-->
</aiThinkProcess>

**第二步：必须后输出面板数据**
<infobar_data>
<!--
[根据上述五步分析，输出具体的面板数据，使用操作指令格式]
[面板数据基于上方的智能提示词模板生成]
-->
</infobar_data>

🚨 **强制格式要求** 🚨：
1. **输出顺序**：必须先输出 <aiThinkProcess>，再输出 <infobar_data>
2. **注释包裹**：所有内容必须被 <!--  --> 包裹
3. **中文输出**：所有内容必须使用中文，包括分析过程和数据值
4. **操作指令格式**：面板数据使用格式 add/update 面板名(行号 {"列号","值",...})
5. **具体数据**：避免使用"未知"、"N/A"等占位符，生成具体内容

${currentDataInfo}

📋 **数据格式示例**：
<aiThinkProcess>
<!--
[输出模式: 自定义API]

五步分析过程：
0. 更新策略: 增量更新
1. 剧情分析：张三正在现代都市的办公室里工作，处理编程任务
2. 数据变化识别：位置从家里变为办公室，状态从休息变为工作，新增了任务信息
3. 更新策略判断：需要更新location为"办公室"，occupation保持"程序员"，新增tasks相关字段
4. 数据完整性检查：personal、world、tasks面板都有完整数据
5. 质量验证：数据与当前剧情一致，张三作为程序员在办公室工作符合逻辑
-->
</aiThinkProcess>

<infobar_data>
<!--
add personal(1 {"1","张三","2","25","3","程序员","4","办公室","5","工作中"})
add world(1 {"1","现代都市","2","都市","3","2024年","4","办公大楼"})
add interaction(1 {"1","李文静","2","同事","3","友好","4","合作伙伴","5","讨论项目"})
add tasks(1 {"1","新任务创建","2","任务编辑中","3","进行中"})
-->
</infobar_data>

🚨🚨🚨 **CRITICAL: 操作指令格式强制要求** 🚨🚨🚨
🔴 **所有面板必须使用操作指令格式！**
🔴 **错误格式将导致系统完全拒绝，不会有任何兼容性处理！**
🔴 **正确: add interaction(1 {"1","江琳","2","朋友","3","友好"})**
🔴 **错误: interaction: npc0.name="江琳", npc0.type="朋友" ← 旧格式，系统拒绝！**

⚠️ **严禁格式错误**：
❌ 错误：<aiThinkProcess>内容不被注释包裹</aiThinkProcess>
❌ 错误：先输出infobar_data再输出aiThinkProcess
❌ 错误：使用英文内容或占位符
❌ 错误：interaction面板不使用npc前缀 ← 系统崩溃！

🚨🚨🚨 **严禁生成任何剧情内容！** 🚨🚨🚨
❌ **严禁输出任何故事情节、对话、场景描述**
❌ **严禁输出任何叙述性文字**
❌ **只能输出数据分析和XML格式的面板数据**
❌ **不要写"张凡用手抹去身上的水珠"这类剧情内容**

✅ **必须使用中文进行思考和数据生成**
✅ **必须基于具体剧情生成真实数据**
✅ **必须遵循上述输出顺序和格式要求**
✅ **interaction面板必须使用npc0.前缀格式**
✅ **只输出数据分析和面板数据，绝不输出剧情内容**`;

            console.log('[InfoBarSettings] ✅ 自定义API系统提示词生成完成');
            return systemPrompt;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成系统提示词失败:', error);
            // 返回基础系统提示词
            return this.getBasicCustomAPISystemPrompt();
        }
    }

    /**
     * 🔧 修复：获取完整的智能提示词（用于系统提示词）
     */
    async getEnabledPanelsInfo() {
        try {
            console.log('[InfoBarSettings] 🧠 获取完整的智能提示词...');

            // 🚨 关键修复：直接调用SmartPromptSystem的generateSmartPrompt方法
            // 这样可以获取完整的智能提示词，而不是简短的面板概述
            const smartPromptSystem = window.SillyTavernInfobar?.modules?.smartPromptSystem;
            if (!smartPromptSystem) {
                console.warn('[InfoBarSettings] ⚠️ SmartPromptSystem不可用');
                return '请根据用户设置的面板生成对应数据';
            }

            // 检查SmartPromptSystem是否已初始化
            if (!smartPromptSystem.initialized) {
                console.warn('[InfoBarSettings] ⚠️ SmartPromptSystem未初始化');
                return '请根据用户设置的面板生成对应数据';
            }

            // 🚀 关键：调用generateSmartPrompt获取完整的智能提示词
            const fullSmartPrompt = await smartPromptSystem.generateSmartPrompt();
            if (!fullSmartPrompt || fullSmartPrompt.length === 0) {
                console.warn('[InfoBarSettings] ⚠️ SmartPromptSystem返回空的智能提示词');
                return '请根据用户设置的面板生成对应数据';
            }

            console.log(`[InfoBarSettings] ✅ 成功获取完整智能提示词，长度: ${fullSmartPrompt.length} 字符`);

            // 🔧 新增：强化智能提示词日志，确保可以看到智能提示词是否正确获取
            console.log('[InfoBarSettings] 🧠 获取到智能提示词，长度:', fullSmartPrompt.length);
            console.log('[InfoBarSettings] 🧠 智能提示词前200字符预览:', fullSmartPrompt.substring(0, 200));

            return fullSmartPrompt;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取完整智能提示词失败:', error);
            return '请根据用户设置的面板生成对应数据';
        }
    }

    /**
     * 🔧 新增：获取当前数据信息（用于增量更新判断）
     */
    async getCurrentDataInfo() {
        try {
            // 获取SmartPromptSystem来获取当前数据状态
            const smartPromptSystem = window.SillyTavernInfobar?.modules?.smartPromptSystem;
            if (!smartPromptSystem) {
                return '';
            }

            const enabledPanels = await smartPromptSystem.getEnabledPanels();
            if (!enabledPanels || enabledPanels.length === 0) {
                return '';
            }

            const currentPanelData = await smartPromptSystem.getCurrentPanelData(enabledPanels);
            const updateStrategy = await smartPromptSystem.analyzeUpdateStrategy(enabledPanels, currentPanelData);

            let dataInfo = `\n📊 **当前数据状态**：\n`;
            dataInfo += `- 数据覆盖率: ${updateStrategy.dataPercentage}%\n`;
            dataInfo += `- 建议策略: ${updateStrategy.type === 'full' ? '全量更新' : '增量更新'}\n`;
            dataInfo += `- 启用面板: ${enabledPanels.length}个\n\n`;

            if (Object.keys(currentPanelData).length > 0) {
                dataInfo += `**现有数据概览**：\n`;
                for (const [panelKey, panelData] of Object.entries(currentPanelData)) {
                    const fieldCount = Object.keys(panelData).length;
                    dataInfo += `- ${panelKey}: ${fieldCount}个字段已有数据\n`;
                }
                dataInfo += '\n**增量更新指导**：只输出发生变化或新增的字段数据\n';
            } else {
                dataInfo += `**全量更新指导**：生成所有启用面板的完整数据\n`;
            }

            return dataInfo;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取当前数据信息失败:', error);
            return '';
        }
    }

    /**
     * 🔧 新增：获取基础系统提示词（备用）
     */
    getBasicCustomAPISystemPrompt() {
        return `🚨【信息栏数据格式规范 - 自定义API】🚨

**必须输出格式**：
1. 先输出: <aiThinkProcess><!--五步分析思考--></aiThinkProcess>
2. 再输出: <infobar_data><!--面板数据--></infobar_data>

**格式要求**：
- 使用中文进行分析和数据生成
- 内容必须被 <!--  --> 包裹
- 数据格式: add/update 面板名(行号 {"列号","值",...})
- 避免使用占位符，生成具体内容

**严禁颠倒输出顺序或省略任何标签**`;
    }

    /**
     * 获取SmartPromptSystem的智能提示词
     */
    async getSmartPromptSystemPrompt() {
        try {
            console.log('[InfoBarSettings] 🧠 获取SmartPromptSystem智能提示词...');

            // 获取SmartPromptSystem实例
            const smartPromptSystem = window.SillyTavernInfobar?.modules?.smartPromptSystem;
            if (!smartPromptSystem) {
                console.warn('[InfoBarSettings] ⚠️ SmartPromptSystem未找到');
                return '';
            }

            // 检查SmartPromptSystem是否已初始化
            if (!smartPromptSystem.initialized) {
                console.warn('[InfoBarSettings] ⚠️ SmartPromptSystem未初始化');
                return '';
            }

            // 生成智能提示词
            const smartPrompt = await smartPromptSystem.generateSmartPrompt();
            if (!smartPrompt || smartPrompt.length === 0) {
                console.log('[InfoBarSettings] 📝 SmartPromptSystem返回空提示词');
                return '';
            }

            console.log('[InfoBarSettings] ✅ 成功获取智能提示词，长度:', smartPrompt.length);
            return smartPrompt;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取智能提示词失败:', error);
            return '';
        }
    }

    /**
     * 发送本地反代请求 (通过SillyTavern后端)
     */
    async sendLocalProxyRequest(messages, apiConfig) {
        try {
            console.log('[InfoBarSettings] 🚀 发送本地反代请求...');

            // 🚨 重要修复：本地反代不需要重复添加智能提示词！
            // 因为消息已经通过enhanceMessagesWithSystemPrompt方法添加了正确的系统提示词
            console.log('[InfoBarSettings] ℹ️ 本地反代使用已增强的消息（包含系统提示词）');

            // 获取CSRF令牌
            const csrfResponse = await fetch('/csrf-token');
            const csrfData = await csrfResponse.json();
            const csrfToken = csrfData.token;

            // 构建生成请求
            const generateUrl = `${window.location.origin}/api/backends/chat-completions/generate`;

            // 标记本次请求ID与URL（用于后续取消）
            this.currentAPIRequestId = this.currentAPIRequestId || `ib_${Date.now()}_${Math.random().toString(36).slice(2)}`;
            this.lastRequestUrl = generateUrl;

            // 🔧 关键修复：使用正确的chat_completion_source
            // SillyTavern后端期望使用实际的API源（如"openai"），而不是"custom"
            const requestBody = {
                messages: messages,
                model: apiConfig.model,
                temperature: apiConfig.temperature || 0.7,
                frequency_penalty: 0,
                presence_penalty: 0,
                top_p: 1.0,
                max_tokens: apiConfig.maxTokens || 20000,
                stream: false,
                // 🔧 修复：使用"openai"作为chat_completion_source
                chat_completion_source: "openai",
                // 🔧 修复：使用reverse_proxy字段指定反代地址
                reverse_proxy: apiConfig.endpoint || apiConfig.baseUrl,
                proxy_password: apiConfig.apiKey || ""
            };

            console.log('[InfoBarSettings] 📝 本地反代请求参数:', {
                endpoint: generateUrl,
                model: requestBody.model,
                temperature: requestBody.temperature,
                max_tokens: requestBody.max_tokens,
                reverse_proxy: requestBody.reverse_proxy,
                hasPassword: !!requestBody.proxy_password,
                messagesCount: messages.length
            });

            // 为请求附加可跟踪的Request-ID，便于后端取消
            const genHeaders = {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken,
                'X-Request-ID': this.currentAPIRequestId
            };
            const response = await fetch(generateUrl, {
                method: 'POST',
                headers: genHeaders,
                body: JSON.stringify({ ...requestBody, request_id: this.currentAPIRequestId })
            });

            console.log('[InfoBarSettings] 📊 本地反代响应状态:', response.status);

            // 🔧 新增：检查响应头信息，帮助诊断长度问题
            const contentLength = response.headers.get('content-length');
            const contentType = response.headers.get('content-type');
            console.log('[InfoBarSettings] 📊 响应头信息:', {
                contentLength: contentLength,
                contentType: contentType,
                status: response.status,
                statusText: response.statusText
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('[InfoBarSettings] ❌ 本地反代请求失败:', response.status, errorText);
                throw new Error(`本地反代API错误: ${response.status} ${response.statusText} - ${errorText}`);
            }

            // 🔧 增强响应处理：先获取原始文本，然后解析JSON
            const rawResponseText = await response.text();
            console.log('[InfoBarSettings] 📊 原始响应文本长度:', rawResponseText.length);
            console.log('[InfoBarSettings] 📊 原始响应前500字符:', rawResponseText.substring(0, 500));
            console.log('[InfoBarSettings] 📊 原始响应后500字符:', rawResponseText.substring(Math.max(0, rawResponseText.length - 500)));

            let data;
            try {
                data = JSON.parse(rawResponseText);
                console.log('[InfoBarSettings] 📊 本地反代响应数据解析成功');
            } catch (parseError) {
                console.error('[InfoBarSettings] ❌ JSON解析失败:', parseError);
                console.error('[InfoBarSettings] ❌ 原始响应内容:', rawResponseText);
                throw new Error(`本地反代响应JSON解析失败: ${parseError.message}`);
            }

            // 检查是否有错误
            if (data.error) {
                console.error('[InfoBarSettings] ❌ 本地反代API错误:', data.error);
                const errorMessage = data.error.message || data.error.toString() || '未知错误';
                throw new Error(`本地反代API错误: ${errorMessage}`);
            }

            // 🔧 增强响应解析：更详细的内容提取和验证
            console.log('[InfoBarSettings] 🔍 开始解析生成内容...');
            console.log('[InfoBarSettings] 📊 响应数据结构:', {
                hasChoices: !!data.choices,
                choicesLength: data.choices?.length || 0,
                firstChoice: data.choices?.[0] ? Object.keys(data.choices[0]) : 'none',
                hasMessage: !!(data.choices?.[0]?.message),
                messageKeys: data.choices?.[0]?.message ? Object.keys(data.choices[0].message) : 'none'
            });

            // 解析响应 - 多种格式兼容
            let generatedText = '';

            if (data.choices && Array.isArray(data.choices) && data.choices.length > 0) {
                const choice = data.choices[0];

                if (choice.message && choice.message.content) {
                    generatedText = choice.message.content;
                    console.log('[InfoBarSettings] ✅ 使用message.content格式提取内容');
                } else if (choice.text) {
                    generatedText = choice.text;
                    console.log('[InfoBarSettings] ✅ 使用text格式提取内容');
                } else if (choice.content) {
                    generatedText = choice.content;
                    console.log('[InfoBarSettings] ✅ 使用content格式提取内容');
                }
            } else if (data.content) {
                generatedText = data.content;
                console.log('[InfoBarSettings] ✅ 使用直接content格式提取内容');
            } else if (data.text) {
                generatedText = data.text;
                console.log('[InfoBarSettings] ✅ 使用直接text格式提取内容');
            }

            if (!generatedText || generatedText.trim().length === 0) {
                console.error('[InfoBarSettings] ❌ 本地反代返回空内容');
                console.error('[InfoBarSettings] ❌ 完整响应数据:', JSON.stringify(data, null, 2));
                throw new Error('本地反代API返回空内容，可能是模型不可用或配置错误');
            }

            console.log(`[InfoBarSettings] ✅ 本地反代请求成功，生成内容长度: ${generatedText.length} 字符`);
            console.log('[InfoBarSettings] 📊 生成内容前200字符预览:', generatedText.substring(0, 200));
            console.log('[InfoBarSettings] 📊 生成内容后200字符预览:', generatedText.substring(Math.max(0, generatedText.length - 200)));

            return {
                success: true,
                text: generatedText,
                usage: data.usage
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 本地反代请求异常:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * 发送Gemini原生API请求
     */
    async sendGeminiNativeRequest(messages, apiConfig, options = {}) {
        console.log('[InfoBarSettings] 🔄 发送Gemini原生请求...');

        const systemMessage = messages.find(m => m.role === 'system');
        const userMessage = messages.find(m => m.role === 'user');

        const prompt = systemMessage ? `${systemMessage.content}\n\n${userMessage.content}` : userMessage.content;

        // 🔧 修复：根据使用场景动态设置maxOutputTokens
        // 总结功能需要更大的输出令牌数，普通信息栏请求使用较小值
        const isSummaryRequest = options?.skipSystemPrompt === true;
        const defaultMaxTokens = isSummaryRequest ? 8000 : 2000;  // 总结请求使用8000，普通请求使用2000

        const requestBody = {
            contents: [{
                parts: [{ text: prompt }]
            }],
            generationConfig: {
                temperature: apiConfig.temperature || 0.7,
                maxOutputTokens: apiConfig.maxTokens || defaultMaxTokens
            }
        };

        console.log('[InfoBarSettings] 🔧 API请求配置:', {
            isSummaryRequest,
            maxOutputTokens: requestBody.generationConfig.maxOutputTokens,
            temperature: requestBody.generationConfig.temperature,
            promptLength: prompt.length
        });

        const requestUrl = `${apiConfig.baseUrl}/v1beta/models/${apiConfig.model}:generateContent?key=${apiConfig.apiKey}`;
        console.log('[InfoBarSettings] 🌐 使用CORS兼容请求:', requestUrl);

        let response;
        try {
            // 🔧 新增：构建fetch选项，包含AbortSignal
            const fetchOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'SillyTavern-InfoBar/1.0'
                },
                body: JSON.stringify(requestBody)
            };

            // 🔧 新增：如果提供了signal，添加到fetch选项中
            if (options.signal) {
                fetchOptions.signal = options.signal;
                console.log('[InfoBarSettings] 🛑 已添加AbortSignal到请求');
            }

            // 🔧 修复：使用APIIntegration的CORS兼容fetch方法
            if (this.apiIntegration && typeof this.apiIntegration.proxyCompatibleFetch === 'function') {
                console.log('[InfoBarSettings] ✅ 使用CORS兼容的fetch方法');
                response = await this.apiIntegration.proxyCompatibleFetch(requestUrl, fetchOptions);
            } else {
                console.warn('[InfoBarSettings] ⚠️ APIIntegration不可用，使用原生fetch');
                response = await fetch(requestUrl, fetchOptions);
            }
        } catch (fetchError) {
            console.error('[InfoBarSettings] ❌ Gemini原生请求失败:', fetchError);

            // 🔧 新增：检查是否是中止错误
            if (fetchError.name === 'AbortError') {
                console.log('[InfoBarSettings] 🛑 请求已被中止');
                throw fetchError;
            }

            // 检查是否是CORS错误
            if (fetchError.message.includes('CORS_BLOCKED') ||
                fetchError.message.includes('CORS') ||
                (fetchError.name === 'TypeError' && fetchError.message.includes('fetch'))) {

                throw new Error('CORS跨域错误：无法访问Gemini API，请检查反代配置或使用服务器端代理');
            }

            throw fetchError;
        }

        if (!response.ok) {
            // 🔧 特殊处理429和500错误
            if (response.status === 429) {
                // 获取重试建议时间
                const retryAfter = response.headers.get('Retry-After') || 60;
                console.warn(`[InfoBarSettings] ⚠️ 429频率限制，建议${retryAfter}秒后重试`);

                throw new Error(`API请求频率过高(429)，请等待${retryAfter}秒后重试。建议调整请求间隔或稍后再试。`);
            } else if (response.status === 500) {
                console.error('[InfoBarSettings] ❌ 500服务器内部错误');

                // 尝试获取错误详情
                let errorDetail = '';
                try {
                    const errorData = await response.text();
                    errorDetail = errorData.substring(0, 200);
                    console.error('[InfoBarSettings] 📊 500错误详情:', errorDetail);
                } catch (e) {
                    console.warn('[InfoBarSettings] ⚠️ 无法读取500错误详情');
                }

                throw new Error(`Gemini服务器内部错误(500)，这可能是临时问题。建议稍后重试。${errorDetail ? '错误详情: ' + errorDetail : ''}`);
            } else {
                throw new Error(`Gemini API错误: ${response.status} ${response.statusText}`);
            }
        }

        const data = await response.json();

        console.log('[InfoBarSettings] 🔍 Gemini API响应数据结构:', JSON.stringify(data, null, 2));

        // 🔧 改进的响应解析逻辑，支持多种可能的格式
        let extractedText = '';

        // 尝试标准的Gemini响应格式
        if (data.candidates && data.candidates[0]) {
            const candidate = data.candidates[0];
            console.log('[InfoBarSettings] 📊 候选响应结构:', {
                hasContent: !!candidate.content,
                hasParts: !!(candidate.content?.parts),
                partsLength: candidate.content?.parts?.length || 0,
                hasText: !!candidate.text,
                hasOutput: !!candidate.output
            });

            if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
                extractedText = candidate.content.parts[0].text || '';
                console.log('[InfoBarSettings] ✅ 从标准路径提取文本，长度:', extractedText.length);
            } else if (candidate.text) {
                extractedText = candidate.text;
                console.log('[InfoBarSettings] ✅ 从candidate.text提取文本，长度:', extractedText.length);
            } else if (candidate.output) {
                extractedText = candidate.output;
                console.log('[InfoBarSettings] ✅ 从candidate.output提取文本，长度:', extractedText.length);
            }
        }

        // 如果标准路径失败，尝试其他可能的格式
        if (!extractedText && data.text) {
            extractedText = data.text;
            console.log('[InfoBarSettings] ✅ 从data.text提取文本，长度:', extractedText.length);
        }

        // 最后尝试从整个响应中查找文本内容
        if (!extractedText) {
            console.warn('[InfoBarSettings] ⚠️ 无法从标准路径提取文本，尝试深度搜索...');

            // 递归搜索所有可能包含文本内容的字段
            const searchForText = (obj, path = '') => {
                if (typeof obj === 'string' && obj.trim() && obj.length > 20) {
                    console.log(`[InfoBarSettings] 🔍 找到可能的文本内容: ${path} (长度: ${obj.length})`);
                    return obj;
                }
                if (typeof obj === 'object' && obj !== null) {
                    for (const [key, value] of Object.entries(obj)) {
                        if (key !== 'usage' && key !== 'usageMetadata') { // 跳过使用统计
                            const result = searchForText(value, `${path}.${key}`);
                            if (result) return result;
                        }
                    }
                }
                return null;
            };

            extractedText = searchForText(data, 'data') || '';
        }

        if (!extractedText) {
            console.error('[InfoBarSettings] ❌ 无法从Gemini响应中提取任何文本内容');
            console.error('[InfoBarSettings] 📊 完整响应结构keys:', Object.keys(data));
            console.error('[InfoBarSettings] 📊 候选者详情:', data.candidates);

            // 如果完全没有文本内容，返回错误而不是空文本
            throw new Error('Gemini API返回了空的文本内容，请检查API配置或模型响应');
        }

        return {
            success: true,
            text: extractedText.trim(),
            usage: data.usageMetadata || data.usage
        };
    }

    /**
     * 发送OpenAI兼容API请求
     */
    async sendOpenAICompatibleRequest(messages, apiConfig) {
        console.log('[InfoBarSettings] 🔄 发送OpenAI兼容请求...');

        // 🔧 修复：确保baseUrl存在，否则使用fallback
        let baseUrl = apiConfig.baseUrl || apiConfig.endpoint;
        if (!baseUrl) {
            console.error('[InfoBarSettings] ❌ baseUrl和endpoint都未配置');
            throw new Error('API基础URL未配置，请检查API设置');
        }

        // 🔧 移除末尾可能的路径部分，确保只有基础URL
        if (baseUrl.endsWith('/chat/completions')) {
            baseUrl = baseUrl.replace('/chat/completions', '');
        }
        if (baseUrl.endsWith('/v1')) {
            baseUrl = baseUrl.replace('/v1', '');
        }

        const requestBody = {
            model: apiConfig.model,
            messages: messages,
            temperature: apiConfig.temperature || 0.7,
            max_tokens: apiConfig.maxTokens || 4000 // 🔧 修复：移除硬编码限制，完全使用用户设置
        };

        console.log('[InfoBarSettings] 🔧 API请求参数:', {
            model: requestBody.model,
            temperature: requestBody.temperature,
            max_tokens: requestBody.max_tokens, // 🔧 显示实际使用的最大令牌数
            messagesCount: messages.length,
            userConfiguredMaxTokens: apiConfig.maxTokens // 🔧 显示用户配置的令牌数
        });

        const requestUrl = `${baseUrl}/v1/chat/completions`;
        console.log('[InfoBarSettings] 🌐 使用CORS兼容请求:', requestUrl);

        let response;
        try {
            // 🔧 修复：使用APIIntegration的CORS兼容fetch方法
            if (this.apiIntegration && typeof this.apiIntegration.proxyCompatibleFetch === 'function') {
                console.log('[InfoBarSettings] ✅ 使用CORS兼容的fetch方法');
                response = await this.apiIntegration.proxyCompatibleFetch(requestUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiConfig.apiKey}`,
                        'User-Agent': 'SillyTavern-InfoBar/1.0'
                    },
                    body: JSON.stringify(requestBody)
                });
            } else {
                console.warn('[InfoBarSettings] ⚠️ APIIntegration不可用，使用原生fetch');
                response = await fetch(requestUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiConfig.apiKey}`,
                        'User-Agent': 'SillyTavern-InfoBar/1.0'
                    },
                    body: JSON.stringify(requestBody)
                });
            }
        } catch (fetchError) {
            console.error('[InfoBarSettings] ❌ OpenAI兼容请求失败:', fetchError);

            // 检查是否是CORS错误
            if (fetchError.message.includes('CORS_BLOCKED') ||
                fetchError.message.includes('CORS') ||
                (fetchError.name === 'TypeError' && fetchError.message.includes('fetch'))) {

                throw new Error('CORS跨域错误：无法访问反代API，请检查反代服务器的CORS配置或使用服务器端代理');
            }

            throw fetchError;
        }

        if (!response.ok) {
            // 🔧 专门处理500服务器错误
            if (response.status === 500) {
                let errorDetail = '';
                try {
                    const errorText = await response.text();
                    errorDetail = errorText.substring(0, 300);
                    console.error('[InfoBarSettings] ❌ 500服务器错误详情:', errorDetail);
                } catch (e) {
                    console.warn('[InfoBarSettings] ⚠️ 无法读取500错误详情');
                }

                throw new Error(`反代服务器内部错误 (500): 可能是以下问题之一：
1. 反代配置问题：/v1/chat/completions端点配置错误
2. 后端API问题：上游API服务异常或配额不足
3. 请求格式问题：反代服务器不支持当前请求格式
4. 认证问题：后端API Key无效或过期

技术详情: ${response.status} ${response.statusText}${errorDetail ? ' - ' + errorDetail : ''}

建议检查反代服务器日志以获取更多信息。`);
            }

            throw new Error(`API错误: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        return {
            success: true,
            text: data.choices?.[0]?.message?.content || '',
            usage: data.usage
        };
    }

    /**
     * 处理API结果
     */
    async processAPIResult(resultText) {
        try {
            console.log('[InfoBarSettings] 🔍 开始处理API结果...');
            console.log('[InfoBarSettings] 📝 结果前500字符:', resultText.substring(0, 500));

            // 获取API配置，检查是否启用合并消息
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const apiConfig = extensionSettings['Information bar integration tool']?.apiConfig || {};
            const mergeMessages = apiConfig.mergeMessages !== undefined ? apiConfig.mergeMessages : true; // 默认为true

            if (mergeMessages) {
                console.log('[InfoBarSettings] 🔄 合并消息模式：将API数据合并到AI消息中');

                // 第一步：将infobar_data合并到最新的AI消息中
                const success = await this.appendInfobarDataToLatestMessage(resultText);
                if (!success) {
                    console.warn('[InfoBarSettings] ⚠️ 无法将infobar_data合并到消息中');
                    return;
                }

                // 第二步：触发消息接收事件，让EventSystem处理
                if (context && context.eventSource && context.chat && context.chat.length > 0) {
                    const lastMessage = context.chat[context.chat.length - 1];
                    if (lastMessage && !lastMessage.is_user) {
                        console.log('[InfoBarSettings] 📡 触发消息接收事件进行数据解析...');

                        // 🔧 修复：添加短暂延迟，确保消息内容已经被正确更新
                        setTimeout(() => {
                            // 重新获取最新消息，确保获取到更新后的内容
                            const updatedMessage = context.chat[context.chat.length - 1];
                            if (updatedMessage && !updatedMessage.is_user) {
                                console.log('[InfoBarSettings] 🔄 延迟触发消息接收事件，确保数据已更新');
                                console.log('[InfoBarSettings] 📊 消息内容长度:', updatedMessage.mes?.length || 0);
                                console.log('[InfoBarSettings] 🔍 包含infobar_data:', updatedMessage.mes?.includes('<infobar_data>') || false);
                                context.eventSource.emit('message_received', updatedMessage);
                            }
                        }, 100); // 100ms延迟
                    }
                }
            } else {
                console.log('[InfoBarSettings] 🚀 直接解析模式：直接处理API返回数据');

                // 直接解析API返回的数据，不合并到AI消息
                await this.directParseAPIResult(resultText);
            }

            console.log('[InfoBarSettings] ✅ API结果处理完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理API结果失败:', error);
        }
    }

    /**
     * 直接解析API结果（不合并到AI消息）
     */
    async directParseAPIResult(resultText) {
        try {
            console.log('[InfoBarSettings] 🔍 直接解析API结果...');

            // 获取智能提示词系统
            const infoBarTool = window.SillyTavernInfobar;
            const smartPromptSystem = infoBarTool?.modules?.smartPromptSystem;

            if (!smartPromptSystem || !smartPromptSystem.dataParser) {
                console.error('[InfoBarSettings] ❌ 智能提示词系统或数据解析器未找到');
                return;
            }

            // 直接使用数据解析器解析API返回的数据
            const parsedData = smartPromptSystem.dataParser.parseAIResponse(resultText);

            if (parsedData) {
                console.log('[InfoBarSettings] ✅ 直接解析成功，数据项数量:', Object.keys(parsedData).length);

                // 更新数据到数据核心
                await smartPromptSystem.updateDataCore(parsedData);

                // 触发数据更新事件
                if (smartPromptSystem.eventSystem) {
                    console.log('[InfoBarSettings] 📡 触发数据更新事件...');

                    // 触发智能提示词系统的数据更新事件
                    smartPromptSystem.eventSystem.emit('smart-prompt:data-updated', {
                        data: parsedData,
                        timestamp: Date.now(),
                        source: 'direct-api-parse' // 标记数据来源
                    });

                    // 触发信息栏渲染器的数据更新事件
                    smartPromptSystem.eventSystem.emit('data:updated', {
                        data: parsedData,
                        timestamp: Date.now(),
                        source: 'direct-api-parse' // 标记数据来源
                    });

                    console.log('[InfoBarSettings] ✅ 数据更新事件已触发');
                } else {
                    console.warn('[InfoBarSettings] ⚠️ 事件系统不可用，无法触发数据更新事件');
                }

                console.log('[InfoBarSettings] ✅ 直接解析和数据更新完成');
            } else {
                console.warn('[InfoBarSettings] ⚠️ 直接解析未找到有效数据');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 直接解析API结果失败:', error);
        }
    }

    /**
     * 将infobar_data追加到最新的AI消息中
     */
    async appendInfobarDataToLatestMessage(infobarData) {
        try {
            console.log('[InfoBarSettings] 📝 将infobar_data追加到最新消息...');

            const context = SillyTavern.getContext();
            if (!context || !context.chat || context.chat.length === 0) {
                console.warn('[InfoBarSettings] ⚠️ 没有可用的聊天消息');
                return false;
            }

            // 获取最新的AI消息
            const lastMessage = context.chat[context.chat.length - 1];
            if (!lastMessage || lastMessage.is_user) {
                console.warn('[InfoBarSettings] ⚠️ 最新消息不是AI消息');
                return false;
            }

            // 检查消息是否已经包含自定义API数据标签，如果有则替换
            if (lastMessage.mes && (lastMessage.mes.includes('<infobar_data>') || lastMessage.mes.includes('<aiThinkProcess>'))) {
                console.log('[InfoBarSettings] ℹ️ 消息已包含API数据标签，替换现有内容');
                // 移除现有的API数据标签内容
                lastMessage.mes = lastMessage.mes
                    .replace(/<infobar_data>[\s\S]*?<\/infobar_data>/gi, '')
                    .replace(/<aiThinkProcess>[\s\S]*?<\/aiThinkProcess>/gi, '')
                    .trim();
            }

            // 🔧 修复：直接将完整的API返回数据追加到消息中，不进行拆分
            // 自定义API返回的是一条完整的响应，包含 <aiThinkProcess> 和 <infobar_data>
            // 应该保持数据的完整性和语义连贯性
            if (infobarData && infobarData.trim()) {
                console.log('[InfoBarSettings] 📝 追加完整的API返回数据到消息');
                lastMessage.mes = lastMessage.mes.trim() + '\n\n' + infobarData.trim();
            } else {
                console.warn('[InfoBarSettings] ⚠️ API返回数据为空');
                return false;
            }

            // 保存聊天数据
            if (context.saveChat) {
                await context.saveChat();
                console.log('[InfoBarSettings] 💾 聊天数据已保存');
            }

            console.log('[InfoBarSettings] ✅ infobar_data已成功追加到消息');
            return true;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 追加infobar_data到消息失败:', error);
            return false;
        }
    }

    // 注释：extractAndMergeAPIResult 函数已移除
    // 原因：自定义API返回的是完整响应数据，不应该人为拆分 <aiThinkProcess> 和 <infobar_data>
    // 新的处理逻辑直接将完整数据追加到消息中，保持数据的完整性和语义连贯性

    /**
     * 获取API提供商
     */
    getAPIProvider() {
        const context = SillyTavern.getContext();
        const extensionSettings = context.extensionSettings;
        return extensionSettings['Information bar integration tool']?.apiConfig?.provider || 'unknown';
    }

    /**
     * 获取API模型
     */
    getAPIModel() {
        const context = SillyTavern.getContext();
        const extensionSettings = context.extensionSettings;
        return extensionSettings['Information bar integration tool']?.apiConfig?.model || 'unknown';
    }

    /**
     * 显示通知消息
     */
    showNotification(message, type = 'info') {
        // 创建通知元素
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <span class="notification-icon">${type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️'}</span>
            <span class="notification-text">${message}</span>
        `;

        // 添加样式
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#fee2e2' : type === 'success' ? '#dcfce7' : '#dbeafe'};
            color: ${type === 'error' ? '#dc2626' : type === 'success' ? '#16a34a' : '#2563eb'};
            border: 1px solid ${type === 'error' ? '#fecaca' : type === 'success' ? '#bbf7d0' : '#bfdbfe'};
            border-radius: 8px;
            padding: 12px 16px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            z-index: 10000;
            max-width: 400px;
            font-size: 14px;
            animation: slideIn 0.3s ease-out;
        `;

        // 添加到页面
        document.body.appendChild(notification);

        // 3秒后自动移除
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    /**
     * 加载总结设置
     */
    async loadSummarySettings() {
        try {
            console.log('[InfoBarSettings] 📥 加载总结设置...');

            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                console.warn('[InfoBarSettings] ⚠️ 总结管理器未找到');
                return;
            }

            const settings = summaryManager.settings;

            // 应用设置到UI
            const autoSummaryEnabled = this.modal.querySelector('#content-auto-summary-enabled');
            if (autoSummaryEnabled) {
                autoSummaryEnabled.checked = settings.autoSummaryEnabled || false;
            }

            // 🔧 新增：注入总结设置
            const injectSummaryEnabled = this.modal.querySelector('#content-inject-summary-enabled');
            if (injectSummaryEnabled) {
                injectSummaryEnabled.checked = settings.injectSummaryEnabled || false;
            }

            const summaryFloorCount = this.modal.querySelector('#content-summary-floor-count');
            if (summaryFloorCount) {
                summaryFloorCount.value = settings.summaryFloorCount || 20;
            }

            const summaryType = this.modal.querySelector('#content-summary-type');
            if (summaryType) {
                summaryType.value = settings.summaryType || 'small';
                this.handleSummaryTypeChange(summaryType.value);
            }

            const summaryWordCount = this.modal.querySelector('#content-summary-word-count');
            if (summaryWordCount) {
                summaryWordCount.value = settings.summaryWordCount || 300;
            }

            // 🚀 新增：AI记忆总结设置
            const aiMemoryEnabled = this.modal.querySelector('#content-ai-memory-enabled');
            if (aiMemoryEnabled && summaryManager.aiMemorySummarizer) {
                const aiSettings = summaryManager.aiMemorySummarizer.settings;
                aiMemoryEnabled.checked = aiSettings.enabled || false;
                this.handleAIMemoryEnabledChange(aiMemoryEnabled.checked);
            }

            const aiMessageLevelSummary = this.modal.querySelector('#content-ai-message-level-summary');
            if (aiMessageLevelSummary && summaryManager.aiMemorySummarizer) {
                const aiSettings = summaryManager.aiMemorySummarizer.settings;
                aiMessageLevelSummary.checked = aiSettings.messageLevelSummary || false;
            }

            const aiImportanceThreshold = this.modal.querySelector('#content-ai-importance-threshold');
            const aiImportanceValue = this.modal.querySelector('#content-ai-importance-value');
            if (aiImportanceThreshold && aiImportanceValue && summaryManager.aiMemorySummarizer) {
                const aiSettings = summaryManager.aiMemorySummarizer.settings;
                aiImportanceThreshold.value = aiSettings.importanceThreshold || 0.6;
                aiImportanceValue.textContent = `${Math.round((aiSettings.importanceThreshold || 0.6) * 100)}%`;
            }

            // 🔍 新增：向量化记忆检索设置
            const vectorizedMemoryEnabled = this.modal.querySelector('#content-vectorized-memory-enabled');
            if (vectorizedMemoryEnabled && summaryManager.vectorizedMemoryRetrieval) {
                const vectorSettings = summaryManager.vectorizedMemoryRetrieval.settings;
                vectorizedMemoryEnabled.checked = vectorSettings.enabled || false;
                this.handleVectorizedMemoryEnabledChange(vectorizedMemoryEnabled.checked);
            }

            const vectorEngineSelect = this.modal.querySelector('#content-vector-engine');
            if (vectorEngineSelect && summaryManager.vectorizedMemoryRetrieval) {
                const vectorSettings = summaryManager.vectorizedMemoryRetrieval.settings;
                vectorEngineSelect.value = vectorSettings.vectorEngine || 'transformers';
            }

            const similarityThreshold = this.modal.querySelector('#content-similarity-threshold');
            const similarityValue = this.modal.querySelector('#content-similarity-value');
            if (similarityThreshold && similarityValue && summaryManager.vectorizedMemoryRetrieval) {
                const vectorSettings = summaryManager.vectorizedMemoryRetrieval.settings;
                similarityThreshold.value = vectorSettings.similarityThreshold || 0.7;
                similarityValue.textContent = `${Math.round((vectorSettings.similarityThreshold || 0.7) * 100)}%`;
            }

            const maxSearchResults = this.modal.querySelector('#content-max-search-results');
            if (maxSearchResults && summaryManager.vectorizedMemoryRetrieval) {
                const vectorSettings = summaryManager.vectorizedMemoryRetrieval.settings;
                maxSearchResults.value = vectorSettings.maxResults || 10;
            }

            // 🧠 新增：深度记忆管理设置
            const deepMemoryEnabled = this.modal.querySelector('#content-deep-memory-enabled');
            if (deepMemoryEnabled) {
                const infoBarTool = window.SillyTavernInfobar;
                const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
                if (deepMemoryManager) {
                    const deepMemorySettings = deepMemoryManager.settings;
                    deepMemoryEnabled.checked = deepMemorySettings.enabled || false;
                    this.handleDeepMemoryEnabledChange(deepMemoryEnabled.checked);
                }
            }

            const autoMemoryMigration = this.modal.querySelector('#content-auto-memory-migration');
            if (autoMemoryMigration) {
                const infoBarTool = window.SillyTavernInfobar;
                const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
                if (deepMemoryManager) {
                    const deepMemorySettings = deepMemoryManager.settings;
                    autoMemoryMigration.checked = deepMemorySettings.autoMemoryMigration || false;
                }
            }

            const memoryImportanceThreshold = this.modal.querySelector('#content-memory-importance-threshold');
            const memoryImportanceValue = this.modal.querySelector('#content-memory-importance-value');
            if (memoryImportanceThreshold && memoryImportanceValue) {
                const infoBarTool = window.SillyTavernInfobar;
                const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
                if (deepMemoryManager) {
                    const deepMemorySettings = deepMemoryManager.settings;
                    memoryImportanceThreshold.value = deepMemorySettings.shortTermToLongTermThreshold || 0.6;
                    memoryImportanceValue.textContent = `${Math.round((deepMemorySettings.shortTermToLongTermThreshold || 0.6) * 100)}%`;
                }
            }

            const memoryConflictResolution = this.modal.querySelector('#content-memory-conflict-resolution');
            if (memoryConflictResolution) {
                const infoBarTool = window.SillyTavernInfobar;
                const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
                if (deepMemoryManager) {
                    const deepMemorySettings = deepMemoryManager.settings;
                    memoryConflictResolution.checked = deepMemorySettings.memoryConflictResolution || false;
                }
            }

            // 记忆容量设置
            const capacityInputs = {
                'content-sensory-capacity': 'sensoryMemoryCapacity',
                'content-short-term-capacity': 'shortTermMemoryCapacity',
                'content-long-term-capacity': 'longTermMemoryCapacity',
                'content-deep-archive-capacity': 'deepArchiveCapacity'
            };

            Object.entries(capacityInputs).forEach(([inputId, settingKey]) => {
                const input = this.modal.querySelector(`#${inputId}`);
                if (input) {
                    const infoBarTool = window.SillyTavernInfobar;
                    const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
                    if (deepMemoryManager) {
                        const deepMemorySettings = deepMemoryManager.settings;
                        input.value = deepMemorySettings[settingKey] || input.defaultValue;
                    }
                }
            });

            // 🤖 新增：智能记忆分类器设置
            const intelligentClassifierEnabled = this.modal.querySelector('#content-intelligent-classifier-enabled');
            if (intelligentClassifierEnabled) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    intelligentClassifierEnabled.checked = classifierSettings.enabled || false;
                    this.handleIntelligentClassifierEnabledChange(intelligentClassifierEnabled.checked);
                }
            }

            const semanticClustering = this.modal.querySelector('#content-semantic-clustering');
            if (semanticClustering) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    semanticClustering.checked = classifierSettings.semanticClustering || false;
                }
            }

            const temporalPatternRecognition = this.modal.querySelector('#content-temporal-pattern-recognition');
            if (temporalPatternRecognition) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    temporalPatternRecognition.checked = classifierSettings.temporalPatternRecognition || false;
                }
            }

            const importancePrediction = this.modal.querySelector('#content-importance-prediction');
            if (importancePrediction) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    importancePrediction.checked = classifierSettings.importancePrediction || false;
                }
            }

            const classificationConfidenceThreshold = this.modal.querySelector('#content-classification-confidence-threshold');
            const classificationConfidenceValue = this.modal.querySelector('#content-classification-confidence-value');
            if (classificationConfidenceThreshold && classificationConfidenceValue) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    classificationConfidenceThreshold.value = classifierSettings.classificationConfidenceThreshold || 0.7;
                    classificationConfidenceValue.textContent = `${Math.round((classifierSettings.classificationConfidenceThreshold || 0.7) * 100)}%`;
                }
            }

            const adaptiveLearning = this.modal.querySelector('#content-adaptive-learning');
            if (adaptiveLearning) {
                const infoBarTool = window.SillyTavernInfobar;
                const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
                if (intelligentMemoryClassifier) {
                    const classifierSettings = intelligentMemoryClassifier.settings;
                    adaptiveLearning.checked = classifierSettings.adaptationEnabled || false;
                }
            }

            // 🔧 新增：自动隐藏楼层设置
            const autoHideEnabled = this.modal.querySelector('#content-auto-hide-enabled');
            if (autoHideEnabled) {
                autoHideEnabled.checked = settings.autoHideEnabled || false;
                this.handleAutoHideEnabledChange(autoHideEnabled.checked);
            }

            const autoHideThreshold = this.modal.querySelector('#content-auto-hide-threshold');
            if (autoHideThreshold) {
                autoHideThreshold.value = settings.autoHideThreshold || 30;
            }

            // 📚 新增：世界书上传持久化设置回填
            const wbAutoEl = this.modal.querySelector('#worldbook-auto-upload');
            if (wbAutoEl) {
                wbAutoEl.checked = settings.autoUploadNewSummary || false;
            }

            const entryFormatEl = this.modal.querySelector('#worldbook-entry-format');
            const customRow = this.modal.querySelector('#worldbook-custom-name-row');
            if (entryFormatEl) {
                entryFormatEl.value = settings.worldBookEntryFormat || 'auto';
                if (customRow) customRow.style.display = (entryFormatEl.value === 'custom') ? 'block' : 'none';
            }

            const customNameEl = this.modal.querySelector('#worldbook-custom-name');
            if (customNameEl) {
                customNameEl.value = settings.worldBookCustomEntryName || '';
            }

            const addTsEl = this.modal.querySelector('#worldbook-add-timestamp');
            if (addTsEl) {
                addTsEl.checked = settings.worldBookAddTimestamp !== false;
            }

            const useTagsEl = this.modal.querySelector('#worldbook-use-tags');
            if (useTagsEl) {
                useTagsEl.checked = settings.worldBookUseContentTags !== false;
            }

            // 🆕 新增：加载自定义提示词设置
            const useCustomPrompt = this.modal.querySelector('#content-use-custom-prompt');
            if (useCustomPrompt) {
                useCustomPrompt.checked = settings.useCustomPrompt || false;
                this.handleUseCustomPromptChange(useCustomPrompt.checked);
            }

            const customPrompt = this.modal.querySelector('#content-custom-prompt');
            if (customPrompt) {
                customPrompt.value = settings.customPrompt || '';
                this.updateSummaryCustomPromptStats();
            }

            console.log('[InfoBarSettings] ✅ 总结设置加载完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载总结设置失败:', error);
        }
    }

    /**
     * 加载总结历史
     */
    async loadSummaryHistory() {
        try {
            console.log('[InfoBarSettings] 📚 加载总结历史...');

            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                console.warn('[InfoBarSettings] ⚠️ 总结管理器未找到');
                return;
            }

            const summaryHistory = await summaryManager.getSummaryHistory();
            this.renderSummaryHistory(summaryHistory);

            console.log('[InfoBarSettings] ✅ 总结历史加载完成，共', summaryHistory.length, '条记录');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载总结历史失败:', error);
        }
    }

    /**
     * 渲染总结历史
     */
    renderSummaryHistory(summaryHistory) {
        try {
            const historySelect = this.modal.querySelector('#content-summary-history-select');
            if (!historySelect) return;

            // 清空现有选项，保留默认选项
            historySelect.innerHTML = '<option value="">请选择要查看的总结记录</option>';

            if (!summaryHistory || summaryHistory.length === 0) {
                // 添加空状态选项
                const emptyOption = document.createElement('option');
                emptyOption.value = '';
                emptyOption.textContent = '暂无总结记录，请先生成总结';
                emptyOption.disabled = true;
                historySelect.appendChild(emptyOption);
                return;
            }

            // 添加总结记录选项
            summaryHistory.forEach(summary => {
                const option = document.createElement('option');
                option.value = summary.id;
                option.textContent = this.formatSummarySelectOption(summary);
                historySelect.appendChild(option);
            });

            console.log('[InfoBarSettings] ✅ 总结历史选择框渲染完成，共', summaryHistory.length, '条记录');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 渲染总结历史失败:', error);
        }
    }

    /**
     * 格式化总结标题
     */
    formatSummaryTitle(summary) {
        const typeMap = {
            'small': '小总结',
            'large': '大总结',
            'manual': '手动总结',
            'auto': '自动总结'
        };

        const typeText = typeMap[summary.type] || '总结';
        const messageRange = summary.messageRange ?
            ` (${summary.messageRange.start}-${summary.messageRange.end})` : '';

        return `${typeText}${messageRange}`;
    }

    /**
     * 🚀 格式化增强的总结标题（支持AI记忆总结）
     */
    formatEnhancedSummaryTitle(summary) {
        // 如果是AI记忆总结
        if (summary.source === 'ai_memory_summarizer' || summary.type === 'ai_memory') {
            return summary.title || `AI记忆总结 (${summary.messageCount || 0}条消息)`;
        }

        // 传统总结
        const typeMap = {
            'small': '小总结',
            'large': '大总结',
            'manual': '手动总结',
            'auto': '自动总结'
        };

        const typeText = typeMap[summary.type] || '总结';
        const messageRange = summary.messageRange ?
            ` (${summary.messageRange.start}-${summary.messageRange.end})` : '';

        return `${typeText}${messageRange}`;
    }

    /**
     * 格式化总结选择框选项
     * 格式：[总结类型] 总结标题 (楼层X-Y) - 时间
     */
    formatSummarySelectOption(summary) {
        try {
            // 总结类型
            const typeMap = {
                'small': '小总结',
                'large': '大总结',
                'manual': '手动总结',
                'auto': '自动总结'
            };
            const typeText = typeMap[summary.type] || '总结';

            // 总结标题（使用内容的前20个字符作为标题）
            let title = '无标题';
            if (summary.content && summary.content.trim()) {
                title = summary.content.trim().substring(0, 20);
                if (summary.content.length > 20) {
                    title += '...';
                }
            }

            // 楼层信息
            let floorInfo = '';
            if (summary.messageRange) {
                const start = summary.messageRange.start + 1; // 转换为1基索引
                const end = summary.messageRange.end + 1;
                floorInfo = ` (楼层${start}-${end})`;
            }

            // 时间信息
            const timeText = this.formatShortDate(summary.timestamp);

            // 🚀 新增：世界书上传状态
            let uploadStatus = '';
            if (summary.worldBookUpload) {
                uploadStatus = ' 📚';
            }

            // 组合格式：[总结类型] 总结标题 (楼层X-Y) - 时间 [上传状态]
            return `[${typeText}] ${title}${floorInfo} - ${timeText}${uploadStatus}`;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 格式化总结选择框选项失败:', error);
            return '总结记录';
        }
    }

    /**
     * 格式化总结预览
     */
    formatSummaryPreview(content) {
        if (!content) return '暂无内容';
        return content.length > 100 ? content.substring(0, 100) + '...' : content;
    }

    /**
     * 格式化日期
     */
    formatDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleString('zh-CN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * 格式化短日期（用于选择框）
     */
    formatShortDate(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const targetDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());

        if (targetDate.getTime() === today.getTime()) {
            // 今天，只显示时间
            return date.toLocaleString('zh-CN', {
                hour: '2-digit',
                minute: '2-digit'
            });
        } else {
            // 其他日期，显示月日和时间
            return date.toLocaleString('zh-CN', {
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    }

    /**
     * 显示总结内容
     */
    async showSummaryContent(summaryId) {
        try {
            console.log('[InfoBarSettings] 📄 显示总结内容:', summaryId);

            if (!summaryId) {
                // 隐藏内容区域
                this.hideSummaryContent();
                return;
            }

            // 获取总结历史
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                console.warn('[InfoBarSettings] ⚠️ 总结管理器未找到');
                return;
            }

            // 🔧 修复：使用增强的总结历史获取方法，支持AI记忆总结
            const allSummaries = await summaryManager.getEnhancedSummaryHistory();
            const summary = allSummaries.find(s => s.id === summaryId);

            if (!summary) {
                console.warn('[InfoBarSettings] ⚠️ 未找到总结记录:', summaryId, '总结数量:', allSummaries.length);
                // 隐藏内容区域，因为该总结不存在
                this.hideSummaryContent();
                return;
            }

            console.log('[InfoBarSettings] 📋 找到总结记录:', {
                id: summary.id,
                type: summary.type,
                source: summary.source,
                hasContent: !!summary.content
            });

            // 显示内容区域
            const contentSection = this.modal.querySelector('#content-summary-content-section');
            const titleElement = this.modal.querySelector('#content-summary-title');
            const dateElement = this.modal.querySelector('#content-summary-date');
            const bodyElement = this.modal.querySelector('#content-summary-content-body');

            if (contentSection && titleElement && dateElement && bodyElement) {
                // 🔧 修复：使用增强的标题格式化方法
                titleElement.textContent = this.formatEnhancedSummaryTitle(summary);
                dateElement.textContent = this.formatDate(summary.timestamp);
                bodyElement.textContent = summary.content || '暂无内容';

                contentSection.style.display = 'block';

                console.log('[InfoBarSettings] ✅ 总结内容已显示');
            } else {
                console.warn('[InfoBarSettings] ⚠️ 未找到内容显示元素');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示总结内容失败:', error);
        }
    }
    /**
     * 绑定总结面板事件
     */
    bindSummaryPanelEvents() {
        try {
            console.log('[InfoBarSettings] 🔗 绑定总结面板事件...');

            // 🔧 修复：防止重复绑定事件监听器
            if (this._summaryEventsbound) {
                console.log('[InfoBarSettings] ⚠️ 总结面板事件已绑定，跳过重复绑定');
                return;
            }

            // 总结类型变化事件
            const summaryTypeSelect = this.modal.querySelector('#content-summary-type');
            if (summaryTypeSelect) {
                summaryTypeSelect.addEventListener('change', (e) => {
                    this.handleSummaryTypeChange(e.target.value);
                });
            }

            // 🆕 新增：总结范围模式变化事件
            const summaryRangeModeSelect = this.modal.querySelector('#content-summary-range-mode');
            if (summaryRangeModeSelect) {
                summaryRangeModeSelect.addEventListener('change', (e) => {
                    this.handleSummaryRangeModeChange(e.target.value);
                });
            }

            // 手动总结按钮事件
            const manualSummaryBtn = this.modal.querySelector('#header-manual-summary-btn');
            if (manualSummaryBtn) {
                manualSummaryBtn.addEventListener('click', () => {
                    this.triggerManualSummary();
                });
            }

            // 保存设置按钮事件
            const saveSettingsBtn = this.modal.querySelector('#content-save-settings-btn');
            if (saveSettingsBtn) {
                saveSettingsBtn.addEventListener('click', () => {
                    this.saveSummarySettings();
                });
            }

            // 刷新按钮事件
            const refreshBtn = this.modal.querySelector('#header-refresh-summary-btn');
            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => {
                    this.loadSummaryHistory();
                });
            }

            // 总结历史选择框事件
            const historySelect = this.modal.querySelector('#content-summary-history-select');
            if (historySelect) {
                historySelect.addEventListener('change', (e) => {
                    const summaryId = e.target.value;
                    this.showSummaryContent(summaryId);
                });
            }

            // 🚀 新增：上传到世界书按钮事件
            const uploadToWorldBookBtn = this.modal.querySelector('#content-upload-to-worldbook-btn');
            if (uploadToWorldBookBtn && historySelect) {
                uploadToWorldBookBtn.addEventListener('click', async () => {
                    await this.handleUploadSummaryToWorldBook();
                });
            }

            // 删除当前选择的总结
            const deleteBtn = this.modal.querySelector('#content-delete-summary-btn');
            if (deleteBtn && historySelect) {
                deleteBtn.addEventListener('click', async () => {
                    try {
                        const summaryId = historySelect.value;
                        if (!summaryId) {
                            this.showNotification('请先在选择框中选择一条总结记录', 'info');
                            return;
                        }
                        const infoBarTool = window.SillyTavernInfobar;
                        const summaryManager = infoBarTool?.modules?.summaryManager;
                        if (!summaryManager) return;
                        const ok = await summaryManager.deleteSummaryRecord(summaryId);
                        if (ok) {
                            this.showNotification('✅ 已删除该总结', 'success');
                            // 刷新历史
                            await this.loadSummaryHistory();
                            // 清空选择与内容
                            historySelect.value = '';
                            this.hideSummaryContent();
                        } else {
                            this.showNotification('❌ 删除失败', 'error');
                        }
                    } catch (err) {
                        console.error('[InfoBarSettings] ❌ 删除总结失败:', err);
                        this.showNotification('❌ 删除失败', 'error');
                    }
                });
            }

            // 🚀 新增：世界书上传配置事件
            this.bindWorldBookUploadEvents();

            // 🧠 记忆增强面板事件处理器
            this.bindMemoryEnhancementEvents();

            // 🚀 新增：AI记忆总结复选框事件（总结面板中的旧版本，保留兼容性）
            const aiMemoryEnabledCheckbox = this.modal.querySelector('#content-ai-memory-enabled');
            if (aiMemoryEnabledCheckbox) {
                aiMemoryEnabledCheckbox.addEventListener('change', (e) => {
                    this.handleAIMemoryEnabledChange(e.target.checked);
                });
            }

            // 🚀 新增：消息级别总结复选框事件
            const aiMessageLevelCheckbox = this.modal.querySelector('#content-ai-message-level-summary');
            if (aiMessageLevelCheckbox) {
                aiMessageLevelCheckbox.addEventListener('change', (e) => {
                    this.handleAIMessageLevelChange(e.target.checked);
                });
            }

            // 🚀 新增：重要性阈值滑块事件
            const aiImportanceThreshold = this.modal.querySelector('#content-ai-importance-threshold');
            if (aiImportanceThreshold) {
                aiImportanceThreshold.addEventListener('input', (e) => {
                    this.handleAIImportanceThresholdChange(e.target.value);
                });
            }

            // 🚀 新增：总结筛选标签事件
            const filterTabs = this.modal.querySelectorAll('.filter-tab');
            filterTabs.forEach(tab => {
                tab.addEventListener('click', (e) => {
                    this.handleFilterTabClick(e.target.dataset.filter);
                });
            });

            // 🔍 新增：向量化记忆检索复选框事件
            const vectorizedMemoryEnabledCheckbox = this.modal.querySelector('#content-vectorized-memory-enabled');
            if (vectorizedMemoryEnabledCheckbox) {
                vectorizedMemoryEnabledCheckbox.addEventListener('change', (e) => {
                    this.handleVectorizedMemoryEnabledChange(e.target.checked);
                });
            }

            // 🔍 新增：向量化引擎选择事件
            const vectorEngineSelect = this.modal.querySelector('#content-vector-engine');
            if (vectorEngineSelect) {
                vectorEngineSelect.addEventListener('change', (e) => {
                    this.handleVectorEngineChange(e.target.value);
                });
            }

            // 🔍 新增：相似度阈值滑块事件
            const similarityThreshold = this.modal.querySelector('#content-similarity-threshold');
            if (similarityThreshold) {
                similarityThreshold.addEventListener('input', (e) => {
                    this.handleSimilarityThresholdChange(e.target.value);
                });
            }

            // 🔍 新增：最大搜索结果数量事件
            const maxSearchResults = this.modal.querySelector('#content-max-search-results');
            if (maxSearchResults) {
                maxSearchResults.addEventListener('input', (e) => {
                    this.handleMaxSearchResultsChange(e.target.value);
                });
            }

            // 🧠 新增：深度记忆管理复选框事件
            const deepMemoryEnabledCheckbox = this.modal.querySelector('#content-deep-memory-enabled');
            if (deepMemoryEnabledCheckbox) {
                deepMemoryEnabledCheckbox.addEventListener('change', (e) => {
                    this.handleDeepMemoryEnabledChange(e.target.checked);
                });
            }

            // 🧠 新增：自动记忆迁移复选框事件
            const autoMemoryMigrationCheckbox = this.modal.querySelector('#content-auto-memory-migration');
            if (autoMemoryMigrationCheckbox) {
                autoMemoryMigrationCheckbox.addEventListener('change', (e) => {
                    this.handleAutoMemoryMigrationChange(e.target.checked);
                });
            }

            // 🧠 新增：记忆重要性阈值滑块事件
            const memoryImportanceThreshold = this.modal.querySelector('#content-memory-importance-threshold');
            if (memoryImportanceThreshold) {
                memoryImportanceThreshold.addEventListener('input', (e) => {
                    this.handleMemoryImportanceThresholdChange(e.target.value);
                });
            }

            // 🧠 新增：记忆冲突解决复选框事件
            const memoryConflictResolutionCheckbox = this.modal.querySelector('#content-memory-conflict-resolution');
            if (memoryConflictResolutionCheckbox) {
                memoryConflictResolutionCheckbox.addEventListener('change', (e) => {
                    this.handleMemoryConflictResolutionChange(e.target.checked);
                });
            }

            // 🧠 新增：记忆容量设置事件
            const capacityInputs = [
                'content-sensory-capacity',
                'content-short-term-capacity',
                'content-long-term-capacity',
                'content-deep-archive-capacity'
            ];

            capacityInputs.forEach(inputId => {
                const input = this.modal.querySelector(`#${inputId}`);
                if (input) {
                    input.addEventListener('input', (e) => {
                        this.handleMemoryCapacityChange(inputId, e.target.value);
                    });
                }
            });

            // 🤖 新增：智能记忆分类器复选框事件
            const intelligentClassifierEnabledCheckbox = this.modal.querySelector('#content-intelligent-classifier-enabled');
            if (intelligentClassifierEnabledCheckbox) {
                intelligentClassifierEnabledCheckbox.addEventListener('change', (e) => {
                    this.handleIntelligentClassifierEnabledChange(e.target.checked);
                });
            }

            // 🤖 新增：语义聚类分析复选框事件
            const semanticClusteringCheckbox = this.modal.querySelector('#content-semantic-clustering');
            if (semanticClusteringCheckbox) {
                semanticClusteringCheckbox.addEventListener('change', (e) => {
                    this.handleSemanticClusteringChange(e.target.checked);
                });
            }

            // 🤖 新增：时序模式识别复选框事件
            const temporalPatternRecognitionCheckbox = this.modal.querySelector('#content-temporal-pattern-recognition');
            if (temporalPatternRecognitionCheckbox) {
                temporalPatternRecognitionCheckbox.addEventListener('change', (e) => {
                    this.handleTemporalPatternRecognitionChange(e.target.checked);
                });
            }

            // 🤖 新增：重要性预测复选框事件
            const importancePredictionCheckbox = this.modal.querySelector('#content-importance-prediction');
            if (importancePredictionCheckbox) {
                importancePredictionCheckbox.addEventListener('change', (e) => {
                    this.handleImportancePredictionChange(e.target.checked);
                });
            }

            // 🤖 新增：分类置信度阈值滑块事件
            const classificationConfidenceThreshold = this.modal.querySelector('#content-classification-confidence-threshold');
            if (classificationConfidenceThreshold) {
                classificationConfidenceThreshold.addEventListener('input', (e) => {
                    this.handleClassificationConfidenceThresholdChange(e.target.value);
                });
            }

            // 🤖 新增：自适应学习复选框事件
            const adaptiveLearningCheckbox = this.modal.querySelector('#content-adaptive-learning');
            if (adaptiveLearningCheckbox) {
                adaptiveLearningCheckbox.addEventListener('change', (e) => {
                    this.handleAdaptiveLearningChange(e.target.checked);
                });
            }

            // 🆕 新增：自定义提示词复选框事件
            const useCustomPromptCheckbox = this.modal.querySelector('#content-use-custom-prompt');
            if (useCustomPromptCheckbox) {
                useCustomPromptCheckbox.addEventListener('change', (e) => {
                    this.handleUseCustomPromptChange(e.target.checked);
                });
            }

            // 🆕 新增：自定义提示词输入事件（统计字数）
            const customPromptTextarea = this.modal.querySelector('#content-custom-prompt');
            if (customPromptTextarea) {
                customPromptTextarea.addEventListener('input', () => {
                    this.updateSummaryCustomPromptStats();
                });
                customPromptTextarea.addEventListener('keyup', () => {
                    this.updateSummaryCustomPromptStats();
                });
            }

            // 🔧 新增：自动隐藏楼层复选框事件
            const autoHideEnabledCheckbox = this.modal.querySelector('#content-auto-hide-enabled');
            if (autoHideEnabledCheckbox) {
                autoHideEnabledCheckbox.addEventListener('change', (e) => {
                    this.handleAutoHideEnabledChange(e.target.checked);
                });
            }

            // 🔧 修复：设置事件绑定标志，防止重复绑定
            this._summaryEventsbound = true;

            console.log('[InfoBarSettings] ✅ 总结面板事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定总结面板事件失败:', error);
        }
    }

    /**
     * 处理总结类型变化
     */
    handleSummaryTypeChange(summaryType) {
        try {
            console.log('[InfoBarSettings] 🔄 总结类型变化:', summaryType);

            const customWordCountRow = this.modal.querySelector('#content-custom-word-count-row');
            if (customWordCountRow) {
                if (summaryType === 'custom') {
                    customWordCountRow.style.display = 'block';
                } else {
                    customWordCountRow.style.display = 'none';
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理总结类型变化失败:', error);
        }
    }

    /**
     * 🆕 新增：处理总结范围模式变化
     */
    handleSummaryRangeModeChange(rangeMode) {
        try {
            console.log('[InfoBarSettings] 🔄 总结范围模式变化:', rangeMode);

            const customRangeRow = this.modal.querySelector('#content-custom-range-row');
            if (customRangeRow) {
                if (rangeMode === 'custom') {
                    customRangeRow.style.display = 'block';
                } else {
                    customRangeRow.style.display = 'none';
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理总结范围模式变化失败:', error);
        }
    }

    /**
     * 🆕 处理使用自定义提示词变化
     */
    handleUseCustomPromptChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔄 使用自定义提示词状态变化:', enabled);

            // 显示/隐藏自定义提示词配置区域
            const customPromptRow = this.modal.querySelector('#content-custom-prompt-row');
            if (customPromptRow) {
                customPromptRow.style.display = enabled ? 'block' : 'none';
                console.log(`[InfoBarSettings] 📝 自定义提示词配置区域${enabled ? '显示' : '隐藏'}`);
            }

            // 如果启用，更新统计信息
            if (enabled) {
                this.updateSummaryCustomPromptStats();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理使用自定义提示词变化失败:', error);
        }
    }

    /**
     * 🆕 更新总结自定义提示词统计信息
     */
    updateSummaryCustomPromptStats() {
        try {
            const textarea = this.modal.querySelector('#content-custom-prompt');
            const charCountSpan = this.modal.querySelector('#content-custom-prompt-char-count');
            const lineCountSpan = this.modal.querySelector('#content-custom-prompt-line-count');

            if (!textarea || !charCountSpan || !lineCountSpan) return;

            const text = textarea.value || '';
            const charCount = text.length;
            const lineCount = text.split('\n').length;

            charCountSpan.textContent = charCount;
            lineCountSpan.textContent = lineCount;

            // 根据字符数量设置颜色提示
            if (charCount > 2000) {
                charCountSpan.style.color = '#ff6b6b'; // 红色警告
            } else if (charCount > 1000) {
                charCountSpan.style.color = '#ffa726'; // 橙色提醒
            } else {
                charCountSpan.style.color = ''; // 默认颜色
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新自定义提示词统计失败:', error);
        }
    }

    /**
     * 🔧 新增：处理自动隐藏启用状态变化
     */
    handleAutoHideEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔄 自动隐藏楼层启用状态变化:', enabled);

            // 显示/隐藏阈值设置
            const thresholdRow = this.modal.querySelector('#content-auto-hide-threshold-row');
            if (thresholdRow) {
                thresholdRow.style.display = enabled ? 'block' : 'none';
            }

            // 如果启用了自动隐藏，立即检查是否需要隐藏楼层
            if (enabled) {
                this.checkAndExecuteAutoHide();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理自动隐藏状态变化失败:', error);
        }
    }

    /**
     * 🔧 新增：检查并执行自动隐藏楼层
     */
    async checkAndExecuteAutoHide() {
        try {
            // 获取设置
            const autoHideEnabled = this.modal?.querySelector('#content-auto-hide-enabled')?.checked || false;
            const autoHideThreshold = parseInt(this.modal?.querySelector('#content-auto-hide-threshold')?.value) || 30;

            if (!autoHideEnabled) {
                console.log('[InfoBarSettings] ⏸️ 自动隐藏未启用，跳过检查');
                return;
            }

            // 获取当前聊天消息数量
            const chatLength = this.getChatLength();
            if (chatLength <= autoHideThreshold) {
                console.log('[InfoBarSettings] ℹ️ 聊天长度不足，无需隐藏楼层');
                return;
            }

            // 计算需要隐藏的范围：0到(总长度-阈值-1)
            const hideUntilIndex = chatLength - autoHideThreshold - 1;

            if (hideUntilIndex > 0) {
                console.log(`[InfoBarSettings] 🔄 执行自动隐藏：隐藏楼层 0-${hideUntilIndex}`);
                await this.executeHideCommand(`/hide 0-${hideUntilIndex}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 自动隐藏楼层失败:', error);
        }
    }

    /**
     * 获取当前聊天的消息数量
     */
    getChatLength() {
        try {
            // 使用SillyTavern的getContext获取聊天数据
            if (typeof getContext === 'function') {
                const context = getContext();
                return context?.chat?.length || 0;
            }

            // 备用方法：通过DOM查询消息数量
            const messages = document.querySelectorAll('#chat .mes');
            return messages.length;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取聊天长度失败:', error);
            return 0;
        }
    }

    /**
     * 执行隐藏命令
     */
    async executeHideCommand(command) {
        try {
            console.log('[InfoBarSettings] 📋 执行隐藏命令:', command);

            // 方法1: 尝试使用SillyTavern的斜杠命令解析器
            if (typeof window.SlashCommandParser !== 'undefined') {
                const parser = new window.SlashCommandParser();
                const result = parser.parse(command, false);

                if (result && typeof result.execute === 'function') {
                    await result.execute();
                    console.log('[InfoBarSettings] ✅ 隐藏命令执行成功 (方法1)');
                    return;
                }
            }

            // 方法2: 尝试直接在聊天输入框执行命令
            const chatTextarea = document.getElementById('send_textarea');
            if (chatTextarea) {
                console.log('[InfoBarSettings] 🔄 尝试通过聊天输入框执行命令');
                const originalValue = chatTextarea.value;
                chatTextarea.value = command;

                // 触发输入事件
                chatTextarea.dispatchEvent(new Event('input', { bubbles: true }));

                // 等待短暂时间后按回车
                setTimeout(() => {
                    chatTextarea.dispatchEvent(new KeyboardEvent('keydown', {
                        key: 'Enter',
                        bubbles: true
                    }));

                    // 恢复原始值
                    setTimeout(() => {
                        chatTextarea.value = originalValue;
                    }, 100);
                }, 100);

                console.log('[InfoBarSettings] ✅ 隐藏命令已通过聊天输入框发送');
                return;
            }

            // 方法3: 尝试使用SillyTavern的全局命令执行器
            if (typeof window.executeSlashCommand === 'function') {
                await window.executeSlashCommand(command);
                console.log('[InfoBarSettings] ✅ 隐藏命令执行成功 (方法3)');
                return;
            }

            console.warn('[InfoBarSettings] ⚠️ 所有隐藏命令执行方法都失败');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 执行隐藏命令失败:', error);
        }
    }

    /**
     * 🆕 新增：显示总结预览对话框（参考添加面板对话框的成功实现）
     */
    async showSummaryPreview(summaryRange, messages, existingSummaries) {
        return new Promise((resolve) => {
            try {
                console.log('[InfoBarSettings] 📋 显示总结预览对话框...');

                // 检查是否与已有总结重复
                const hasOverlap = this.checkSummaryOverlap(summaryRange, existingSummaries);

                // 计算总结信息
                const messageCount = summaryRange.end - summaryRange.start + 1;
                const startFloor = summaryRange.start + 1; // 转换为1基索引
                const endFloor = summaryRange.end + 1;

                // 获取预览消息
                const previewMessages = messages.slice(summaryRange.start, Math.min(summaryRange.start + 3, summaryRange.end + 1));
                const lastMessages = messages.slice(Math.max(summaryRange.end - 2, summaryRange.start), summaryRange.end + 1);

                // 🆕 检测是否为移动端
                const isMobile = window.innerWidth <= 768;

                // 构建重复警告HTML
                const overlapWarningHTML = hasOverlap ? `
                    <div style="background: rgba(255, 165, 0, 0.1); border-left: 4px solid #ffa500; padding: 10px; margin-bottom: 12px; border-radius: 4px;">
                        <div style="color: #ffa500; font-weight: bold; margin-bottom: 6px; font-size: 13px;">⚠️ 检测到与已有总结重复</div>
                        <div style="font-size: 12px; color: var(--SmartThemeQuoteColor, #888);">
                            该范围与已有总结存在重叠。继续总结将创建新的总结记录。
                        </div>
                    </div>
                ` : '';

                // 构建预览消息HTML
                const previewMessagesHTML = previewMessages.map((msg, idx) => `
                    <div style="margin-bottom: 6px; padding-bottom: 6px; border-bottom: 1px solid var(--SmartThemeBorderColor, #333); font-size: 12px;">
                        <div style="color: var(--SmartThemeQuoteColor, #888); font-size: 11px;">楼层 ${summaryRange.start + idx + 1}</div>
                        <div style="margin-top: 4px; word-break: break-word;">${this.truncateText(msg.mes || '', 80)}</div>
                    </div>
                `).join('');

                const lastMessagesHTML = lastMessages.map((msg, idx) => `
                    <div style="margin-bottom: 6px; padding-bottom: 6px; border-bottom: 1px solid var(--SmartThemeBorderColor, #333); font-size: 12px;">
                        <div style="color: var(--SmartThemeQuoteColor, #888); font-size: 11px;">楼层 ${Math.max(summaryRange.end - 2, summaryRange.start) + idx + 1}</div>
                        <div style="margin-top: 4px; word-break: break-word;">${this.truncateText(msg.mes || '', 80)}</div>
                    </div>
                `).join('');

                // 创建对话框HTML（参考添加面板对话框）
                const dialogHTML = `
                    <div class="summary-preview-dialog-overlay ${isMobile ? 'mobile-mode' : ''}" id="summary-preview-dialog">
                        <div class="summary-preview-dialog ${isMobile ? 'mobile-mode' : ''}">
                            <div class="dialog-header">
                                <h3 style="margin: 0; font-size: 16px; color: var(--SmartThemeAccentColor, #4a9eff);">📋 总结预览</h3>
                            </div>

                            <div class="dialog-body">
                                ${overlapWarningHTML}

                                <div style="margin-bottom: 12px;">
                                    <div style="font-weight: bold; margin-bottom: 6px; font-size: 13px;">📊 总结范围</div>
                                    <div style="background: var(--SmartThemeSurfaceColor, #252525); padding: 10px; border-radius: 4px; font-size: 12px;">
                                        <div style="margin-bottom: 4px;">楼层范围：<span style="color: var(--SmartThemeAccentColor, #4a9eff);">${startFloor} - ${endFloor}</span></div>
                                        <div>消息数量：<span style="color: var(--SmartThemeAccentColor, #4a9eff);">${messageCount} 条</span></div>
                                    </div>
                                </div>

                                <div style="margin-bottom: 12px;">
                                    <div style="font-weight: bold; margin-bottom: 6px; font-size: 13px;">📝 开始部分预览</div>
                                    <div style="background: var(--SmartThemeSurfaceColor, #252525); padding: 10px; border-radius: 4px; max-height: 120px; overflow-y: auto;">
                                        ${previewMessagesHTML}
                                    </div>
                                </div>

                                <div style="margin-bottom: 12px;">
                                    <div style="font-weight: bold; margin-bottom: 6px; font-size: 13px;">📝 结束部分预览</div>
                                    <div style="background: var(--SmartThemeSurfaceColor, #252525); padding: 10px; border-radius: 4px; max-height: 120px; overflow-y: auto;">
                                        ${lastMessagesHTML}
                                    </div>
                                </div>
                            </div>

                            <div class="dialog-footer">
                                <button class="btn-cancel" id="summary-preview-cancel">取消</button>
                                <button class="btn-confirm" id="summary-preview-confirm">确认总结</button>
                            </div>
                        </div>
                    </div>
                `;

                // 添加对话框到页面
                document.body.insertAdjacentHTML('beforeend', dialogHTML);

                // 绑定事件
                const dialog = document.querySelector('#summary-preview-dialog');
                const cancelBtn = dialog.querySelector('#summary-preview-cancel');
                const confirmBtn = dialog.querySelector('#summary-preview-confirm');

                const closeDialog = () => {
                    if (dialog && dialog.parentNode) {
                        dialog.remove();
                    }
                };

                cancelBtn?.addEventListener('click', () => {
                    closeDialog();
                    resolve(false);
                });

                confirmBtn?.addEventListener('click', () => {
                    closeDialog();
                    resolve(true);
                });

                // 点击背景关闭
                dialog?.addEventListener('click', (e) => {
                    if (e.target === dialog) {
                        closeDialog();
                        resolve(false);
                    }
                });

            } catch (error) {
                console.error('[InfoBarSettings] ❌ 显示总结预览失败:', error);
                resolve(true); // 出错时默认继续
            }
        });
    }

    /**
     * 🆕 新增：检查总结范围是否与已有总结重叠
     */
    checkSummaryOverlap(proposedRange, existingSummaries) {
        try {
            if (!existingSummaries || existingSummaries.length === 0) {
                return false;
            }

            for (const summary of existingSummaries) {
                if (!summary.messageRange) continue;

                const existingStart = summary.messageRange.start;
                const existingEnd = summary.messageRange.end;
                const proposedStart = proposedRange.start;
                const proposedEnd = proposedRange.end;

                // 检查是否有重叠
                if (!(proposedEnd < existingStart || proposedStart > existingEnd)) {
                    return true;
                }
            }

            return false;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 检查总结重叠失败:', error);
            return false;
        }
    }

    /**
     * 🆕 新增：截断文本
     */
    truncateText(text, maxLength) {
        if (!text) return '';
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    /**
     * 触发手动总结
     */
    async triggerManualSummary() {
        // 🔧 防止重复点击 - 检查是否已经在进行中
        if (this._summaryInProgress) {
            console.warn('[InfoBarSettings] ⚠️ 总结已在进行中，忽略重复点击');
            this.showMessage('⏳ 总结正在进行中，请耐心等待...', 'warning');
            return;
        }

        try {
            console.log('[InfoBarSettings] 🖊️ 触发手动总结...');

            // 获取总结管理器
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                throw new Error('总结管理器未初始化');
            }

            // 🆕 获取当前聊天的消息
            const context = SillyTavern.getContext();
            const chat = context?.chat;
            if (!chat || chat.length === 0) {
                throw new Error('当前聊天没有消息');
            }

            // 🆕 获取总结范围模式
            const rangeModeSelect = this.modal.querySelector('#content-summary-range-mode');
            const rangeMode = rangeModeSelect?.value || 'recent';

            // 🆕 计算总结范围
            let summaryRange;
            if (rangeMode === 'custom') {
                // 自定义范围模式
                const startInput = this.modal.querySelector('#content-custom-range-start');
                const endInput = this.modal.querySelector('#content-custom-range-end');

                const startFloor = parseInt(startInput?.value || '1');
                const endFloor = parseInt(endInput?.value || chat.length);

                // 转换为0基索引
                const start = Math.max(0, startFloor - 1);
                const end = Math.min(chat.length - 1, endFloor - 1);

                if (start > end) {
                    throw new Error('起始楼层不能大于结束楼层');
                }

                summaryRange = { start, end };
            } else {
                // 最近N层模式
                const floorCountInput = this.modal.querySelector('#content-summary-floor-count');
                const floorCount = parseInt(floorCountInput?.value || '20');

                const end = chat.length - 1;
                const start = Math.max(0, end - floorCount + 1);

                summaryRange = { start, end };
            }

            console.log('[InfoBarSettings] 📊 总结范围:', summaryRange);

            // 🆕 获取已有总结历史
            const existingSummaries = await summaryManager.getSummaryHistory();

            // 🆕 显示预览对话框
            const confirmed = await this.showSummaryPreview(summaryRange, chat, existingSummaries);

            if (!confirmed) {
                console.log('[InfoBarSettings] ℹ️ 用户取消了总结');
                this.showMessage('已取消总结', 'info');
                return;
            }

            // 设置进行中标志
            this._summaryInProgress = true;

            const manualSummaryBtn = this.modal.querySelector('#header-manual-summary-btn');
            if (manualSummaryBtn) {
                manualSummaryBtn.disabled = true;
                manualSummaryBtn.innerHTML = `
                    <span class="btn-icon">⏳</span>
                    <span class="btn-text">总结中...</span>
                `;
            }

            // 获取当前设置
            const settings = this.getCurrentSummarySettings();

            // 🆕 调用总结管理器进行总结，传入自定义范围
            const result = await summaryManager.generateSummary({
                type: 'manual',
                customRange: summaryRange, // 传入自定义范围
                ...settings
            });

            if (result.success) {
                console.log('[InfoBarSettings] ✅ 手动总结完成');
                this.showMessage('✅ 总结生成成功', 'success');

                // 刷新总结历史
                this.loadSummaryHistory();
            } else {
                console.error('[InfoBarSettings] ❌ 手动总结失败:', result.error);
                this.showMessage('❌ 总结生成失败: ' + result.error, 'error');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 触发手动总结失败:', error);

            // 🔧 改进的错误消息处理
            let errorMessage = '❌ 总结生成失败';

            if (error.message?.includes('429')) {
                errorMessage = '❌ API请求过于频繁，请稍后再试 (429错误)';
            } else if (error.message?.includes('500')) {
                errorMessage = '❌ Gemini服务器内部错误，请稍后重试 (500错误)';
            } else if (error.message?.includes('空的文本内容')) {
                errorMessage = '❌ 模型没有返回内容，请检查配置或重试';
            } else if (error.message?.includes('总结正在进行中')) {
                errorMessage = '⏳ 总结正在进行中，请耐心等待';
            } else if (error.message) {
                errorMessage += ': ' + error.message;
            }

            this.showMessage(errorMessage, 'error');
        } finally {
            // 🔧 清除进行中标志
            this._summaryInProgress = false;

            // 恢复按钮状态
            const manualSummaryBtn = this.modal.querySelector('#header-manual-summary-btn');
            if (manualSummaryBtn) {
                manualSummaryBtn.disabled = false;
                manualSummaryBtn.innerHTML = `
                    <span class="btn-icon">🖊️</span>
                    <span class="btn-text">手动总结</span>
                `;
            }
        }
    }

    /**
     * 保存总结设置
     */
    async saveSummarySettings() {
        try {
            console.log('[InfoBarSettings] 💾 保存总结设置...');

            const settings = this.getCurrentSummarySettings();

            // 获取总结管理器
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                throw new Error('总结管理器未初始化');
            }

            // 更新设置
            summaryManager.updateSettings(settings);

            // 保存到数据核心
            const unifiedDataCore = infoBarTool?.modules?.dataCore;
            if (unifiedDataCore) {
                await unifiedDataCore.setData('summary_settings', settings);
            }

            // 🔧 新增：保存到SillyTavern扩展设置
            const context = SillyTavern.getContext();
            if (context && context.extensionSettings) {
                const extensionSettings = context.extensionSettings;
                if (!extensionSettings['Information bar integration tool']) {
                    extensionSettings['Information bar integration tool'] = {};
                }

                // 保存总结设置到扩展设置
                Object.assign(extensionSettings['Information bar integration tool'], settings);

                // 触发SillyTavern保存
                if (context.saveSettingsDebounced) {
                    context.saveSettingsDebounced();
                }

                console.log('[InfoBarSettings] 💾 总结设置已保存到扩展设置');
            }

            console.log('[InfoBarSettings] ✅ 总结设置已保存');
            this.showMessage('✅ 设置已保存', 'success');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存总结设置失败:', error);
            this.showMessage('❌ 保存设置失败', 'error');
        }
    }

    /**
     * 获取当前总结设置
     */
    getCurrentSummarySettings() {
        const settings = {
            autoSummaryEnabled: false,
            summaryFloorCount: 20,
            summaryType: 'small',
            summaryWordCount: 300,
            injectSummaryEnabled: false,  // 🔧 新增：注入总结设置
            // 🔧 新增：自动隐藏楼层设置
            autoHideEnabled: false,
            autoHideThreshold: 30,
            // 📚 世界书上传相关（用于持久化保存）
            autoUploadNewSummary: false,
            worldBookEntryFormat: 'auto',
            worldBookCustomEntryName: '',
            worldBookAddTimestamp: true,
            worldBookUseContentTags: true
        };

        try {
            const autoSummaryEnabled = this.modal.querySelector('#content-auto-summary-enabled');
            if (autoSummaryEnabled) {
                settings.autoSummaryEnabled = autoSummaryEnabled.checked;
            }

            const summaryFloorCount = this.modal.querySelector('#content-summary-floor-count');
            if (summaryFloorCount) {
                settings.summaryFloorCount = parseInt(summaryFloorCount.value) || 20;
            }

            const summaryType = this.modal.querySelector('#content-summary-type');
            if (summaryType) {
                settings.summaryType = summaryType.value;
            }

            const summaryWordCount = this.modal.querySelector('#content-summary-word-count');
            if (summaryWordCount) {
                settings.summaryWordCount = parseInt(summaryWordCount.value) || 300;
            }

            // 🔧 新增：获取注入总结设置
            const injectSummaryEnabled = this.modal.querySelector('#content-inject-summary-enabled');
            if (injectSummaryEnabled) {
                settings.injectSummaryEnabled = injectSummaryEnabled.checked;
            }

            // 🔧 新增：获取自动隐藏楼层设置
            const autoHideEnabled = this.modal.querySelector('#content-auto-hide-enabled');
            if (autoHideEnabled) {
                settings.autoHideEnabled = autoHideEnabled.checked;
            }

            // 🆕 新增：获取自定义提示词设置
            const useCustomPrompt = this.modal.querySelector('#content-use-custom-prompt');
            if (useCustomPrompt) {
                settings.useCustomPrompt = useCustomPrompt.checked;
            }

            const customPrompt = this.modal.querySelector('#content-custom-prompt');
            if (customPrompt) {
                settings.customPrompt = customPrompt.value || '';
            }

            const autoHideThreshold = this.modal.querySelector('#content-auto-hide-threshold');
            if (autoHideThreshold) {
                settings.autoHideThreshold = parseInt(autoHideThreshold.value) || 30;
            }

            // 📚 新增：获取“自动上传新总结”与“条目命名格式”等世界书上传设置
            const wbAuto = this.modal.querySelector('#worldbook-auto-upload');
            if (wbAuto) {
                settings.autoUploadNewSummary = wbAuto.checked;
            }

            const entryFormatEl = this.modal.querySelector('#worldbook-entry-format');
            if (entryFormatEl) {
                settings.worldBookEntryFormat = entryFormatEl.value || 'auto';
            }

            const customNameEl = this.modal.querySelector('#worldbook-custom-name');
            if (customNameEl) {
                settings.worldBookCustomEntryName = customNameEl.value || '';
            }

            const addTsEl = this.modal.querySelector('#worldbook-add-timestamp');
            if (addTsEl) {
                settings.worldBookAddTimestamp = addTsEl.checked !== false;
            }

            const useTagsEl = this.modal.querySelector('#worldbook-use-tags');
            if (useTagsEl) {
                settings.worldBookUseContentTags = useTagsEl.checked !== false;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取当前总结设置失败:', error);
        }

        return settings;
    }

    /**
     * 隐藏总结内容
     */
    hideSummaryContent() {
        // 🔧 修复：检查modal是否存在，避免在未初始化时调用
        if (!this.modal) {
            console.log('[InfoBarSettings] ⚠️ 设置界面未初始化，跳过隐藏总结内容');
            return;
        }

        const contentSection = this.modal.querySelector('#content-summary-content-section');
        if (contentSection) {
            contentSection.style.display = 'none';
        }
    }

    /**
     * 处理字体大小变更
     */
    handleFontSizeChange(fontSize) {
        const heightSelect = this.modal.querySelector('select[name="infobar.height"]');
        if (!heightSelect) return;

        // 字体大小与高度的推荐关联
        const fontHeightMap = {
            'small': 'compact',     // 12px -> 24px
            'medium': 'normal',     // 14px -> 32px
            'large': 'comfortable', // 16px -> 40px
            'xlarge': 'spacious'    // 18px -> 48px
        };

        const recommendedHeight = fontHeightMap[fontSize];
        if (recommendedHeight && heightSelect.value === 'auto') {
            heightSelect.value = recommendedHeight;
            console.log(`[InfoBarSettings] 🔗 字体大小 ${fontSize} 自动关联高度 ${recommendedHeight}`);
        }

        // 触发高度变更事件
        this.handleInfobarHeightChange(heightSelect.value);
    }

    /**
     * 处理信息栏高度变更
     */
    handleInfobarHeightChange(height) {
        // 应用CSS变量到信息栏
        const heightMap = {
            'auto': 'auto',
            'compact': '24px',
            'normal': '32px',
            'comfortable': '40px',
            'spacious': '48px'
        };

        const heightValue = heightMap[height] || '32px';

        // 应用到CSS变量（如果存在信息栏元素）
        const infobarElements = document.querySelectorAll('.info-bar, .infobar-container');
        infobarElements.forEach(element => {
            element.style.setProperty('--infobar-height', heightValue);
            if (heightValue !== 'auto') {
                element.style.minHeight = heightValue;
            }
        });

        console.log(`[InfoBarSettings] 📏 信息栏高度设置为 ${heightValue}`);

        // 保存设置
        this.saveThemeSettings();
    }

    /**
     * 保存主题设置
     */
    saveThemeSettings() {
        try {
            const settings = {
                fontSize: this.modal.querySelector('select[name="theme.fontSize"]')?.value || 'medium',
                fontFamily: this.modal.querySelector('select[name="theme.fontFamily"]')?.value || 'system',
                infobarHeight: this.modal.querySelector('select[name="infobar.height"]')?.value || 'normal'
            };

            // 保存到扩展设置
            const extensionSettings = window.SillyTavernInfobar?.config || {};
            extensionSettings.theme = extensionSettings.theme || {};
            Object.assign(extensionSettings.theme, settings);

            console.log('[InfoBarSettings] 💾 主题设置已保存:', settings);
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存主题设置失败:', error);
        }
    }

    /**
     * 显示演示添加面板菜单
     */
    showAddPanelMenu(position, slotElement) {
        try {
            console.log('[InfoBarSettings] 🎭 显示演示添加面板菜单');

            // 移除现有菜单
            const existingMenu = document.querySelector('.demo-add-panel-menu');
            if (existingMenu) {
                existingMenu.remove();
            }

            // 获取区域信息
            const area = slotElement.dataset.area || 'top';
            console.log(`[InfoBarSettings] 📍 添加到区域: ${area}, 位置: ${position}`);

            // 动态获取用户启用的面板配置
            const enabledPanels = this.getEnabledPanels();
            console.log('[InfoBarSettings] 📊 获取到用户启用的面板:', Object.keys(enabledPanels));

            if (Object.keys(enabledPanels).length === 0) {
                console.warn('[InfoBarSettings] ⚠️ 没有启用的面板，无法显示添加菜单');
                return;
            }

            // 创建演示菜单
            const menu = document.createElement('div');
            menu.className = 'demo-add-panel-menu';
            // 生成面板列表HTML
            const panelListHtml = this.generatePanelListHtml(enabledPanels);

            // 获取第一个面板用于初始化右侧子项列表
            const firstPanelId = Object.keys(enabledPanels)[0];
            const firstPanelConfig = enabledPanels[firstPanelId];
            const subitemListHtml = this.generateSubitemListHtml(firstPanelId, firstPanelConfig);

            menu.innerHTML = `
                <div class="demo-menu-content">
                    <div class="menu-header">
                        <h3>添加到${area === 'top' ? '顶部' : '底部'}区域</h3>
                        <button class="menu-close-btn">&times;</button>
                    </div>
                    <div class="menu-body">
                        <div class="menu-layout">
                            <!-- 左侧面板导航 -->
                            <div class="panel-navigation">
                                <h4>📋 启用的面板 (${Object.keys(enabledPanels).length})</h4>
                                <div class="panel-list">
                                    ${panelListHtml}
                                </div>
                            </div>

                            <!-- 右侧子项列表 -->
                            <div class="subitem-list">
                                ${subitemListHtml}
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // 定位菜单（移动端全屏遮罩，桌面端居中）
            const isMobile = window.innerWidth <= 768;
            menu.style.position = 'fixed';
            menu.style.zIndex = '10000';
            if (isMobile) {
                // 全屏遮罩
                menu.style.left = '0';
                menu.style.top = '0';
                menu.style.width = '100vw';
                menu.style.height = '100vh';
                menu.style.background = 'rgba(0, 0, 0, 0.5)';
                menu.style.backdropFilter = 'blur(4px)';
                menu.style.display = 'flex';
                menu.style.alignItems = 'center';
                menu.style.justifyContent = 'center';

                // 内容容器限制尺寸并居中
                const menuContent = menu.querySelector('.demo-menu-content');
                if (menuContent) {
                    menuContent.style.width = '90vw';
                    menuContent.style.maxWidth = '360px';
                    menuContent.style.maxHeight = '80vh';
                    menuContent.style.overflow = 'auto';
                    menuContent.style.borderRadius = '12px';
                }
            } else {
                // 桌面居中
                menu.style.left = '50%';
                menu.style.top = '50%';
                menu.style.transform = 'translate(-50%, -50%)';
            }

            // 添加到页面
            document.body.appendChild(menu);

            // 点击遮罩关闭（仅移动端全屏时）
            if (isMobile) {
                menu.addEventListener('click', (evt) => {
                    const content = menu.querySelector('.demo-menu-content');
                    if (content && !content.contains(evt.target)) {
                        menu.remove();
                    }
                });
            }

            // 绑定关闭按钮
            const closeBtn = menu.querySelector('.menu-close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    menu.remove();
                });
            }

            // 绑定面板导航事件
            const panelNavItems = menu.querySelectorAll('.panel-nav-item');
            panelNavItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    if (e.target.classList.contains('add-panel-btn')) return; // 忽略添加按钮点击

                    // 切换激活状态
                    panelNavItems.forEach(navItem => navItem.classList.remove('active'));
                    item.classList.add('active');

                    // 更新右侧子项列表
                    const panelType = item.dataset.panel;
                    this.updateSubitemList(menu, panelType);
                });
            });

            // 绑定添加面板按钮事件
            const addPanelBtns = menu.querySelectorAll('.add-panel-btn');
            addPanelBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const panelType = btn.closest('.panel-nav-item').dataset.panel;
                    console.log(`[InfoBarSettings] 🎭 添加面板: ${panelType} 到 ${area}`);
                    this.addPanelToPreview(panelType, area, position);
                    menu.remove();
                });
            });

            // 绑定添加子项按钮事件
            const addSubitemBtns = menu.querySelectorAll('.add-subitem-btn');
            addSubitemBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const fieldType = btn.closest('.subitem-item').dataset.field;
                    console.log(`[InfoBarSettings] 🔧 添加子项: ${fieldType} 到 ${area}`);
                    this.addSubitemToPreview(fieldType, area, position);
                    menu.remove();
                });
            });

            // 点击外部关闭
            setTimeout(() => {
                const clickOutside = (e) => {
                    if (!menu.contains(e.target)) {
                        menu.remove();
                        document.removeEventListener('click', clickOutside);
                    }
                };
                document.addEventListener('click', clickOutside);
            }, 100);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示演示添加面板菜单失败:', error);
        }
    }

    /**
     * 显示演示面板弹窗
     */
    showDemoPanelPopup(panelType, panelData = {}) {
        try {
            console.log('[InfoBarSettings] 🎭 显示演示面板弹窗:', panelType);

            // 移除现有弹窗
            const existingPopup = document.querySelector('.demo-panel-popup');
            if (existingPopup) {
                existingPopup.remove();
            }

            // 演示数据
            const demoData = {
                personal: {
                    '姓名': '张三',
                    '年龄': '25岁',
                    '性别': '男',
                    '职业': '冒险者',
                    '等级': 'Lv.15',
                    '经验值': '2847/3000'
                },
                inventory: {
                    '金币': '1,247枚',
                    '银剑': '1把 (装备中)',
                    '生命药水': '3瓶',
                    '魔法石': '5颗',
                    '面包': '7个',
                    '钥匙': '神秘钥匙 x1'
                }
            };

            const data = demoData[panelType] || panelData;

            // 创建弹窗
            const popup = document.createElement('div');
            popup.className = 'demo-panel-popup';
            popup.style.setProperty('position', 'fixed', 'important');
            popup.style.setProperty('top', '0', 'important');
            popup.style.setProperty('left', '0', 'important');
            popup.style.setProperty('right', '0', 'important');
            popup.style.setProperty('bottom', '0', 'important');
            popup.style.setProperty('width', '100vw', 'important');
            popup.style.setProperty('height', '100vh', 'important');
            popup.style.setProperty('display', 'flex', 'important');
            popup.style.setProperty('align-items', 'center', 'important');
            popup.style.setProperty('justify-content', 'center', 'important');
            popup.style.setProperty('z-index', '10000', 'important');
            popup.style.setProperty('background', 'rgba(0,0,0,0.5)', 'important');

            const dataHtml = Object.entries(data)
                .map(([key, value]) => `
                    <div class="data-field">
                        <span class="field-name">${key}:</span>
                        <span class="field-value">${value}</span>
                    </div>
                `).join('');

            popup.innerHTML = `
                <div class="demo-popup-content" style="
                    background: var(--theme-bg-primary, #2a2a2a);
                    color: var(--theme-text-primary, #ffffff);
                    border: 1px solid var(--theme-border-color, rgba(255,255,255,0.1));
                    border-radius: 12px;
                    padding: 0;
                    min-width: 300px;
                    max-width: 90vw;
                    min-height: 200px;
                    max-height: 90vh;
                    overflow-y: auto;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                    position: relative;
                    margin: 0;
                ">
                    <div class="popup-header">
                        <h3>${panelType === 'personal' ? '👤 个人信息' :
                             panelType === 'inventory' ? '🎒 背包信息' : '📊 面板信息'}</h3>
                        <button class="popup-close-btn">&times;</button>
                    </div>
                    <div class="popup-body">
                        ${dataHtml}
                    </div>
                </div>
            `;

            // 添加到页面
            document.body.appendChild(popup);

            // 绑定关闭事件
            const closeBtn = popup.querySelector('.popup-close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    popup.remove();
                });
            }

            // 点击外部关闭
            popup.addEventListener('click', (e) => {
                if (e.target === popup) {
                    popup.remove();
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示演示面板弹窗失败:', error);
        }
    }

    /**
     * 更新预览位置
     */
    updatePreviewPosition(position) {
        try {
            console.log(`[InfoBarSettings] 📍 更新预览位置: ${position}`);

            const previewContainer = this.modal?.querySelector('.frontend-preview-container');
            if (previewContainer) {
                previewContainer.setAttribute('data-position', position);
                console.log(`[InfoBarSettings] ✅ 预览位置已更新为: ${position}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新预览位置失败:', error);
        }
    }

    /**
     * 更新预览样式
     */
    updatePreviewStyle(style) {
        try {
            console.log(`[InfoBarSettings] 🎨 更新预览样式: ${style}`);

            const messageWrapper = this.modal?.querySelector('.ai-message-wrapper');
            if (messageWrapper) {
                // 移除现有样式类
                messageWrapper.classList.remove('compact', 'comfortable', 'spacious');
                // 添加新样式类
                messageWrapper.classList.add(style);
                console.log(`[InfoBarSettings] ✅ 预览样式已更新为: ${style}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新预览样式失败:', error);
        }
    }

    /**
     * 切换添加按钮显示
     */
    toggleAddButtons(show) {
        try {
            console.log(`[InfoBarSettings] ➕ 切换添加按钮: ${show ? '显示' : '隐藏'}`);

            const addSlots = this.modal?.querySelectorAll('.add-panel-slots');
            if (addSlots) {
                addSlots.forEach(slot => {
                    slot.style.display = show ? 'flex' : 'none';
                });
                console.log(`[InfoBarSettings] ✅ 添加按钮已${show ? '显示' : '隐藏'}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换添加按钮失败:', error);
        }
    }

    /**
     * 切换动画效果
     */
    toggleAnimations(enabled) {
        try {
            console.log(`[InfoBarSettings] 🎬 切换动画效果: ${enabled ? '启用' : '禁用'}`);

            const previewContainer = this.modal?.querySelector('.frontend-preview-container');
            if (previewContainer) {
                previewContainer.setAttribute('data-animations', enabled);
                console.log(`[InfoBarSettings] ✅ 动画效果已${enabled ? '启用' : '禁用'}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换动画效果失败:', error);
        }
    }
    /**
     * 获取启用的面板配置
     */
    getEnabledPanels() {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            const enabledPanels = {};

            // 基础面板
            const basicPanelIds = [
                'personal', 'world', 'interaction', 'tasks', 'organization',
                'news', 'inventory', 'abilities', 'plot', 'cultivation',
                'fantasy', 'modern', 'historical', 'magic', 'training'
            ];

            basicPanelIds.forEach(panelId => {
                if (configs[panelId]) {
                    const panel = configs[panelId];
                    // 默认为true，除非明确设置为false
                    const isEnabled = panel.enabled !== false;

                    if (isEnabled) {
                        enabledPanels[panelId] = panel;
                    }
                }
            });

            // 自定义面板
            if (configs.customPanels) {
                Object.entries(configs.customPanels).forEach(([panelId, panelConfig]) => {
                    if (panelConfig && panelConfig.enabled) {
                        enabledPanels[panelId] = panelConfig;
                    }
                });
            }

            return enabledPanels;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取启用面板失败:', error);
            return {};
        }
    }

    /**
     * 生成面板列表HTML
     */
    generatePanelListHtml(enabledPanels) {
        try {
            const panelItems = [];
            let isFirst = true;

            for (const [panelId, panelConfig] of Object.entries(enabledPanels)) {
                // 获取面板显示信息
                const panelInfo = this.getPanelDisplayInfo(panelId, panelConfig);

                panelItems.push(`
                    <div class="panel-nav-item ${isFirst ? 'active' : ''}" data-panel="${panelId}">
                        <span class="panel-name">${panelInfo.name}</span>
                        <button class="add-panel-btn" title="添加面板">➕</button>
                    </div>
                `);

                isFirst = false;
            }

            return panelItems.join('');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成面板列表HTML失败:', error);
            return '';
        }
    }

    /**
     * 生成子项列表HTML
     */
    generateSubitemListHtml(panelId, panelConfig) {
        try {
            const panelInfo = this.getPanelDisplayInfo(panelId, panelConfig);
            const subItems = this.getEnabledSubItems(panelId, panelConfig);

            const subItemsHtml = subItems.map(subItem => `
                <div class="subitem-item" data-field="${subItem.key}">
                    <span class="subitem-label">${subItem.displayName}</span>
                    <button class="add-subitem-btn" title="添加子项">➕</button>
                </div>
            `).join('');

            return `
                <h4>🔧 ${panelInfo.name} - 启用的子项 (${subItems.length})</h4>
                <div class="subitem-content">
                    ${subItemsHtml || '<div class="no-subitems">该面板没有启用的子项</div>'}
                </div>
            `;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成子项列表HTML失败:', error);
            return '<h4>错误：无法加载子项</h4><div class="subitem-content"></div>';
        }
    }

    /**
     * 获取面板显示信息（图标和名称）
     */
    getPanelDisplayInfo(panelId, panelConfig) {
        // 基础面板的默认配置
        const basicPanelInfo = {
            personal: { icon: '👤', name: '个人信息' },
            world: { icon: '🌍', name: '世界信息' },
            interaction: { icon: '🤝', name: '交互对象' },
            tasks: { icon: '📋', name: '任务信息' },
            organization: { icon: '🏢', name: '组织信息' },
            news: { icon: '📰', name: '新闻事件' },
            inventory: { icon: '🎒', name: '背包物品' },
            abilities: { icon: '⚡', name: '能力技能' },
            plot: { icon: '📖', name: '剧情信息' },
            cultivation: { icon: '🧘', name: '修炼信息' },
            fantasy: { icon: '🐉', name: '奇幻设定' },
            modern: { icon: '🏙️', name: '现代设定' },
            historical: { icon: '🏛️', name: '历史设定' },
            magic: { icon: '🔮', name: '魔法系统' },
            training: { icon: '🎯', name: '训练信息' }
        };

        // 如果是基础面板，使用预设信息
        if (basicPanelInfo[panelId]) {
            return basicPanelInfo[panelId];
        }

        // 自定义面板使用配置中的信息
        return {
            icon: panelConfig.icon || '📄',
            name: panelConfig.name || panelId
        };
    }

    /**
     * 获取面板的启用子项
     */
    getEnabledSubItems(panelId, panelConfig) {
        try {
            const subItems = [];

            // 判断是否为基础面板
            const basicPanelIds = [
                'personal', 'world', 'interaction', 'tasks', 'organization',
                'news', 'inventory', 'abilities', 'plot', 'cultivation',
                'fantasy', 'modern', 'historical', 'magic', 'training'
            ];

            if (basicPanelIds.includes(panelId)) {
                // 基础面板：处理基础设置中的复选框配置（panel[key].enabled格式）
                const subItemKeys = Object.keys(panelConfig).filter(key =>
                    key !== 'enabled' &&
                    key !== 'subItems' &&     // 排除自定义子项数组
                    key !== 'description' &&  // 排除面板属性
                    key !== 'icon' &&
                    key !== 'required' &&
                    key !== 'memoryInject' &&
                    key !== 'prompts' &&
                    typeof panelConfig[key] === 'object' &&
                    panelConfig[key].enabled !== undefined
                );

                const enabledSubItems = subItemKeys.filter(key => panelConfig[key].enabled === true);

                // 添加基础设置的子项
                enabledSubItems.forEach(key => {
                    subItems.push({
                        key: key,
                        displayName: panelConfig[key].name || this.getBasicSubItemDisplayName(panelId, key),
                        source: 'basicSettings'
                    });
                });

                // 处理基础面板的自定义子项（从面板管理添加的）
                if (panelConfig.subItems && Array.isArray(panelConfig.subItems)) {
                    panelConfig.subItems.forEach(subItem => {
                        if (subItem.enabled !== false) {
                            subItems.push({
                                key: subItem.key,
                                displayName: subItem.displayName || subItem.name,
                                source: 'panelManagement'
                            });
                        }
                    });
                }
            } else {
                // 自定义面板：处理自定义面板的子项
                if (panelConfig.subItems && Array.isArray(panelConfig.subItems)) {
                    panelConfig.subItems.forEach(subItem => {
                        if (subItem.enabled !== false) {
                            subItems.push({
                                key: subItem.key,
                                displayName: subItem.displayName || subItem.name || subItem.key,
                                source: 'customPanel'
                            });
                        }
                    });
                }
            }

            console.log(`[InfoBarSettings] 📊 面板 ${panelId}: ${subItems.length} 个启用的子项`, subItems.map(s => `${s.displayName}(${s.source})`));
            return subItems;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取启用子项失败:', error);
            return [];
        }
    }

    /**
     * 获取基础子项显示名称 - 与数据表格完全一致的完整映射
     */
    getBasicSubItemDisplayName(panelId, key) {
        // 与DataTable.js完全一致的完整中文映射表
        return this.getDataTableDisplayName(panelId, key);
    }

    /**
     * 获取数据表格显示名称 - 完整的中文映射实现
     */
    getDataTableDisplayName(panelType, key) {
        const displayNames = this.getCompleteDisplayNameMapping();
        return displayNames[panelType]?.[key] || key;
    }

    /**
     * 预加载完整的显示名称映射表 - 🔧 新增：避免运行时重复生成
     */
    preloadCompleteDisplayNameMapping() {
        try {
            console.log('[InfoBarSettings] 🔧 预加载字段映射缓存...');
            this.getCompleteDisplayNameMapping();
            console.log('[InfoBarSettings] ✅ 字段映射缓存预加载完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 预加载字段映射缓存失败:', error);
        }
    }

    /**
     * 获取完整的显示名称映射表 - 🔧 修复：同时支持英文和中文字段名映射
     */
    getCompleteDisplayNameMapping() {
        // 🔧 新增：缓存机制，避免重复生成映射
        if (this._cachedCompleteMapping) {
            return this._cachedCompleteMapping;
        }

        // 基础面板映射
        const baseMapping = {
            personal: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'name': '姓名', 'age': '年龄', 'gender': '性别', 'occupation': '职业',
                'height': '身高', 'weight': '体重', 'bloodType': '血型', 'zodiac': '星座',
                'birthday': '生日', 'birthplace': '出生地', 'nationality': '国籍', 'ethnicity': '民族',
                'hairColor': '发色', 'hairStyle': '发型', 'eyeColor': '眼色', 'skinColor': '肤色',
                'bodyType': '体型', 'facialFeatures': '面部特征', 'scars': '疤痕', 'tattoos': '纹身',
                'accessories': '配饰', 'clothingStyle': '穿着风格', 'appearance': '外貌', 'voice': '声音',
                'personality': '性格', 'temperament': '性情', 'attitude': '态度', 'values': '价值观',
                'beliefs': '信念', 'fears': '恐惧', 'dreams': '梦想', 'goals': '人生目标',
                'intelligence': '智力', 'strength': '力量', 'charisma': '魅力', 'luck': '运气',
                'perception': '感知', 'willpower': '意志力', 'reactionSpeed': '反应速度', 'learningAbility': '学习能力',
                'familyBackground': '家庭背景', 'education': '教育经历', 'workExperience': '工作经历', 'income': '收入',
                'socialStatus': '社会地位', 'relationships': '人际关系', 'loveStatus': '恋爱状态', 'maritalStatus': '婚姻状态',
                'hobbies': '爱好', 'sports': '运动', 'music': '音乐', 'art': '艺术',
                'reading': '阅读', 'gaming': '游戏', 'travel': '旅行', 'cooking': '烹饪',
                'skills': '技能特长', 'languages': '语言能力', 'habits': '生活习惯', 'healthStatus': '健康状态',

                // 🔧 完整的中文字段名映射 (保持不变)
                '姓名': '姓名', '年龄': '年龄', '性别': '性别', '职业': '职业',
                '身高': '身高', '体重': '体重', '血型': '血型', '星座': '星座',
                '生日': '生日', '出生地': '出生地', '国籍': '国籍', '民族': '民族',
                '发色': '发色', '发型': '发型', '眼色': '眼色', '肤色': '肤色',
                '体型': '体型', '面部特征': '面部特征', '疤痕': '疤痕', '纹身': '纹身',
                '配饰': '配饰', '穿着风格': '穿着风格', '外貌': '外貌', '声音': '声音',
                '性格': '性格', '性情': '性情', '态度': '态度', '价值观': '价值观',
                '信念': '信念', '恐惧': '恐惧', '梦想': '梦想', '人生目标': '人生目标',
                '智力': '智力', '力量': '力量', '魅力': '魅力', '运气': '运气',
                '感知': '感知', '意志力': '意志力', '反应速度': '反应速度', '学习能力': '学习能力',
                '家庭背景': '家庭背景', '教育经历': '教育经历', '工作经历': '工作经历', '收入': '收入',
                '社会地位': '社会地位', '人际关系': '人际关系', '恋爱状态': '恋爱状态', '婚姻状态': '婚姻状态',
                '爱好': '爱好', '运动': '运动', '音乐': '音乐', '艺术': '艺术',
                '阅读': '阅读', '游戏': '游戏', '旅行': '旅行', '烹饪': '烹饪',
                '技能特长': '技能特长', '语言能力': '语言能力', '生活习惯': '生活习惯', '健康状态': '健康状态',
                '种族': '种族', '职业类别': '职业类别'
            },
            world: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'name': '世界名称', 'type': '世界类型', 'genre': '世界风格', 'theme': '世界主题',
                'history': '世界历史', 'mythology': '神话传说', 'lore': '世界设定',
                'geography': '地理环境', 'climate': '气候条件', 'terrain': '地形地貌', 'biomes': '生物群落',
                'locations': '重要地点', 'landmarks': '地标建筑', 'cities': '城市设定', 'dungeons': '地下城',
                'time': '时间设定', 'calendar': '历法系统', 'seasons': '季节变化', 'dayNight': '昼夜循环',
                'weather': '天气系统', 'events': '世界事件', 'festivals': '节日庆典', 'disasters': '自然灾害',
                'cultures': '文化设定', 'languages': '语言系统', 'religions': '宗教信仰', 'customs': '风俗习惯',
                'politics': '政治体系', 'economy': '经济系统', 'technology': '科技水平', 'magic': '魔法系统',
                'races': '种族设定', 'creatures': '生物设定', 'monsters': '怪物设定', 'npcs': 'NPC设定',
                'factions': '势力组织', 'conflicts': '冲突矛盾', 'alliances': '联盟关系', 'wars': '战争历史',
                'resources': '资源分布', 'materials': '材料设定', 'artifacts': '神器文物', 'currency': '货币系统',
                'trade': '贸易体系', 'markets': '市场设定', 'guilds': '公会组织', 'transportation': '交通运输',

                // 🔧 完整的中文字段名映射 (保持不变)
                '世界名称': '世界名称', '世界类型': '世界类型', '世界风格': '世界风格', '世界主题': '世界主题',
                '世界描述': '世界描述', '世界历史': '世界历史', '神话传说': '神话传说', '世界设定': '世界设定',
                '地理环境': '地理环境', '气候条件': '气候条件', '地形地貌': '地形地貌', '生物群落': '生物群落',
                '重要地点': '重要地点', '地标建筑': '地标建筑', '城市设定': '城市设定', '地下城': '地下城',
                '时间设定': '时间设定', '历法系统': '历法系统', '季节变化': '季节变化', '昼夜循环': '昼夜循环',
                '天气系统': '天气系统', '世界事件': '世界事件', '节日庆典': '节日庆典', '自然灾害': '自然灾害',
                '文化设定': '文化设定', '语言系统': '语言系统', '宗教信仰': '宗教信仰', '风俗习惯': '风俗习惯',
                '政治体系': '政治体系', '经济系统': '经济系统', '科技水平': '科技水平', '魔法系统': '魔法系统',
                '种族设定': '种族设定', '生物设定': '生物设定', '怪物设定': '怪物设定', 'NPC设定': 'NPC设定',
                '势力组织': '势力组织', '冲突矛盾': '冲突矛盾', '联盟关系': '联盟关系', '战争历史': '战争历史',
                '资源分布': '资源分布', '材料设定': '材料设定', '神器文物': '神器文物', '货币系统': '货币系统',
                '贸易体系': '贸易体系', '市场设定': '市场设定', '公会组织': '公会组织', '交通运输': '交通运输',
                '位置': '位置', '环境': '环境', '氛围': '氛围', '季节': '季节',
                '文化': '文化'
            },
            interaction: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'name': '对象名称', 'type': '对象类型', 'status': '当前状态', 'location': '所在位置',
                'mood': '情绪状态', 'activity': '当前活动', 'availability': '可用性', 'priority': '优先级',
                'relationship': '关系类型', 'intimacy': '亲密度', 'trust': '信任度', 'friendship': '友谊度',
                'romance': '浪漫度', 'respect': '尊重度', 'dependency': '依赖度', 'conflict': '冲突度',
                'history': '历史记录', 'frequency': '互动频率', 'duration': '互动时长', 'quality': '互动质量',
                'topics': '话题偏好', 'emotions': '情感状态', 'milestones': '重要节点', 'memories': '共同回忆',
                'autoRecord': '自动记录', 'notifications': '通知设置', 'analysis': '关系分析', 'suggestions': '建议提示',
                'network': '社交网络', 'groups': '群体关系', 'influence': '影响力', 'reputation': '声誉度',
                'alliances': '联盟关系', 'rivalries': '竞争关系', 'mentorship': '师徒关系', 'hierarchy': '等级关系',
                'communicationStyle': '沟通风格', 'preferredTopics': '偏好话题', 'avoidedTopics': '回避话题', 'boundaries': '边界设定',
                'comfortLevel': '舒适度', 'energyLevel': '活跃度', 'responseTime': '响应时间', 'engagement': '参与度',
                'specialEvents': '特殊事件', 'achievements': '成就记录', 'challenges': '挑战任务', 'growth': '成长轨迹',

                // 🔧 完整的中文字段名映射 (保持不变)
                '对象名称': '对象名称', '对象类型': '对象类型', '当前状态': '当前状态', '所在位置': '所在位置',
                '情绪状态': '情绪状态', '当前活动': '当前活动', '可用性': '可用性', '优先级': '优先级',
                '关系类型': '关系类型', '亲密度': '亲密度', '信任度': '信任度', '友谊度': '友谊度',
                '浪漫度': '浪漫度', '尊重度': '尊重度', '依赖度': '依赖度', '冲突度': '冲突度',
                '历史记录': '历史记录', '互动频率': '互动频率', '互动时长': '互动时长', '互动质量': '互动质量',
                '话题偏好': '话题偏好', '情感状态': '情感状态', '重要节点': '重要节点', '共同回忆': '共同回忆',
                '自动记录': '自动记录', '通知设置': '通知设置', '关系分析': '关系分析', '建议提示': '建议提示',
                '社交网络': '社交网络', '群体关系': '群体关系', '影响力': '影响力', '声誉度': '声誉度',
                '联盟关系': '联盟关系', '竞争关系': '竞争关系', '师徒关系': '师徒关系', '等级关系': '等级关系',
                '沟通风格': '沟通风格', '偏好话题': '偏好话题', '回避话题': '回避话题', '边界设定': '边界设定',
                '舒适度': '舒适度', '活跃度': '活跃度', '响应时间': '响应时间', '参与度': '参与度',
                '特殊事件': '特殊事件', '成就记录': '成就记录', '挑战任务': '挑战任务', '成长轨迹': '成长轨迹',
                'NPC姓名': 'NPC姓名', 'NPC性格': 'NPC性格', 'NPC状态': 'NPC状态',
                '态度': '态度', '对话主题': '对话主题', '交互历史': '交互历史',
                '好感度': '好感度', '社交背景': '社交背景'
            },
            tasks: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'creation': '任务创建', 'editing': '任务编辑', 'deletion': '任务删除', 'completion': '任务完成',
                'priority': '优先级', 'deadline': '截止日期', 'progress': '进度跟踪', 'status': '状态管理',
                'categories': '分类管理', 'tags': '标签系统', 'projects': '项目管理', 'milestones': '里程碑',
                'subtasks': '子任务', 'dependencies': '依赖关系', 'templates': '任务模板', 'recurring': '重复任务',
                'notifications': '通知提醒', 'reminders': '提醒设置', 'alerts': '警报通知', 'dailySummary': '每日总结',
                'weeklyReview': '周报回顾', 'achievementBadges': '成就徽章', 'productivityStats': '生产力统计', 'timeTracking': '时间跟踪',
                'assignment': '任务分配', 'collaboration': '协作功能', 'comments': '评论系统', 'attachments': '附件管理',
                'sharing': '共享功能', 'permissions': '权限管理', 'approval': '审批流程', 'delegation': '任务委派',
                'listView': '列表视图', 'kanbanView': '看板视图', 'calendarView': '日历视图', 'ganttView': '甘特图',
                'sorting': '排序功能', 'filtering': '筛选功能', 'search': '搜索功能', 'grouping': '分组功能',
                'backup': '备份功能', 'export': '导出功能', 'import': '导入功能', 'sync': '同步功能',
                'archive': '归档管理', 'history': '历史记录', 'versioning': '版本控制', 'recovery': '恢复功能',

                // 🔧 完整的中文字段名映射 (保持不变)
                '任务创建': '任务创建', '任务编辑': '任务编辑', '任务删除': '任务删除', '任务完成': '任务完成',
                '优先级': '优先级', '截止日期': '截止日期', '进度跟踪': '进度跟踪', '状态管理': '状态管理',
                '分类管理': '分类管理', '标签系统': '标签系统', '项目管理': '项目管理', '里程碑': '里程碑',
                '子任务': '子任务', '依赖关系': '依赖关系', '任务模板': '任务模板', '重复任务': '重复任务',
                '通知提醒': '通知提醒', '提醒设置': '提醒设置', '警报通知': '警报通知', '每日总结': '每日总结',
                '周报回顾': '周报回顾', '成就徽章': '成就徽章', '生产力统计': '生产力统计', '时间跟踪': '时间跟踪',
                '任务分配': '任务分配', '协作功能': '协作功能', '评论系统': '评论系统', '附件管理': '附件管理',
                '共享功能': '共享功能', '权限管理': '权限管理', '审批流程': '审批流程', '任务委派': '任务委派',
                '列表视图': '列表视图', '看板视图': '看板视图', '日历视图': '日历视图', '甘特图': '甘特图',
                '排序功能': '排序功能', '筛选功能': '筛选功能', '搜索功能': '搜索功能', '分组功能': '分组功能',
                '备份功能': '备份功能', '导出功能': '导出功能', '导入功能': '导入功能', '同步功能': '同步功能',
                '归档管理': '归档管理', '历史记录': '历史记录', '版本控制': '版本控制', '恢复功能': '恢复功能'
            },
            organization: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'name': '组织名称', 'type': '组织类型', 'purpose': '组织描述', 'history': '组织历史',
                'founding': '成立背景', 'motto': '组织格言', 'values': '核心价值',
                'hierarchy': '层级结构', 'departments': '部门设置', 'leadership': '领导层', 'council': '理事会',
                'positions': '职位设置', 'ranks': '等级制度', 'promotion': '晋升机制', 'authority': '权限分配',
                'members': '成员管理', 'recruitment': '招募制度', 'training': '培训体系', 'evaluation': '考核评估',
                'rewards': '奖励机制', 'punishment': '惩罚制度', 'benefits': '福利待遇', 'retirement': '退休制度',
                'rules': '组织规则', 'code': '行为准则', 'ethics': '道德规范', 'discipline': '纪律制度',
                'procedures': '操作流程', 'protocols': '协议规范', 'standards': '标准制度', 'compliance': '合规管理',
                'allies': '盟友关系', 'enemies': '敌对关系', 'neutral': '中立关系', 'partnerships': '合作伙伴',
                'reputation': '组织声誉', 'influence': '影响力', 'diplomacy': '外交关系', 'treaties': '条约协议',
                'finances': '财务状况', 'assets': '资产管理', 'facilities': '设施设备', 'equipment': '装备器材',
                'technology': '技术资源', 'knowledge': '知识库', 'archives': '档案管理', 'secrets': '机密信息',

                // 🔧 完整的中文字段名映射 (保持不变)
                '组织名称': '组织名称', '组织类型': '组织类型', '组织描述': '组织描述', '组织目标': '组织目标',
                '组织历史': '组织历史', '成立背景': '成立背景', '组织格言': '组织格言', '核心价值': '核心价值',
                '层级结构': '层级结构', '部门设置': '部门设置', '领导层': '领导层', '理事会': '理事会',
                '职位设置': '职位设置', '等级制度': '等级制度', '晋升机制': '晋升机制', '权限分配': '权限分配',
                '成员管理': '成员管理', '招募制度': '招募制度', '培训体系': '培训体系', '考核评估': '考核评估',
                '奖励机制': '奖励机制', '惩罚制度': '惩罚制度', '福利待遇': '福利待遇', '退休制度': '退休制度',
                '组织规则': '组织规则', '行为准则': '行为准则', '道德规范': '道德规范', '纪律制度': '纪律制度',
                '操作流程': '操作流程', '协议规范': '协议规范', '标准制度': '标准制度', '合规管理': '合规管理',
                '盟友关系': '盟友关系', '敌对关系': '敌对关系', '中立关系': '中立关系', '合作伙伴': '合作伙伴',
                '组织声誉': '组织声誉', '影响力': '影响力', '外交关系': '外交关系', '条约协议': '条约协议',
                '财务状况': '财务状况', '资产管理': '资产管理', '设施设备': '设施设备', '装备器材': '装备器材',
                '技术资源': '技术资源', '知识库': '知识库', '档案管理': '档案管理', '机密信息': '机密信息'
            },
            news: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'breaking': '突发新闻', 'politics': '政治新闻', 'economy': '经济新闻', 'social': '社会新闻',
                'military': '军事新闻', 'technology': '科技新闻', 'culture': '文化新闻', 'sports': '体育新闻',
                'official': '官方公告', 'media': '媒体报道', 'rumors': '传言消息', 'insider': '内幕消息',
                'witness': '目击报告', 'intelligence': '情报信息', 'leaked': '泄露消息', 'anonymous': '匿名爆料',
                'creation': '新闻创建', 'editing': '新闻编辑', 'review': '新闻审核', 'publishing': '新闻发布',
                'archiving': '新闻归档', 'deletion': '新闻删除', 'backup': '备份管理', 'versioning': '版本控制',
                'broadcast': '广播发布', 'newsletter': '新闻简报', 'alerts': '新闻警报', 'digest': '新闻摘要',
                'socialMedia': '社交媒体', 'forums': '论坛讨论', 'messaging': '消息推送', 'email': '邮件通知',
                'comments': '评论系统', 'likes': '点赞功能', 'sharing': '分享功能', 'bookmarks': '收藏功能',
                'ratings': '评分系统', 'polls': '投票调查', 'discussions': '讨论区', 'feedback': '反馈系统',
                'analytics': '数据分析', 'metrics': '指标统计', 'trends': '趋势分析', 'reports': '报告生成',
                'monitoring': '监控系统', 'alertsSystem': '警报系统', 'automation': '自动化', 'aiAnalysis': 'AI分析',

                // 🔧 完整的中文字段名映射 (保持不变)
                '突发新闻': '突发新闻', '政治新闻': '政治新闻', '经济新闻': '经济新闻', '社会新闻': '社会新闻',
                '军事新闻': '军事新闻', '科技新闻': '科技新闻', '文化新闻': '文化新闻', '体育新闻': '体育新闻',
                '官方公告': '官方公告', '媒体报道': '媒体报道', '传言消息': '传言消息', '内幕消息': '内幕消息',
                '目击报告': '目击报告', '情报信息': '情报信息', '泄露消息': '泄露消息', '匿名爆料': '匿名爆料',
                '新闻创建': '新闻创建', '新闻编辑': '新闻编辑', '新闻审核': '新闻审核', '新闻发布': '新闻发布',
                '新闻归档': '新闻归档', '新闻删除': '新闻删除', '备份管理': '备份管理', '版本控制': '版本控制',
                '广播发布': '广播发布', '新闻简报': '新闻简报', '新闻警报': '新闻警报', '新闻摘要': '新闻摘要',
                '社交媒体': '社交媒体', '论坛讨论': '论坛讨论', '消息推送': '消息推送', '邮件通知': '邮件通知',
                '评论系统': '评论系统', '点赞功能': '点赞功能', '分享功能': '分享功能', '收藏功能': '收藏功能',
                '评分系统': '评分系统', '投票调查': '投票调查', '讨论区': '讨论区', '反馈系统': '反馈系统',
                '数据分析': '数据分析', '指标统计': '指标统计', '趋势分析': '趋势分析', '报告生成': '报告生成',
                '监控系统': '监控系统', '警报系统': '警报系统', '自动化': '自动化', 'AI分析': 'AI分析',
                '事件': '事件'
            },
            inventory: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'storage': '物品存储', 'retrieval': '物品取出', 'organization': '物品整理', 'search': '物品搜索',
                'sorting': '排序功能', 'filtering': '筛选功能', 'categories': '分类管理', 'tags': '标签系统',
                'weapons': '武器装备', 'armor': '防具装备', 'accessories': '饰品配件', 'consumables': '消耗品',
                'materials': '材料物品', 'tools': '工具器械', 'books': '书籍文献', 'treasures': '珍宝收藏',
                'capacity': '容量管理', 'weight': '重量限制', 'stacking': '堆叠功能', 'expansion': '扩容升级',
                'compartments': '分隔管理', 'protection': '保护功能', 'durability': '耐久度', 'repair': '修理维护',
                'trading': '交易功能', 'selling': '出售功能', 'buying': '购买功能', 'auction': '拍卖系统',
                'gifting': '赠送功能', 'lending': '借用功能', 'sharing': '共享功能', 'banking': '银行存储',
                'crafting': '制作功能', 'recipes': '配方管理', 'enhancement': '强化功能', 'enchanting': '附魔功能',
                'upgrading': '升级功能', 'combining': '合成功能', 'dismantling': '拆解功能', 'recycling': '回收功能',
                'automation': '自动化', 'aiSorting': 'AI整理', 'recommendations': '推荐系统', 'analytics': '数据分析',
                'backup': '备份功能', 'sync': '同步功能', 'security': '安全保护', 'history': '历史记录',

                // 🔧 完整的中文字段名映射 (保持不变)
                '物品存储': '物品存储', '物品取出': '物品取出', '物品整理': '物品整理', '物品搜索': '物品搜索',
                '排序功能': '排序功能', '筛选功能': '筛选功能', '分类管理': '分类管理', '标签系统': '标签系统',
                '武器装备': '武器装备', '防具装备': '防具装备', '饰品配件': '饰品配件', '消耗品': '消耗品',
                '材料物品': '材料物品', '工具器械': '工具器械', '书籍文献': '书籍文献', '珍宝收藏': '珍宝收藏',
                '容量管理': '容量管理', '重量限制': '重量限制', '堆叠功能': '堆叠功能', '扩容升级': '扩容升级',
                '分隔管理': '分隔管理', '保护功能': '保护功能', '耐久度': '耐久度', '修理维护': '修理维护',
                '交易功能': '交易功能', '出售功能': '出售功能', '购买功能': '购买功能', '拍卖系统': '拍卖系统',
                '赠送功能': '赠送功能', '借用功能': '借用功能', '共享功能': '共享功能', '银行存储': '银行存储',
                '制作功能': '制作功能', '配方管理': '配方管理', '强化功能': '强化功能', '附魔功能': '附魔功能',
                '升级功能': '升级功能', '合成功能': '合成功能', '拆解功能': '拆解功能', '回收功能': '回收功能',
                '自动化': '自动化', 'AI整理': 'AI整理', '推荐系统': '推荐系统', '数据分析': '数据分析',
                '备份功能': '备份功能', '同步功能': '同步功能', '安全保护': '安全保护', '历史记录': '历史记录',
                '金币': '金币', '武器': '武器', '护甲': '护甲', '道具': '道具'
            },
            abilities: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'strength': '力量属性', 'agility': '敏捷属性', 'intelligence': '智力属性', 'constitution': '体质属性',
                'wisdom': '智慧属性', 'charisma': '魅力属性', 'luck': '幸运属性', 'perception': '感知属性',
                'swordsmanship': '剑术技能', 'archery': '射箭技能', 'magic': '魔法技能', 'defense': '防御技能',
                'martialArts': '武术技能', 'stealth': '潜行技能', 'tactics': '战术技能', 'healing': '治疗技能',
                'crafting': '制作技能', 'cooking': '烹饪技能', 'farming': '农业技能', 'mining': '采矿技能',
                'fishing': '钓鱼技能', 'hunting': '狩猎技能', 'trading': '贸易技能', 'negotiation': '谈判技能',
                'research': '研究技能', 'investigation': '调查技能', 'languages': '语言技能', 'history': '历史知识',
                'medicine': '医学知识', 'alchemy': '炼金术', 'engineering': '工程学', 'astronomy': '天文学',
                'persuasion': '说服技能', 'deception': '欺骗技能', 'intimidation': '威吓技能', 'performance': '表演技能',
                'leadership': '领导能力', 'empathy': '共情能力', 'insight': '洞察能力', 'networking': '社交能力',
                'telepathy': '心灵感应', 'telekinesis': '念动力', 'precognition': '预知能力', 'shapeshifting': '变形能力',
                'invisibility': '隐身能力', 'flight': '飞行能力', 'regeneration': '再生能力', 'immortality': '不朽能力',

                // 🔧 完整的中文字段名映射 (保持不变)
                '力量属性': '力量属性', '敏捷属性': '敏捷属性', '智力属性': '智力属性', '体质属性': '体质属性',
                '智慧属性': '智慧属性', '魅力属性': '魅力属性', '幸运属性': '幸运属性', '感知属性': '感知属性',
                '剑术技能': '剑术技能', '射箭技能': '射箭技能', '魔法技能': '魔法技能', '防御技能': '防御技能',
                '武术技能': '武术技能', '潜行技能': '潜行技能', '战术技能': '战术技能', '治疗技能': '治疗技能',
                '制作技能': '制作技能', '烹饪技能': '烹饪技能', '农业技能': '农业技能', '采矿技能': '采矿技能',
                '钓鱼技能': '钓鱼技能', '狩猎技能': '狩猎技能', '贸易技能': '贸易技能', '谈判技能': '谈判技能',
                '研究技能': '研究技能', '调查技能': '调查技能', '语言技能': '语言技能', '历史知识': '历史知识',
                '医学知识': '医学知识', '炼金术': '炼金术', '工程学': '工程学', '天文学': '天文学',
                '说服技能': '说服技能', '欺骗技能': '欺骗技能', '威吓技能': '威吓技能', '表演技能': '表演技能',
                '领导能力': '领导能力', '共情能力': '共情能力', '洞察能力': '洞察能力', '社交能力': '社交能力',
                '心灵感应': '心灵感应', '念动力': '念动力', '预知能力': '预知能力', '变形能力': '变形能力',
                '隐身能力': '隐身能力', '飞行能力': '飞行能力', '再生能力': '再生能力', '不朽能力': '不朽能力'
            },
            plot: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'mainStory': '主线剧情', 'sideQuests': '支线任务', 'subplots': '子剧情', 'backstory': '背景故事',
                'prologue': '序章', 'epilogue': '尾声', 'flashbacks': '回忆片段', 'foreshadowing': '伏笔铺垫',
                'exposition': '背景说明', 'risingAction': '情节发展', 'climax': '高潮部分', 'fallingAction': '情节回落',
                'resolution': '问题解决', 'denouement': '结局收尾', 'cliffhanger': '悬念结尾', 'twist': '剧情转折',
                'characterArc': '角色成长', 'relationships': '人物关系', 'motivations': '动机驱动', 'conflicts': '冲突矛盾',
                'internalConflicts': '内心冲突', 'externalConflicts': '外部冲突', 'moralDilemmas': '道德困境', 'sacrifices': '牺牲选择',
                'dialogue': '对话系统', 'narration': '叙述描写', 'monologue': '独白表达', 'symbolism': '象征意义',
                'themes': '主题思想', 'mood': '情绪氛围', 'tone': '语调风格', 'pacing': '节奏控制',
                'choices': '选择分支', 'consequences': '后果影响', 'branching': '分支剧情', 'multipleEndings': '多重结局',
                'playerAgency': '玩家主导', 'emergentNarrative': '涌现叙事', 'proceduralGeneration': '程序生成', 'adaptiveStorytelling': '自适应叙事',
                'timeline': '时间线', 'notes': '剧情笔记', 'bookmarks': '书签标记', 'saveStates': '存档状态',
                'autoSave': '自动保存', 'export': '导出功能', 'import': '导入功能', 'analytics': '数据分析',

                // 🔧 完整的中文字段名映射 (保持不变)
                '主线剧情': '主线剧情', '支线任务': '支线任务', '子剧情': '子剧情', '背景故事': '背景故事',
                '序章': '序章', '尾声': '尾声', '回忆片段': '回忆片段', '伏笔铺垫': '伏笔铺垫',
                '背景说明': '背景说明', '情节发展': '情节发展', '高潮部分': '高潮部分', '情节回落': '情节回落',
                '问题解决': '问题解决', '结局收尾': '结局收尾', '悬念结尾': '悬念结尾', '剧情转折': '剧情转折',
                '角色成长': '角色成长', '人物关系': '人物关系', '动机驱动': '动机驱动', '冲突矛盾': '冲突矛盾',
                '内心冲突': '内心冲突', '外部冲突': '外部冲突', '道德困境': '道德困境', '牺牲选择': '牺牲选择',
                '对话系统': '对话系统', '叙述描写': '叙述描写', '独白表达': '独白表达', '象征意义': '象征意义',
                '主题思想': '主题思想', '情绪氛围': '情绪氛围', '语调风格': '语调风格', '节奏控制': '节奏控制',
                '选择分支': '选择分支', '后果影响': '后果影响', '分支剧情': '分支剧情', '多重结局': '多重结局',
                '玩家主导': '玩家主导', '涌现叙事': '涌现叙事', '程序生成': '程序生成', '自适应叙事': '自适应叙事',
                '时间线': '时间线', '剧情笔记': '剧情笔记', '书签标记': '书签标记', '存档状态': '存档状态',
                '自动保存': '自动保存', '导出功能': '导出功能', '导入功能': '导入功能', '数据分析': '数据分析'
            },
            cultivation: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'qiRefining': '炼气期', 'foundation': '筑基期', 'goldenCore': '金丹期', 'nascentSoul': '元婴期',
                'soulTransformation': '化神期', 'voidRefinement': '炼虚期', 'bodyIntegration': '合体期', 'mahayana': '大乘期',
                'tribulation': '渡劫期', 'immortal': '真仙', 'trueImmortal': '天仙', 'goldenImmortal': '金仙',
                'breathingTechnique': '呼吸法', 'bodyRefining': '炼体术', 'soulCultivation': '神魂修炼', 'dualCultivation': '双修功法',
                'swordCultivation': '剑修之道', 'alchemy': '炼丹术', 'formation': '阵法', 'talisman': '符箓',
                'spiritualPower': '灵力值', 'spiritualRoot': '灵根', 'meridians': '经脉', 'dantian': '丹田',
                'divineSense': '神识', 'lifeSpan': '寿命', 'karma': '因果', 'heavenlyDao': '天道',
                'flyingSword': '飞剑', 'magicTreasure': '法宝', 'spiritualArmor': '灵甲', 'storageRing': '储物戒',
                'spiritBeast': '灵兽', 'puppet': '傀儡', 'avatar': '化身', 'clone': '分身',
                'spiritStone': '灵石', 'spiritHerb': '灵草', 'pill': '丹药', 'spiritVein': '灵脉',
                'caveMansion': '洞府', 'secretRealm': '秘境', 'inheritance': '传承', 'opportunity': '机缘',
                'meditation': '打坐', 'tribulationCrossing': '渡劫', 'enlightenment': '顿悟', 'breakthrough': '突破',
                'sect': '宗门', 'masterDisciple': '师徒', 'daoCompanion': '道侣', 'immortalAscension': '飞升',

                // 🔧 完整的中文字段名映射 (保持不变)
                '炼气期': '炼气期', '筑基期': '筑基期', '金丹期': '金丹期', '元婴期': '元婴期',
                '化神期': '化神期', '炼虚期': '炼虚期', '合体期': '合体期', '大乘期': '大乘期',
                '渡劫期': '渡劫期', '真仙': '真仙', '天仙': '天仙', '金仙': '金仙',
                '呼吸法': '呼吸法', '炼体术': '炼体术', '神魂修炼': '神魂修炼', '双修功法': '双修功法',
                '剑修之道': '剑修之道', '炼丹术': '炼丹术', '阵法': '阵法', '符箓': '符箓',
                '灵力值': '灵力值', '灵根': '灵根', '经脉': '经脉', '丹田': '丹田',
                '神识': '神识', '寿命': '寿命', '因果': '因果', '天道': '天道',
                '飞剑': '飞剑', '法宝': '法宝', '灵甲': '灵甲', '储物戒': '储物戒',
                '灵兽': '灵兽', '傀儡': '傀儡', '化身': '化身', '分身': '分身',
                '灵石': '灵石', '灵草': '灵草', '丹药': '丹药', '灵脉': '灵脉',
                '洞府': '洞府', '秘境': '秘境', '传承': '传承', '机缘': '机缘',
                '打坐': '打坐', '渡劫': '渡劫', '顿悟': '顿悟', '突破': '突破',
                '宗门': '宗门', '师徒': '师徒', '道侣': '道侣', '飞升': '飞升'
            },
            fantasy: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'human': '人类种族', 'elf': '精灵种族', 'dwarf': '矮人种族', 'orc': '兽人种族',
                'dragon': '龙族', 'demon': '恶魔', 'angel': '天使', 'undead': '不死族',
                'halfling': '半身人', 'giant': '巨人族', 'fairy': '仙灵', 'vampire': '吸血鬼',
                'fireMagic': '火系魔法', 'waterMagic': '水系魔法', 'earthMagic': '土系魔法', 'airMagic': '风系魔法',
                'lightMagic': '光系魔法', 'darkMagic': '暗系魔法', 'natureMagic': '自然魔法', 'spaceMagic': '空间魔法',
                'timeMagic': '时间魔法', 'necromancy': '死灵法术', 'illusionMagic': '幻术魔法', 'enchantment': '附魔术',
                'warrior': '战士职业', 'mage': '法师职业', 'archer': '弓箭手', 'rogue': '盗贼职业',
                'priest': '牧师职业', 'paladin': '圣骑士', 'druid': '德鲁伊', 'warlock': '术士职业',
                'bard': '吟游诗人', 'monk': '武僧职业', 'ranger': '游侠职业', 'assassin': '刺客职业',
                'phoenix': '凤凰', 'unicorn': '独角兽', 'griffin': '狮鹫', 'pegasus': '飞马',
                'kraken': '海怪', 'chimera': '奇美拉', 'basilisk': '蛇怪', 'hydra': '九头蛇',
                'legendaryWeapon': '传说武器', 'magicArmor': '魔法护甲', 'artifact': '神器', 'relic': '圣物',
                'magicCrystal': '魔法水晶', 'enchantedItem': '附魔物品', 'potion': '魔法药水', 'scroll': '魔法卷轴',

                // 🔧 完整的中文字段名映射 (保持不变)
                '人类种族': '人类种族', '精灵种族': '精灵种族', '矮人种族': '矮人种族', '兽人种族': '兽人种族',
                '龙族': '龙族', '恶魔': '恶魔', '天使': '天使', '不死族': '不死族',
                '半身人': '半身人', '巨人族': '巨人族', '仙灵': '仙灵', '吸血鬼': '吸血鬼',
                '火系魔法': '火系魔法', '水系魔法': '水系魔法', '土系魔法': '土系魔法', '风系魔法': '风系魔法',
                '光系魔法': '光系魔法', '暗系魔法': '暗系魔法', '自然魔法': '自然魔法', '空间魔法': '空间魔法',
                '时间魔法': '时间魔法', '死灵法术': '死灵法术', '幻术魔法': '幻术魔法', '附魔术': '附魔术',
                '战士职业': '战士职业', '法师职业': '法师职业', '弓箭手': '弓箭手', '盗贼职业': '盗贼职业',
                '牧师职业': '牧师职业', '圣骑士': '圣骑士', '德鲁伊': '德鲁伊', '术士职业': '术士职业',
                '吟游诗人': '吟游诗人', '武僧职业': '武僧职业', '游侠职业': '游侠职业', '刺客职业': '刺客职业',
                '凤凰': '凤凰', '独角兽': '独角兽', '狮鹫': '狮鹫', '飞马': '飞马',
                '海怪': '海怪', '奇美拉': '奇美拉', '蛇怪': '蛇怪', '九头蛇': '九头蛇',
                '传说武器': '传说武器', '魔法护甲': '魔法护甲', '神器': '神器', '圣物': '圣物',
                '魔法水晶': '魔法水晶', '附魔物品': '附魔物品', '魔法药水': '魔法药水', '魔法卷轴': '魔法卷轴'
            },
            modern: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'city': '城市环境', 'district': '区域设定', 'housing': '住房情况', 'transport': '交通工具',
                'neighborhood': '社区环境', 'facilities': '设施配套', 'cost': '生活成本', 'safety': '安全状况',
                'pollution': '环境污染', 'job': '职业工作', 'company': '公司企业', 'position': '职位等级',
                'income': '收入水平', 'worktime': '工作时间', 'benefits': '福利待遇', 'career': '职业发展',
                'skills': '技能要求', 'education': '教育背景', 'smartphone': '智能手机', 'computer': '电脑设备',
                'internet': '网络连接', 'social': '社交媒体', 'gaming': '游戏娱乐', 'streaming': '流媒体',
                'shopping': '购物消费', 'payment': '支付方式', 'ai': '人工智能', 'health': '健康管理',
                'fitness': '健身运动', 'diet': '饮食习惯', 'sleep': '睡眠质量', 'medical': '医疗保健',
                'stress': '压力管理', 'mental': '心理健康', 'checkup': '体检检查', 'budget': '预算管理',
                'brands': '品牌偏好', 'fashion': '时尚潮流', 'luxury': '奢侈消费', 'investment': '投资理财',
                'saving': '储蓄计划', 'credit': '信用记录', 'insurance': '保险保障', 'movies': '电影娱乐',
                'music': '音乐欣赏', 'books': '阅读习惯', 'travel': '旅游出行', 'sports': '体育运动',
                'hobbies': '兴趣爱好', 'clubs': '俱乐部', 'events': '活动参与',

                // 🔧 完整的中文字段名映射 (保持不变)
                '城市环境': '城市环境', '区域设定': '区域设定', '住房情况': '住房情况', '交通工具': '交通工具',
                '社区环境': '社区环境', '设施配套': '设施配套', '生活成本': '生活成本', '安全状况': '安全状况',
                '环境污染': '环境污染', '职业工作': '职业工作', '公司企业': '公司企业', '职位等级': '职位等级',
                '收入水平': '收入水平', '工作时间': '工作时间', '福利待遇': '福利待遇', '职业发展': '职业发展',
                '技能要求': '技能要求', '教育背景': '教育背景', '智能手机': '智能手机', '电脑设备': '电脑设备',
                '网络连接': '网络连接', '社交媒体': '社交媒体', '游戏娱乐': '游戏娱乐', '流媒体': '流媒体',
                '购物消费': '购物消费', '支付方式': '支付方式', '人工智能': '人工智能', '健康管理': '健康管理',
                '健身运动': '健身运动', '饮食习惯': '饮食习惯', '睡眠质量': '睡眠质量', '医疗保健': '医疗保健',
                '压力管理': '压力管理', '心理健康': '心理健康', '体检检查': '体检检查', '预算管理': '预算管理',
                '品牌偏好': '品牌偏好', '时尚潮流': '时尚潮流', '奢侈消费': '奢侈消费', '投资理财': '投资理财',
                '储蓄计划': '储蓄计划', '信用记录': '信用记录', '保险保障': '保险保障', '电影娱乐': '电影娱乐',
                '音乐欣赏': '音乐欣赏', '阅读习惯': '阅读习惯', '旅游出行': '旅游出行', '体育运动': '体育运动',
                '兴趣爱好': '兴趣爱好', '俱乐部': '俱乐部', '活动参与': '活动参与'
            },
            historical: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'dynasty': '朝代背景', 'period': '历史时期', 'emperor': '皇帝君主', 'capital': '都城首府',
                'region': '地域分布', 'events': '历史事件', 'wars': '战争冲突', 'politics': '政治制度',
                'economy': '经济状况', 'class': '社会阶层', 'title': '爵位头衔', 'family': '家族背景',
                'wealth': '财富状况', 'land': '土地财产', 'servants': '仆从随从', 'influence': '影响力',
                'reputation': '名声声誉', 'connections': '人脉关系', 'education': '教育程度', 'poetry': '诗词文学',
                'calligraphy': '书法艺术', 'music': '音乐才艺', 'chess': '棋艺技巧', 'classics': '经典学问',
                'philosophy': '哲学思想', 'etiquette': '礼仪规范', 'language': '语言文字', 'martial': '武艺修为',
                'weapons': '兵器使用', 'archery': '射箭技艺', 'horsemanship': '骑术技能', 'strategy': '兵法谋略',
                'bodyguard': '护卫随从', 'hunting': '狩猎技能', 'survival': '生存技能', 'residence': '居住环境',
                'clothing': '服饰风格', 'food': '饮食习惯', 'transport': '出行方式', 'entertainment': '娱乐活动',
                'festivals': '节庆活动', 'religion': '宗教信仰', 'medicine': '医学知识', 'profession': '职业身份',
                'crafts': '手工技艺', 'trade': '商贸活动', 'farming': '农业生产', 'administration': '行政管理',
                'teaching': '教学传授', 'healing': '医疗救治', 'construction': '建筑营造',

                // 🔧 完整的中文字段名映射 (保持不变)
                '朝代背景': '朝代背景', '历史时期': '历史时期', '皇帝君主': '皇帝君主', '都城首府': '都城首府',
                '地域分布': '地域分布', '历史事件': '历史事件', '战争冲突': '战争冲突', '政治制度': '政治制度',
                '经济状况': '经济状况', '社会阶层': '社会阶层', '爵位头衔': '爵位头衔', '家族背景': '家族背景',
                '财富状况': '财富状况', '土地财产': '土地财产', '仆从随从': '仆从随从', '影响力': '影响力',
                '名声声誉': '名声声誉', '人脉关系': '人脉关系', '教育程度': '教育程度', '诗词文学': '诗词文学',
                '书法艺术': '书法艺术', '音乐才艺': '音乐才艺', '棋艺技巧': '棋艺技巧', '经典学问': '经典学问',
                '哲学思想': '哲学思想', '礼仪规范': '礼仪规范', '语言文字': '语言文字', '武艺修为': '武艺修为',
                '兵器使用': '兵器使用', '射箭技艺': '射箭技艺', '骑术技能': '骑术技能', '兵法谋略': '兵法谋略',
                '护卫随从': '护卫随从', '狩猎技能': '狩猎技能', '生存技能': '生存技能', '居住环境': '居住环境',
                '服饰风格': '服饰风格', '饮食习惯': '饮食习惯', '出行方式': '出行方式', '娱乐活动': '娱乐活动',
                '节庆活动': '节庆活动', '宗教信仰': '宗教信仰', '医学知识': '医学知识', '职业身份': '职业身份',
                '手工技艺': '手工技艺', '商贸活动': '商贸活动', '农业生产': '农业生产', '行政管理': '行政管理',
                '教学传授': '教学传授', '医疗救治': '医疗救治', '建筑营造': '建筑营造'
            },
            magic: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'evocation': '塑能系', 'illusion': '幻术系', 'enchantment': '惑控系', 'necromancy': '死灵系',
                'divination': '预言系', 'transmutation': '变化系', 'conjuration': '咒法系', 'abjuration': '防护系',
                'elemental': '元素法术', 'cantrip': '戏法法术', 'level1': '一环法术', 'level2': '二环法术',
                'level3': '三环法术', 'level4': '四环法术', 'level5': '五环法术', 'level6': '六环法术',
                'level7': '七环法术', 'level8': '八环法术', 'level9': '九环法术', 'level': '法术等级',
                'mana': '法力值', 'intelligence': '智力属性', 'wisdom': '感知属性', 'charisma': '魅力属性',
                'concentration': '专注能力', 'spellpower': '法术强度', 'resistance': '魔法抗性', 'regeneration': '法力回复',
                'spellbook': '法术书', 'known': '已知法术', 'prepared': '准备法术', 'slots': '法术位',
                'components': '施法材料', 'rituals': '仪式法术', 'metamagic': '超魔专长', 'scrolls': '法术卷轴',
                'fire': '火元素', 'water': '水元素', 'earth': '土元素', 'air': '风元素',
                'lightning': '雷电', 'ice': '冰霜', 'light': '光明', 'dark': '黑暗',
                'staff': '法杖', 'wand': '魔杖', 'orb': '法球', 'robe': '法袍',
                'amulet': '护符', 'ring': '魔法戒指', 'crystal': '魔法水晶', 'tome': '魔法典籍',

                // 🔧 完整的中文字段名映射 (保持不变)
                '塑能系': '塑能系', '幻术系': '幻术系', '惑控系': '惑控系', '死灵系': '死灵系',
                '预言系': '预言系', '变化系': '变化系', '咒法系': '咒法系', '防护系': '防护系',
                '元素法术': '元素法术', '戏法法术': '戏法法术', '一环法术': '一环法术', '二环法术': '二环法术',
                '三环法术': '三环法术', '四环法术': '四环法术', '五环法术': '五环法术', '六环法术': '六环法术',
                '七环法术': '七环法术', '八环法术': '八环法术', '九环法术': '九环法术', '法术等级': '法术等级',
                '法力值': '法力值', '智力属性': '智力属性', '感知属性': '感知属性', '魅力属性': '魅力属性',
                '专注能力': '专注能力', '法术强度': '法术强度', '魔法抗性': '魔法抗性', '法力回复': '法力回复',
                '法术书': '法术书', '已知法术': '已知法术', '准备法术': '准备法术', '法术位': '法术位',
                '施法材料': '施法材料', '仪式法术': '仪式法术', '超魔专长': '超魔专长', '法术卷轴': '法术卷轴',
                '火元素': '火元素', '水元素': '水元素', '土元素': '土元素', '风元素': '风元素',
                '雷电': '雷电', '冰霜': '冰霜', '光明': '光明', '黑暗': '黑暗',
                '法杖': '法杖', '魔杖': '魔杖', '法球': '法球', '法袍': '法袍',
                '护符': '护符', '魔法戒指': '魔法戒指', '魔法水晶': '魔法水晶', '魔法典籍': '魔法典籍'
            },
            training: {
                // 🔧 修复：使用实际存在的英文字段key值创建映射
                'obedience': '服从训练', 'discipline': '纪律训练', 'etiquette': '礼仪训练', 'posture': '姿态训练',
                'speech': '言语训练', 'behavior': '行为训练', 'attention': '注意力训练', 'patience': '耐心训练',
                'focus': '专注训练', 'service': '服务训练', 'cooking': '烹饪训练', 'cleaning': '清洁训练',
                'massage': '按摩训练', 'entertainment': '娱乐训练', 'music': '音乐训练', 'dance': '舞蹈训练',
                'art': '艺术训练', 'language': '语言训练', 'strength': '力量训练', 'endurance': '耐力训练',
                'flexibility': '柔韧训练', 'balance': '平衡训练', 'coordination': '协调训练', 'agility': '敏捷训练',
                'stamina': '体能训练', 'recovery': '恢复训练', 'confidence': '自信训练', 'stress': '抗压训练',
                'emotion': '情绪训练', 'memory': '记忆训练', 'logic': '逻辑训练', 'creativity': '创造训练',
                'meditation': '冥想训练', 'mindfulness': '正念训练', 'intensity': '强度设置', 'duration': '持续时间',
                'frequency': '训练频率', 'progress': '进度跟踪', 'rewards': '奖励机制', 'punishment': '惩罚机制',
                'schedule': '训练计划', 'evaluation': '评估系统', 'auto': '自动训练', 'adaptive': '自适应训练',
                'ai': 'AI辅助', 'analytics': '数据分析', 'reports': '训练报告', 'export': '导出功能',
                'backup': '备份功能', 'sync': '同步功能',

                // 🔧 完整的中文字段名映射 (保持不变)
                '服从训练': '服从训练', '纪律训练': '纪律训练', '礼仪训练': '礼仪训练', '姿态训练': '姿态训练',
                '言语训练': '言语训练', '行为训练': '行为训练', '注意力训练': '注意力训练', '耐心训练': '耐心训练',
                '专注训练': '专注训练', '服务训练': '服务训练', '烹饪训练': '烹饪训练', '清洁训练': '清洁训练',
                '按摩训练': '按摩训练', '娱乐训练': '娱乐训练', '音乐训练': '音乐训练', '舞蹈训练': '舞蹈训练',
                '艺术训练': '艺术训练', '语言训练': '语言训练', '力量训练': '力量训练', '耐力训练': '耐力训练',
                '柔韧训练': '柔韧训练', '平衡训练': '平衡训练', '协调训练': '协调训练', '敏捷训练': '敏捷训练',
                '体能训练': '体能训练', '恢复训练': '恢复训练', '自信训练': '自信训练', '抗压训练': '抗压训练',
                '情绪训练': '情绪训练', '记忆训练': '记忆训练', '逻辑训练': '逻辑训练', '创造训练': '创造训练',
                '冥想训练': '冥想训练', '正念训练': '正念训练', '强度设置': '强度设置', '持续时间': '持续时间',
                '训练频率': '训练频率', '进度跟踪': '进度跟踪', '奖励机制': '奖励机制', '惩罚机制': '惩罚机制',
                '训练计划': '训练计划', '评估系统': '评估系统', '自动训练': '自动训练', '自适应训练': '自适应训练',
                'AI辅助': 'AI辅助', '数据分析': '数据分析', '训练报告': '训练报告', '导出功能': '导出功能',
                '备份功能': '备份功能', '同步功能': '同步功能'
            }
        };

        // 🔧 新增：动态添加自定义面板的字段映射
        try {
            const customPanels = this.getCustomPanels();
            for (const [panelId, panelConfig] of Object.entries(customPanels)) {
                if (panelConfig && panelConfig.subItems && Array.isArray(panelConfig.subItems)) {
                    // 为每个自定义面板创建字段映射
                    const customPanelMapping = {};

                    panelConfig.subItems.forEach(subItem => {
                        if (subItem.key) {
                            // 🔧 修复：优先使用displayName，如果没有则使用name作为显示名称
                            const displayName = subItem.displayName || subItem.name || subItem.key;

                            // 使用字段的key作为映射键
                            customPanelMapping[subItem.key] = displayName;

                            // 🔧 兼容性：同时支持name字段（如果与key不同）
                            if (subItem.name && subItem.name !== subItem.key) {
                                customPanelMapping[subItem.name] = displayName;
                            }
                        }
                    });

                    // 🔧 关键修复：合并自定义面板映射，不要覆盖基础映射！
                    if (Object.keys(customPanelMapping).length > 0) {
                        // 使用合并而不是覆盖，确保标准映射不会丢失
                        baseMapping[panelId] = {
                            ...(baseMapping[panelId] || {}), // 保留已有的基础映射
                            ...customPanelMapping              // 添加自定义字段映射
                        };
                        // 🔧 修复：只在首次生成时输出日志，避免重复日志
                        if (!this._cachedCompleteMapping) {
                            console.log(`[InfoBarSettings] 📊 添加自定义面板字段映射: ${panelId}`, customPanelMapping);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加自定义面板字段映射失败:', error);
        }

        // 🔧 新增：动态添加基础面板的自定义字段映射（如interaction面板的自定义字段）
        try {
            const context = window.SillyTavern?.getContext?.();
            if (context) {
                const extensionSettings = context.extensionSettings;
                const configs = extensionSettings?.['Information bar integration tool'] || {};

                // 遍历所有基础面板配置
                for (const [panelId, panelConfig] of Object.entries(configs)) {
                    // 跳过非面板配置
                    if (!panelConfig || typeof panelConfig !== 'object' || !panelConfig.subItems) {
                        continue;
                    }

                    // 只处理基础面板（已经在baseMapping中存在的面板）
                    if (!baseMapping[panelId]) {
                        continue;
                    }

                    // 为基础面板添加自定义字段映射
                    const customFieldMapping = {};
                    if (Array.isArray(panelConfig.subItems)) {
                        panelConfig.subItems.forEach(subItem => {
                            if (subItem.key) {
                                // 🔧 修复：优先使用displayName，如果没有则使用name作为显示名称
                                const displayName = subItem.displayName || subItem.name || subItem.key;

                                // 使用字段的key作为映射键
                                customFieldMapping[subItem.key] = displayName;

                                // 🔧 兼容性：同时支持name字段（如果与key不同）
                                if (subItem.name && subItem.name !== subItem.key) {
                                    customFieldMapping[subItem.name] = displayName;
                                }
                            }
                        });
                    }

                    // 🔧 关键修复：合并自定义字段映射到基础面板映射
                    if (Object.keys(customFieldMapping).length > 0) {
                        baseMapping[panelId] = {
                            ...(baseMapping[panelId] || {}), // 保留已有的基础映射
                            ...customFieldMapping              // 添加自定义字段映射
                        };
                        // 🔧 修复：只在首次生成时输出日志，避免重复日志
                        if (!this._cachedCompleteMapping) {
                            console.log(`[InfoBarSettings] 📊 添加基础面板自定义字段映射: ${panelId}`, customFieldMapping);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加基础面板自定义字段映射失败:', error);
        }

        // 🔧 新增：缓存映射结果
        this._cachedCompleteMapping = baseMapping;

        console.log('[InfoBarSettings] ✅ 完整显示名称映射生成完成:', Object.keys(baseMapping));
        return baseMapping;
    }

    /**
     * 更新子项列表
     */
    updateSubitemList(menu, panelType) {
        try {
            console.log(`[InfoBarSettings] 🔄 更新子项列表: ${panelType}`);

            const subitemList = menu.querySelector('.subitem-list');
            if (!subitemList) return;

            // 动态获取面板配置
            const enabledPanels = this.getEnabledPanels();
            const panelConfig = enabledPanels[panelType];

            if (!panelConfig) {
                console.warn(`[InfoBarSettings] ⚠️ 未找到面板配置: ${panelType}`);
                return;
            }

            // 生成新的子项列表HTML
            const newSubitemListHtml = this.generateSubitemListHtml(panelType, panelConfig);
            subitemList.innerHTML = newSubitemListHtml;

            // 重新绑定子项按钮事件
            const newAddSubitemBtns = subitemList.querySelectorAll('.add-subitem-btn');
            newAddSubitemBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const fieldType = btn.closest('.subitem-item').dataset.field;
                    const area = menu.querySelector('.menu-header h3').textContent.includes('顶部') ? 'top' : 'bottom';
                    console.log(`[InfoBarSettings] 🔧 添加子项: ${fieldType} 到 ${area}`);
                    this.addSubitemToPreview(fieldType, area, 'new');
                    menu.remove();
                });
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新子项列表失败:', error);
        }
    }

    /**
     * 添加面板到预览
     */
    addPanelToPreview(panelType, area, position) {
        try {
            console.log(`[InfoBarSettings] 🎭 添加面板到预览: ${panelType} (区域: ${area}, 位置: ${position})`);

            // 根据区域选择正确的容器
            const containerClass = area === 'top' ? '.top-embedded-panels' : '.bottom-embedded-panels';
            const embeddedPanels = this.modal?.querySelector(containerClass);
            if (!embeddedPanels) {
                console.error(`[InfoBarSettings] ❌ 未找到${area}区域的嵌入面板容器`);
                return;
            }

            // 动态获取面板配置
            const enabledPanels = this.getEnabledPanels();
            const panelConfig = enabledPanels[panelType];

            if (!panelConfig) {
                console.error(`[InfoBarSettings] ❌ 未找到面板配置: ${panelType}`);
                return;
            }

            // 🔧 修复：使用预览元素创建面板，保持一致性
            const panelButton = this.createPreviewPanelElement(panelType, 'panel');
            if (!panelButton) {
                console.error(`[InfoBarSettings] ❌ 创建面板预览元素失败: ${panelType}`);
                return;
            }

            // 绑定点击事件（如果需要的话）
            panelButton.addEventListener('click', () => {
                this.showDemoPanelPopup(panelType);
            });

            // 根据位置插入
            if (position === 'top') {
                embeddedPanels.insertBefore(panelButton, embeddedPanels.firstChild);
            } else {
                embeddedPanels.appendChild(panelButton);
            }

            // 将添加的面板写入配置布局
            this.persistFrontendLayout({ type: 'panel', id: panelType }, area);

            // 获取面板名称用于日志
            const config = this.getPanelDisplayInfo(panelType, panelConfig);
            console.log(`[InfoBarSettings] ✅ 面板 ${config.name} 已添加到预览`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加面板到预览失败:', error);
        }
    }

    /**
     * 添加子项到预览
     */
    addSubitemToPreview(fieldType, area, position) {
        try {
            console.log(`[InfoBarSettings] 🔧 添加子项到预览: ${fieldType} (区域: ${area}, 位置: ${position})`);

            // 根据区域选择正确的容器
            const containerClass = area === 'top' ? '.top-embedded-panels' : '.bottom-embedded-panels';
            const embeddedPanels = this.modal?.querySelector(containerClass);
            if (!embeddedPanels) {
                console.error(`[InfoBarSettings] ❌ 未找到${area}区域的嵌入面板容器`);
                return;
            }

            // 动态获取子项显示名称
            const displayName = this.getSubitemDisplayName(fieldType);
            const config = {
                field: displayName,
                value: this.getSubitemDemoValue(fieldType, displayName)
            };

            // 🔧 修复：使用预览元素创建子项，保持一致性
            const subitemDisplay = this.createPreviewPanelElement(fieldType, 'subitem');
            if (!subitemDisplay) {
                console.error(`[InfoBarSettings] ❌ 创建子项预览元素失败: ${fieldType}`);
                return;
            }

            // 根据位置插入
            if (position === 'top') {
                embeddedPanels.insertBefore(subitemDisplay, embeddedPanels.firstChild);
            } else {
                embeddedPanels.appendChild(subitemDisplay);
            }

            // 将添加的子项写入配置布局
            const resolvedId = this.resolveFieldQualifiedId(fieldType);
            this.persistFrontendLayout({ type: 'subitem', id: resolvedId }, area);

            console.log(`[InfoBarSettings] ✅ 子项 ${config.field} 已添加到预览`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加子项到预览失败:', error);
        }
    }
    /**
     * 获取子项显示名称
     */
    getSubitemDisplayName(fieldKey) {
        try {
            // 🔧 修复：处理完整ID格式（panel.field）和简单字段名
            let targetPanelId = null;
            let targetFieldKey = fieldKey;

            if (fieldKey.includes('.')) {
                [targetPanelId, targetFieldKey] = fieldKey.split('.');
            }

            const enabledPanels = this.getEnabledPanels();

            // 如果指定了面板ID，只在该面板中查找
            if (targetPanelId && enabledPanels[targetPanelId]) {
                const subItems = this.getEnabledSubItems(targetPanelId, enabledPanels[targetPanelId]);
                const foundSubItem = subItems.find(item => item.key === targetFieldKey);

                if (foundSubItem) {
                    return foundSubItem.displayName;
                }

                // 如果在指定面板中没找到，尝试从完整映射中获取
                const completeMapping = this.getCompleteDisplayNameMapping();
                if (completeMapping[targetPanelId] && completeMapping[targetPanelId][targetFieldKey]) {
                    return completeMapping[targetPanelId][targetFieldKey];
                }
            } else {
                // 如果没有指定面板ID，在所有面板中查找
                for (const [panelId, panelConfig] of Object.entries(enabledPanels)) {
                    const subItems = this.getEnabledSubItems(panelId, panelConfig);
                    const foundSubItem = subItems.find(item => item.key === targetFieldKey);

                    if (foundSubItem) {
                        return foundSubItem.displayName;
                    }
                }
            }

            // 如果没找到，返回字段键名
            return targetFieldKey;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取子项显示名称失败:', error);
            return fieldKey;
        }
    }

    /**
     * 获取子项演示值
     */
    getSubitemDemoValue(fieldKey, displayName) {
        // 根据字段类型返回合适的演示值
        const demoValues = {
            // 个人信息相关
            'name': '张三',
            'age': '25岁',
            'gender': '男',
            'occupation': '冒险者',
            'level': 'Lv.15',
            'experience': '2847/3000',
            'health': '良好',
            'mood': '愉快',

            // 交互对象相关
            'npc_name': '艾莉丝',
            'relationship': '朋友',
            'attitude': '友好',
            'favorability': '70/100',
            'emotion': '高兴',

            // 世界信息相关
            'location': '艾尔登城',
            'time': '上午10点',
            'weather': '晴朗',
            'environment': '城市街道',
            'atmosphere': '繁忙',

            // 背包相关
            'gold': '1,247枚',
            'weapon': '银剑',
            'armor': '皮甲',
            'items': '生命药水 x3',
            'consumables': '面包 x5'
        };

        // 如果有预设值，使用预设值
        if (demoValues[fieldKey]) {
            return demoValues[fieldKey];
        }

        // 根据显示名称推测合适的值
        if (displayName.includes('名称') || displayName.includes('姓名')) {
            return '示例名称';
        } else if (displayName.includes('等级') || displayName.includes('级别')) {
            return 'Lv.1';
        } else if (displayName.includes('数量')) {
            return '5';
        } else if (displayName.includes('状态')) {
            return '正常';
        } else {
            return '示例值';
        }
    }

    /**
     * 清空预览内容
     */
    clearPreviewContent() {
        try {
            console.log('[InfoBarSettings] 🧹 清空预览内容');

            let totalCleared = 0;

            // 清空顶部区域
            const topEmbeddedPanels = this.modal?.querySelector('.top-embedded-panels');
            if (topEmbeddedPanels) {
                const topDynamicElements = topEmbeddedPanels.querySelectorAll('.panel-button:not(.demo), .subitem-display:not(.demo)');
                topDynamicElements.forEach(element => element.remove());
                totalCleared += topDynamicElements.length;
                console.log(`[InfoBarSettings] 🔝 已清空顶部区域 ${topDynamicElements.length} 个动态元素`);
            }

            // 清空底部区域
            const bottomEmbeddedPanels = this.modal?.querySelector('.bottom-embedded-panels');
            if (bottomEmbeddedPanels) {
                const bottomDynamicElements = bottomEmbeddedPanels.querySelectorAll('.panel-button:not(.demo), .subitem-display:not(.demo)');
                bottomDynamicElements.forEach(element => element.remove());
                totalCleared += bottomDynamicElements.length;
                console.log(`[InfoBarSettings] 🔽 已清空底部区域 ${bottomDynamicElements.length} 个动态元素`);
            }

            console.log(`[InfoBarSettings] ✅ 总共清空 ${totalCleared} 个动态元素`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清空预览内容失败:', error);
        }
    }

    /**
     * 将添加的面板/子项持久化到前端显示配置
     */
    async persistFrontendLayout(item, area) {
        try {
            console.log(`[InfoBarSettings] 💾 持久化前端布局: ${item.type} ${item.id} 到 ${area}`);

            // 使用FrontendDisplayManager的标准读取和保存方法，确保配置一致性
            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (!fdm) {
                console.error('[InfoBarSettings] ❌ 未找到前端显示管理器');
                return;
            }

            // 读取当前配置
            const currentConfig = await fdm.getSavedFrontendDisplayConfig();
            console.log('[InfoBarSettings] 📋 当前配置:', currentConfig);

            // 🔧 修复：清理所有数组中的重复项，然后添加新项
            const cleanArray = (arr) => [...new Set(arr || [])];

            // 根据类型添加到相应数组
            if (item.type === 'panel') {
                const targetKey = area === 'top' ? 'topPanels' : 'bottomPanels';
                let targetArray = cleanArray(currentConfig[targetKey]);
                if (!targetArray.includes(item.id)) {
                    targetArray.push(item.id);
                    console.log(`[InfoBarSettings] ➕ 添加面板 ${item.id} 到 ${targetKey}`);
                } else {
                    console.log(`[InfoBarSettings] ℹ️ 面板 ${item.id} 已存在于 ${targetKey}，跳过添加`);
                }
                currentConfig[targetKey] = targetArray;
            } else if (item.type === 'subitem') {
                const targetKey = area === 'top' ? 'topSubitems' : 'bottomSubitems';
                let targetArray = cleanArray(currentConfig[targetKey]);
                if (!targetArray.includes(item.id)) {
                    targetArray.push(item.id);
                    console.log(`[InfoBarSettings] ➕ 添加子项 ${item.id} 到 ${targetKey}`);
                } else {
                    console.log(`[InfoBarSettings] ℹ️ 子项 ${item.id} 已存在于 ${targetKey}，跳过添加`);
                }
                currentConfig[targetKey] = targetArray;
            }

            // 🔧 修复：清理所有配置数组中的重复项
            currentConfig.topPanels = cleanArray(currentConfig.topPanels);
            currentConfig.bottomPanels = cleanArray(currentConfig.bottomPanels);
            currentConfig.topSubitems = cleanArray(currentConfig.topSubitems);
            currentConfig.bottomSubitems = cleanArray(currentConfig.bottomSubitems);

            // 确保启用状态
            currentConfig.enabled = true;

            // 保存完整配置
            await fdm.saveFrontendDisplayConfig(currentConfig);

            console.log('[InfoBarSettings] 💾 已保存前端显示配置:', {
                topPanels: currentConfig.topPanels,
                bottomPanels: currentConfig.bottomPanels,
                topSubitems: currentConfig.topSubitems,
                bottomSubitems: currentConfig.bottomSubitems,
                enabled: currentConfig.enabled
            });

            // 立即更新前端显示
            this.updateFrontendDisplayManagerSettings();
            this.refreshFrontendDisplay();

            // 🔧 修复：重新渲染预览
            this.renderFrontendDisplayPreview(currentConfig);

        } catch (e) {
            console.error('[InfoBarSettings] ❌ 保存前端显示配置失败:', e);
        }
    }

    /**
     * 刷新前端显示
     */
    refreshFrontendDisplay() {
        try {
            // 获取前端显示管理器
            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (fdm) {
                // 检查是否有包装的消息
                const wrappedMessages = document.querySelectorAll('.frontend-message-wrapper');
                if (wrappedMessages.length > 0) {
                    // 只重新渲染最后一个包装的消息
                    const lastWrapper = wrappedMessages[wrappedMessages.length - 1];
                    const messageElement = lastWrapper.querySelector('.ai-message-container .mes');
                    if (messageElement) {
                        fdm.renderLayoutForMessage(messageElement);
                        console.log('[InfoBarSettings] 🔄 已刷新前端显示 (仅渲染布局)');
                    }
                } else {
                    // 如果没有包装的消息，但前端显示已启用，则初始化前端显示
                    if (fdm.enabled) {
                        console.log('[InfoBarSettings] 🔄 没有包装消息，重新初始化前端显示');
                        fdm.initializeFrontendDisplay();
                    } else {
                        console.log('[InfoBarSettings] ⚠️ 前端显示未启用，跳过刷新');
                    }
                }
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新前端显示失败:', error);
        }
    }

    /**
     * 将基础字段键补全为 panel.key 形式
     */
    resolveFieldQualifiedId(fieldKey) {
        try {
            if (fieldKey.includes('.')) return fieldKey;

            // 🔧 修复：智能匹配字段到正确的面板
            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (fdm) {
                const availableSubItems = fdm.getAvailableSubItems();

                // 查找完全匹配的字段
                const exactMatch = availableSubItems.find(item =>
                    item.id.endsWith(`.${fieldKey}`)
                );

                if (exactMatch) {
                    console.log(`[InfoBarSettings] 🎯 字段 ${fieldKey} 匹配到: ${exactMatch.id}`);
                    return exactMatch.id;
                }

                // 如果没有完全匹配，尝试根据字段名推断面板
                const fieldToPanelMap = {
                    'time': 'world',
                    'listView': 'tasks',
                    'kanbanView': 'tasks',
                    'calendarView': 'tasks',
                    'name': 'personal',
                    '姓名': 'personal',
                    '对象名称': 'interaction',
                    'location': 'world',
                    'mood': 'interaction'
                };

                const inferredPanel = fieldToPanelMap[fieldKey];
                if (inferredPanel) {
                    const inferredId = `${inferredPanel}.${fieldKey}`;
                    console.log(`[InfoBarSettings] 🎯 字段 ${fieldKey} 推断为: ${inferredId}`);
                    return inferredId;
                }
            }

            // 兜底：尝试从模态框标题获取面板ID（保持原有逻辑）
            const title = this.modal?.querySelector('.subitem-list h4')?.textContent || '';
            const map = [
                { key: '个人信息', id: 'personal' },
                { key: '世界信息', id: 'world' },
                { key: '交互对象', id: 'interaction' },
                { key: '任务', id: 'tasks' },
                { key: '组织', id: 'organization' },
                { key: '新闻', id: 'news' },
                { key: '背包', id: 'inventory' },
                { key: '能力', id: 'abilities' },
                { key: '剧情', id: 'plot' },
                { key: '修炼', id: 'cultivation' },
                { key: '奇幻', id: 'fantasy' },
                { key: '现代', id: 'modern' },
                { key: '历史', id: 'historical' },
                { key: '魔法', id: 'magic' },
                { key: '训练', id: 'training' }
            ];
            const found = map.find(m => title.includes(m.key));
            const result = found ? `${found.id}.${fieldKey}` : fieldKey;

            console.log(`[InfoBarSettings] 🎯 字段 ${fieldKey} 通过标题解析为: ${result}`);
            return result;
        } catch (e) {
            console.warn(`[InfoBarSettings] ⚠️ 解析字段ID失败: ${fieldKey}`, e);
            return fieldKey;
        }
    }

    /**
     * 🔧 新增：渲染前端显示预览内容
     * 根据配置重新渲染预览区域的面板和子项
     */
    renderFrontendDisplayPreview(config) {
        try {
            console.log('[InfoBarSettings] 🎨 渲染前端显示预览:', config);

            if (!config) {
                console.warn('[InfoBarSettings] ⚠️ 配置为空，跳过预览渲染');
                return;
            }

            // 获取预览容器
            const topContainer = this.modal?.querySelector('.top-embedded-panels');
            const bottomContainer = this.modal?.querySelector('.bottom-embedded-panels');

            if (!topContainer || !bottomContainer) {
                console.warn('[InfoBarSettings] ⚠️ 未找到预览容器');
                return;
            }

            // 清空现有预览内容
            topContainer.innerHTML = '';
            bottomContainer.innerHTML = '';

            // 渲染顶部面板
            if (config.topPanels && Array.isArray(config.topPanels)) {
                config.topPanels.forEach(panelId => {
                    const panelElement = this.createPreviewPanelElement(panelId, 'panel');
                    if (panelElement) {
                        topContainer.appendChild(panelElement);
                    }
                });
            }

            // 🔧 修复：限制顶部子项显示数量，避免预览过于拥挤
            if (config.topSubitems && Array.isArray(config.topSubitems)) {
                // 只显示前3个子项，其余用省略号表示
                const maxSubitems = 3;
                const subitems = config.topSubitems.slice(0, maxSubitems);

                subitems.forEach(subitemId => {
                    const subitemElement = this.createPreviewPanelElement(subitemId, 'subitem');
                    if (subitemElement) {
                        topContainer.appendChild(subitemElement);
                    }
                });

                // 如果有更多子项，显示省略提示
                if (config.topSubitems.length > maxSubitems) {
                    const moreElement = document.createElement('div');
                    moreElement.className = 'preview-more-indicator';
                    moreElement.innerHTML = `
                        <span class="preview-item-name">⋯ 还有${config.topSubitems.length - maxSubitems}个子项</span>
                    `;
                    topContainer.appendChild(moreElement);
                }
            }

            // 渲染底部面板
            if (config.bottomPanels && Array.isArray(config.bottomPanels)) {
                config.bottomPanels.forEach(panelId => {
                    const panelElement = this.createPreviewPanelElement(panelId, 'panel');
                    if (panelElement) {
                        bottomContainer.appendChild(panelElement);
                    }
                });
            }

            // 🔧 修复：限制底部子项显示数量，避免预览过于拥挤
            if (config.bottomSubitems && Array.isArray(config.bottomSubitems)) {
                // 只显示前3个子项，其余用省略号表示
                const maxSubitems = 3;
                const subitems = config.bottomSubitems.slice(0, maxSubitems);

                subitems.forEach(subitemId => {
                    const subitemElement = this.createPreviewPanelElement(subitemId, 'subitem');
                    if (subitemElement) {
                        bottomContainer.appendChild(subitemElement);
                    }
                });

                // 如果有更多子项，显示省略提示
                if (config.bottomSubitems.length > maxSubitems) {
                    const moreElement = document.createElement('div');
                    moreElement.className = 'preview-more-indicator';
                    moreElement.innerHTML = `
                        <span class="preview-item-name">⋯ 还有${config.bottomSubitems.length - maxSubitems}个子项</span>
                    `;
                    bottomContainer.appendChild(moreElement);
                }
            }

            console.log('[InfoBarSettings] ✅ 前端显示预览渲染完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 渲染前端显示预览失败:', error);
        }
    }

    /**
     * 🔧 新增：创建预览面板元素
     * 为预览区域创建面板或子项的显示元素
     */
    createPreviewPanelElement(id, type) {
        try {
            const element = document.createElement('div');
            element.className = type === 'panel' ? 'preview-panel' : 'preview-subitem';
            element.dataset.id = id;
            element.dataset.type = type;

            // 获取显示名称（不使用图标，因为前端是按钮UI）
            let displayName = id;

            try {
                if (type === 'panel') {
                    // 🔧 修复：面板使用正确的getPanelDisplayInfo函数获取名称
                    const enabledPanels = this.getEnabledPanels();
                    const panelConfig = enabledPanels[id];
                    const panelInfo = this.getPanelDisplayInfo(id, panelConfig);

                    displayName = panelInfo.name || id;

                    console.log(`[InfoBarSettings] 🎨 面板预览元素: ${id} -> ${displayName}`);
                } else {
                    // 🔧 修复：子项需要通过面板映射来获取正确的中文名称
                    displayName = this.getSubitemDisplayName(id) || id;

                    console.log(`[InfoBarSettings] 🎨 子项预览元素: ${id} -> ${displayName}`);
                }
            } catch (error) {
                console.warn('[InfoBarSettings] ⚠️ 获取显示名称失败，使用原始ID:', error);
                displayName = id;
            }

            // 🔧 修复：使用按钮样式的预览，模拟真实前端显示
            element.innerHTML = `
                <span class="preview-item-name">${displayName}</span>
                <button class="remove-preview-item" data-id="${id}" data-type="${type}" title="移除">×</button>
            `;

            // 添加移除事件
            const removeButton = element.querySelector('.remove-preview-item');
            if (removeButton) {
                removeButton.addEventListener('click', () => {
                    this.removePreviewItem(id, type);
                });
            }

            return element;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 创建预览元素失败:', error);
            return null;
        }
    }

    /**
     * 🔧 新增：移除预览项
     * 从配置和预览中移除指定的面板或子项
     */
    async removePreviewItem(id, type) {
        try {
            console.log(`[InfoBarSettings] 🗑️ 移除预览项: ${type} ${id}`);

            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (!fdm) {
                console.error('[InfoBarSettings] ❌ 未找到前端显示管理器');
                return;
            }

            // 获取当前配置
            const currentConfig = await fdm.getSavedFrontendDisplayConfig();

            // 从相应数组中移除项目
            if (type === 'panel') {
                if (currentConfig.topPanels) {
                    currentConfig.topPanels = currentConfig.topPanels.filter(item => item !== id);
                }
                if (currentConfig.bottomPanels) {
                    currentConfig.bottomPanels = currentConfig.bottomPanels.filter(item => item !== id);
                }
            } else if (type === 'subitem') {
                if (currentConfig.topSubitems) {
                    currentConfig.topSubitems = currentConfig.topSubitems.filter(item => item !== id);
                }
                if (currentConfig.bottomSubitems) {
                    currentConfig.bottomSubitems = currentConfig.bottomSubitems.filter(item => item !== id);
                }
            }

            // 保存配置
            await fdm.saveFrontendDisplayConfig(currentConfig);

            // 重新渲染预览
            this.renderFrontendDisplayPreview(currentConfig);

            // 立即更新前端显示
            this.updateFrontendDisplayManagerSettings();
            this.refreshFrontendDisplay();

            console.log(`[InfoBarSettings] ✅ 已移除预览项: ${type} ${id}`);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 移除预览项失败:', error);
        }
    }

    /**
     * 🔧 新增：确保AI消息被包装
     * 检查并触发AI消息包装，用于设置保存后的修复
     */
    ensureAIMessagesWrapped() {
        try {
            console.log('[InfoBarSettings] 🔍 检查AI消息包装状态...');

            const fdm = window.SillyTavernInfobar?.modules?.frontendDisplayManager;
            if (!fdm) {
                console.warn('[InfoBarSettings] ⚠️ 未找到前端显示管理器');
                return;
            }

            // 检查是否有AI消息
            const aiMessages = document.querySelectorAll('.mes[is_user="false"]');
            console.log(`[InfoBarSettings] 📋 找到 ${aiMessages.length} 条AI消息`);

            if (aiMessages.length === 0) {
                console.log('[InfoBarSettings] ℹ️ 没有AI消息需要包装');
                return;
            }

            // 检查最后一条AI消息是否已包装
            const lastMessage = aiMessages[aiMessages.length - 1];
            const existingWrapper = lastMessage.previousElementSibling;

            if (existingWrapper && existingWrapper.classList.contains('frontend-message-wrapper')) {
                console.log('[InfoBarSettings] ✅ AI消息已正确包装');
                return;
            }

            // 没有包装，触发包装
            console.log('[InfoBarSettings] 🔧 AI消息未包装，触发重新包装...');

            if (fdm.wrapExistingMessagesWithRetry) {
                fdm.wrapExistingMessagesWithRetry(0);
            } else if (fdm.wrapExistingMessages) {
                fdm.wrapExistingMessages();
            } else {
                console.warn('[InfoBarSettings] ⚠️ 前端显示管理器缺少包装方法');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 检查AI消息包装失败:', error);
        }
    }

    /**
     * 获取导出选项
     */
    getExportOptions() {
        try {
            const panelConfigs = this.modal.querySelector('#export-panel-configs')?.checked || false;
            const panelRules = this.modal.querySelector('#export-panel-rules')?.checked || false;
            const fieldRules = this.modal.querySelector('#export-field-rules')?.checked || false;
            const themeSettings = this.modal.querySelector('#export-theme-settings')?.checked || false;
            const apiSettings = this.modal.querySelector('#export-api-settings')?.checked || false;
            const allSettings = this.modal.querySelector('#export-all-settings')?.checked || false;

            const hasAnySelection = panelConfigs || panelRules || fieldRules || themeSettings || apiSettings || allSettings;

            return {
                panelConfigs,
                panelRules,
                fieldRules,
                themeSettings,
                apiSettings,
                allSettings,
                hasAnySelection
            };
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取导出选项失败:', error);
            return { hasAnySelection: false };
        }
    }

    /**
     * 添加面板配置到导出数据
     */
    async addPanelConfigsToExport(exportData) {
        try {
            // 获取面板配置
            const panelConfigs = await this.configManager.getConfig('panels') || {};

            // 获取自定义面板
            const customPanels = await this.configManager.getConfig('customPanels') || {};

            // 获取基础面板配置
            const basicPanelIds = ['personal','world','interaction','tasks','organization','news','inventory','abilities','plot','cultivation','fantasy','modern','historical','magic','training'];
            const basicPanelConfigs = {};

            for (const panelId of basicPanelIds) {
                const config = await this.configManager.getConfig(panelId);
                if (config) {
                    basicPanelConfigs[panelId] = config;
                }
            }

            exportData.configs.panelConfigs = {
                panels: panelConfigs,
                customPanels: customPanels,
                basicPanels: basicPanelConfigs
            };

            console.log('[InfoBarSettings] ✅ 面板配置已添加到导出数据');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加面板配置失败:', error);
        }
    }

    /**
     * 添加面板规则到导出数据
     */
    async addPanelRulesToExport(exportData) {
        try {
            const panelRuleManager = window.SillyTavernInfobar?.modules?.panelRuleManager;
            if (!panelRuleManager) {
                console.warn('[InfoBarSettings] ⚠️ 面板规则管理器不可用');
                return;
            }

            // 获取所有面板规则
            const panelRulesData = await this.configManager.getData('panel_rules') || {};

            exportData.configs.panelRules = panelRulesData;

            console.log('[InfoBarSettings] ✅ 面板规则已添加到导出数据');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加面板规则失败:', error);
        }
    }

    /**
     * 添加字段规则到导出数据
     */
    async addFieldRulesToExport(exportData) {
        try {
            const fieldRuleManager = window.SillyTavernInfobar?.modules?.fieldRuleManager;
            if (!fieldRuleManager) {
                console.warn('[InfoBarSettings] ⚠️ 字段规则管理器不可用');
                return;
            }

            // 获取所有字段规则
            const fieldRulesData = await this.configManager.getData('field_rules') || {};

            exportData.configs.fieldRules = fieldRulesData;

            console.log('[InfoBarSettings] ✅ 字段规则已添加到导出数据');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加字段规则失败:', error);
        }
    }

    /**
     * 添加主题设置到导出数据
     */
    async addThemeSettingsToExport(exportData) {
        try {
            const themeConfig = await this.configManager.getConfig('theme') || {};

            exportData.configs.themeSettings = themeConfig;

            console.log('[InfoBarSettings] ✅ 主题设置已添加到导出数据');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加主题设置失败:', error);
        }
    }

    /**
     * 添加API设置到导出数据
     */
    async addApiSettingsToExport(exportData) {
        try {
            const apiConfig = await this.configManager.getConfig('apiConfig') || {};

            // 移除敏感信息
            const safeApiConfig = { ...apiConfig };
            if (safeApiConfig.apiKey) {
                safeApiConfig.apiKey = '***REMOVED***';
            }

            exportData.configs.apiSettings = safeApiConfig;

            console.log('[InfoBarSettings] ✅ API设置已添加到导出数据（已移除敏感信息）');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加API设置失败:', error);
        }
    }

    /**
     * 添加所有设置到导出数据
     */
    async addAllSettingsToExport(exportData) {
        try {
            // 使用现有的导出方法
            const fullExportData = await this.configManager.exportConfigs();

            // 合并到当前导出数据
            exportData.configs.allSettings = fullExportData.configs;

            console.log('[InfoBarSettings] ✅ 所有设置已添加到导出数据');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 添加所有设置失败:', error);
        }
    }

    /**
     * 打开变量管理器
     */
    openVariableManager() {
        try {
            console.log('[InfoBarSettings] 🔧 创建变量管理器界面...');

            // 创建变量管理器模态框
            const variableModal = this.createVariableManagerModal();
            document.body.appendChild(variableModal);

            // 显示模态框
            variableModal.style.display = 'flex';

            // 立即应用一次主题（确保初始元素样式正确）
            try {
                const activeThemeCard = this.modal?.querySelector('.theme-preview-card.active');
                const themeId = activeThemeCard?.getAttribute('data-theme');
                const theme = themeId ? this.getThemeById(themeId) : null;
                if (theme) this.applyVariableManagerTheme(theme);
            } catch (e) {
                console.warn('[InfoBarSettings] ⚠️ 打开变量管理器时应用主题失败:', e);
            }

            // 加载现有变量
            this.loadVariables();

            console.log('[InfoBarSettings] ✅ 变量管理器已打开');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 打开变量管理器失败:', error);
            this.showMessage('打开变量管理器失败: ' + error.message, 'error');
        }
    }

    /**
     * 创建变量管理器模态框
     */
    createVariableManagerModal() {
        const modal = document.createElement('div');
        modal.className = 'variable-manager-modal';
        modal.id = 'variable-manager-modal';

        modal.innerHTML = `
            <div class="modal-overlay" onclick="this.closest('.variable-manager-modal').remove()"></div>
            <div class="modal-container">
                <!-- 头部 -->
                <div class="modal-header">
                    <div class="header-left">
                        <h2><i class="fa fa-code"></i> 变量管理器</h2>
                    </div>
                    <div class="header-right">
                        <button class="modal-close" onclick="this.closest('.variable-manager-modal').remove()">×</button>
                    </div>
                </div>

                <!-- 主体内容 -->
                <div class="modal-body">
                    <!-- 变量类型导航栏 -->
                    <div class="variable-nav">
                        <div class="nav-tabs">
                            <button class="nav-tab active" data-scope="global">
                                <i class="fa fa-globe"></i> 全局变量
                            </button>
                            <button class="nav-tab" data-scope="chat">
                                <i class="fa fa-comments"></i> 聊天变量
                            </button>
                        </div>
                    </div>

                    <!-- 工具栏 -->
                    <div class="variable-toolbar">
                        <div class="toolbar-left">
                            <button class="btn btn-primary" data-action="add-variable">
                                <i class="fa fa-plus"></i> 添加变量
                            </button>
                            <select class="variable-type-select" id="variable-type-select">
                                <option value="string">字符串</option>
                                <option value="number">数字</option>
                                <option value="boolean">布尔值</option>
                                <option value="array">数组</option>
                                <option value="object">对象</option>
                            </select>
                        </div>
                        <div class="toolbar-right">
                            <div class="view-mode-toggle">
                                <button class="btn btn-sm view-mode-btn active" data-view="list" title="列表视图">
                                    <i class="fa fa-list"></i>
                                </button>
                                <button class="btn btn-sm view-mode-btn" data-view="tree" title="树状视图">
                                    <i class="fa fa-sitemap"></i>
                                </button>
                            </div>
                            <input type="text" class="search-input" placeholder="搜索变量..." id="variable-search">
                            <button class="btn btn-info" data-action="import-variables">
                                <i class="fa fa-upload"></i> 导入
                            </button>
                            <button class="btn btn-info" data-action="export-variables">
                                <i class="fa fa-download"></i> 导出
                            </button>
                            <button class="btn btn-danger" data-action="clear-variables" title="清空当前作用域变量">
                                <i class="fa fa-trash"></i> 清空
                            </button>
                            <button class="btn btn-secondary" data-action="refresh-variables">
                                <i class="fa fa-refresh"></i> 刷新
                            </button>
                        </div>
                    </div>

                    <!-- 变量列表 -->
                    <div class="variable-list-container">
                        <div class="variable-list" id="variable-list">
                            <!-- 变量项将在这里动态生成 -->
                        </div>
                    </div>
                </div>

                <!-- 底部操作栏 -->
                <div class="modal-footer">
                    <div class="footer-left">
                        <span class="variable-count">变量数量: <span id="variable-count">0</span></span>
                        <span class="variable-scope-info" id="variable-scope-info">全局变量</span>
                    </div>
                    <div class="footer-right">
                        <button class="btn-cancel" onclick="this.closest('.variable-manager-modal').remove()">关闭</button>
                        <button class="btn-save" data-action="save-variables">保存变量</button>
                    </div>
                </div>
            </div>
        `;

        // 绑定事件
        this.bindVariableManagerEvents(modal);

        return modal;
    }

    /**
     * 绑定变量管理器事件
     */
    bindVariableManagerEvents(modal) {
        // 初始化当前作用域和视图模式
        this.currentVariableScope = 'global';
        this.currentViewMode = 'list';

        // 使用事件委托处理所有点击事件
        modal.addEventListener('click', (e) => {
            // 防止重复处理
            if (e.defaultPrevented) return;

            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            // 处理导航栏切换
            const navTab = e.target.closest('.nav-tab');
            if (navTab) {
                this.switchVariableScope(navTab.dataset.scope);
                return;
            }

            // 处理视图模式切换
            const viewModeBtn = e.target.closest('.view-mode-btn');
            if (viewModeBtn) {
                this.switchViewMode(viewModeBtn.dataset.view);
                return;
            }

            if (action) {
                e.preventDefault();
                e.stopPropagation();
                this.handleVariableAction(action, e, actionElement);
            }
        });

        // 搜索功能
        const searchInput = modal.querySelector('#variable-search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.filterVariables(e.target.value);
            });
        }


    }

    /**
     * 切换变量作用域
     */
    switchVariableScope(scope) {
        this.currentVariableScope = scope;

        // 更新导航栏状态
        const modal = document.querySelector('#variable-manager-modal');
        if (modal) {
            const navTabs = modal.querySelectorAll('.nav-tab');
            navTabs.forEach(tab => {
                tab.classList.toggle('active', tab.dataset.scope === scope);
            });

            // 更新底部信息
            const scopeInfo = modal.querySelector('#variable-scope-info');
            if (scopeInfo) {
                scopeInfo.textContent = scope === 'global' ? '全局变量' : '聊天变量';
            }
        }

        // 重新加载变量
        this.loadVariables();

        console.log('[VariableManager] 切换到', scope === 'global' ? '全局变量' : '聊天变量');
    }

    /**
     * 切换视图模式
     */
    switchViewMode(mode) {
        this.currentViewMode = mode;

        // 更新按钮状态
        const modal = document.querySelector('#variable-manager-modal');
        if (modal) {
            const viewModeBtns = modal.querySelectorAll('.view-mode-btn');
            viewModeBtns.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.view === mode);
            });
        }

        // 重新渲染变量列表
        this.renderVariableList();

        console.log('[VariableManager] 切换到', mode === 'list' ? '列表视图' : '树状视图');
    }

    /**
     * 处理变量管理器操作
     */
    handleVariableAction(action, event, actionElement) {
        try {
            switch (action) {
                case 'add-variable':
                    this.addNewVariable();
                    break;
                case 'add-macro':
                    this.addNewMacro();
                    break;
                case 'save-variables':
                    this.saveVariables();
                    break;
                case 'export-variables':
                    this.exportVariables();
                    break;
                case 'import-variables':
                    this.importVariables();
                    break;
                case 'clear-variables':
                    this.clearCurrentScopeVariables();
                    break;
                case 'refresh-variables':
                    this.loadVariables();
                    break;
                case 'edit-variable':
                    const variableId = event.target.closest('.variable-item').dataset.variableId;
                    this.editVariable(variableId);
                    break;
                case 'delete-variable':
                    event.preventDefault();
                    event.stopPropagation();
                    const deleteVariableId = event.target.closest('.variable-item').dataset.variableId;
                    this.deleteVariable(deleteVariableId);
                    break;
                case 'save-variable-dialog':
                    const isEdit = actionElement.dataset.isEdit === 'true';
                    const variableKey = actionElement.dataset.variableKey || '';
                    this.saveVariableFromDialog(actionElement, isEdit, variableKey);
                    break;
                case 'toggle-view-mode':
                    this.toggleViewMode();
                    break;
                case 'add-array-item':
                    const arrayVariableId = actionElement.dataset.variableId ||
                                          event.target.closest('.variable-item')?.dataset?.variableId;
                    this.addArrayItem(arrayVariableId);
                    break;
                case 'remove-array-item':
                    const arrayItemIndex = actionElement.dataset.index;
                    const arrayVarId = event.target.closest('.variable-item')?.dataset?.variableId;
                    this.removeArrayItem(arrayVarId, parseInt(arrayItemIndex));
                    break;
                case 'add-object-property':
                    const objectVariableId = actionElement.dataset.variableId ||
                                           event.target.closest('.variable-item')?.dataset?.variableId;
                    this.addObjectProperty(objectVariableId);
                    break;
                case 'remove-object-property':
                    const propertyKey = actionElement.dataset.key;
                    const objectVarId = event.target.closest('.variable-item')?.dataset?.variableId;
                    this.removeObjectProperty(objectVarId, propertyKey);
                    break;
                case 'add-nested-array-item':
                    const addNestedArrayVarId = actionElement.dataset.variableId;
                    const addNestedArrayPath = actionElement.dataset.path;
                    this.addNestedArrayItem(addNestedArrayVarId, addNestedArrayPath);
                    break;
                case 'add-nested-object-property':
                    const addNestedObjectVarId = actionElement.dataset.variableId;
                    const addNestedObjectPath = actionElement.dataset.path;
                    this.addNestedObjectProperty(addNestedObjectVarId, addNestedObjectPath);
                    break;
                case 'remove-nested-array-item':
                    const removeNestedArrayVarId = actionElement.dataset.variableId;
                    const removeNestedArrayIndex = actionElement.dataset.index;
                    const removeNestedArrayLevel = parseInt(actionElement.dataset.level);
                    this.removeNestedArrayItem(removeNestedArrayVarId, removeNestedArrayIndex, removeNestedArrayLevel, event);
                    break;
                case 'remove-nested-object-property':
                    const removeNestedObjVarId = actionElement.dataset.variableId;
                    const removeNestedObjKey = actionElement.dataset.key;
                    const removeNestedObjPath = actionElement.dataset.path;
                    this.removeNestedObjectProperty(removeNestedObjVarId, removeNestedObjKey, removeNestedObjPath);
                    break;
                case 'edit-array-item':
                    const editArrayVarId = actionElement.dataset.variableId;
                    const editArrayIndex = actionElement.dataset.index;
                    const editArrayLevel = parseInt(actionElement.dataset.level || '0');
                    if (editArrayLevel > 0) {
                        // 嵌套数组项编辑
                        this.editNestedArrayItem(editArrayVarId, editArrayIndex, editArrayLevel, event);
                    } else {
                        // 顶级数组项编辑
                        this.editArrayItem(editArrayVarId, editArrayIndex);
                    }
                    break;
                case 'edit-object-property':
                    const editObjVarId = actionElement.dataset.variableId;
                    const editObjKey = actionElement.dataset.key;
                    const editObjPath = actionElement.dataset.path;
                    this.editObjectProperty(editObjVarId, editObjKey, editObjPath);
                    break;
                case 'edit-nested-array':
                    const editNestedArrayVarId = actionElement.dataset.variableId;
                    const editNestedArrayIndex = actionElement.dataset.index;
                    const editNestedArrayLevel = parseInt(actionElement.dataset.level);
                    this.editNestedArrayItem(editNestedArrayVarId, editNestedArrayIndex, editNestedArrayLevel, event);
                    break;
                case 'edit-nested-object':
                    const editNestedObjVarId = actionElement.dataset.variableId;
                    const editNestedObjIndex = actionElement.dataset.index;
                    const editNestedObjLevel = parseInt(actionElement.dataset.level);
                    this.editNestedObjectItem(editNestedObjVarId, editNestedObjIndex, editNestedObjLevel, event);
                    break;
                case 'edit-nested-property-array':
                    const editNestedPropArrayVarId = actionElement.dataset.variableId;
                    const editNestedPropArrayKey = actionElement.dataset.key;
                    const editNestedPropArrayPath = actionElement.dataset.path;
                    const editNestedPropArrayLevel = parseInt(actionElement.dataset.level);
                    this.editNestedPropertyArray(editNestedPropArrayVarId, editNestedPropArrayKey, editNestedPropArrayPath, editNestedPropArrayLevel);
                    break;
                case 'edit-nested-property-object':
                    const editNestedPropObjVarId = actionElement.dataset.variableId;
                    const editNestedPropObjKey = actionElement.dataset.key;
                    const editNestedPropObjPath = actionElement.dataset.path;
                    const editNestedPropObjLevel = parseInt(actionElement.dataset.level);
                    this.editNestedPropertyObject(editNestedPropObjVarId, editNestedPropObjKey, editNestedPropObjPath, editNestedPropObjLevel);
                    break;
                case 'save-nested-property-edit':
                    const saveNestedVarId = actionElement.dataset.variableId;
                    const saveNestedKey = actionElement.dataset.key;
                    const saveNestedPath = actionElement.dataset.path;
                    const saveNestedType = actionElement.dataset.type;
                    this.saveNestedPropertyEditFromDialog(actionElement, saveNestedVarId, saveNestedKey, saveNestedPath, saveNestedType);
                    break;
                default:
                    console.log(`[VariableManager] 🔘 处理操作: ${action}`);
            }
        } catch (error) {
            console.error('[VariableManager] ❌ 处理操作失败:', error);
        }
    }

    /**
     * 加载变量
     */
    async loadVariables() {
        try {
            let variables = {};

            if (this.currentVariableScope === 'global') {
                // 加载全局变量
                variables = await this.loadGlobalVariables();
            } else {
                // 加载聊天变量
                variables = await this.loadChatVariables();
            }

            this.variables = variables;

            // 渲染变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅ 变量加载完成，共', Object.keys(variables).length, '个',
                this.currentVariableScope === 'global' ? '全局变量' : '聊天变量');
        } catch (error) {
            console.error('[VariableManager] ❌ 加载变量失败:', error);
        }
    }

    /**
     * 加载全局变量
     */
    async loadGlobalVariables() {
        try {
            // 尝试从SillyTavern获取全局变量
            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();
                const extensionSettings = context.extensionSettings || {};

                // 从扩展设置中获取全局变量
                const globalVars = extensionSettings.variables || {};

                // 转换为我们的格式
                const variables = {};
                Object.entries(globalVars).forEach(([key, value]) => {
                    const detectedType = this.detectVariableType(value);
                    let processedValue = value;

                    // 如果检测到是JSON字符串，解析为对象
                    if (detectedType === 'object' || detectedType === 'array') {
                        if (typeof value === 'string' && this.isJsonString(value)) {
                            try {
                                processedValue = JSON.parse(value);
                            } catch (e) {
                                console.warn(`[VariableManager] JSON解析失败: ${key}`, e);
                                processedValue = value;
                            }
                        }
                    }

                    variables[key] = {
                        type: detectedType,
                        value: processedValue,
                        scope: 'global',
                        source: 'sillytavern',
                        created: new Date().toISOString()
                    };
                });

                return variables;
            } else {
                // 回退到配置管理器
                return await this.configManager.getConfig('globalVariables') || {};
            }
        } catch (error) {
            console.error('[VariableManager] ❌ 加载全局变量失败:', error);
            return {};
        }
    }

    /**
     * 加载聊天变量
     */
    async loadChatVariables() {
        try {
            // 尝试从SillyTavern获取聊天变量
            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();
                const chatMetadata = context.chatMetadata || {};

                // 从聊天元数据中获取变量
                const chatVars = chatMetadata.variables || {};

                // 转换为我们的格式
                const variables = {};
                Object.entries(chatVars).forEach(([key, value]) => {
                    const detectedType = this.detectVariableType(value);
                    let processedValue = value;

                    // 如果检测到是JSON字符串，解析为对象
                    if (detectedType === 'object' || detectedType === 'array') {
                        if (typeof value === 'string' && this.isJsonString(value)) {
                            try {
                                processedValue = JSON.parse(value);
                            } catch (e) {
                                console.warn(`[VariableManager] JSON解析失败: ${key}`, e);
                                processedValue = value;
                            }
                        }
                    }

                    variables[key] = {
                        type: detectedType,
                        value: processedValue,
                        scope: 'chat',
                        source: 'sillytavern',
                        created: new Date().toISOString()
                    };
                });

                return variables;
            } else {
                // 回退到配置管理器
                return await this.configManager.getConfig('chatVariables') || {};
            }
        } catch (error) {
            console.error('[VariableManager] ❌ 加载聊天变量失败:', error);
            return {};
        }
    }

    /**
     * 检测变量类型
     */
    detectVariableType(value) {
        if (value === null || value === undefined) {
            return 'null';
        }

        if (typeof value === 'string') {
            // 尝试检测JSON字符串
            if (this.isJsonString(value)) {
                try {
                    const parsed = JSON.parse(value);
                    if (Array.isArray(parsed)) {
                        return 'array';
                    } else if (typeof parsed === 'object' && parsed !== null) {
                        return 'object';
                    }
                } catch (e) {
                    // 解析失败，仍然是字符串
                }
            }
            return 'string';
        }

        if (typeof value === 'number') {
            return 'number';
        }

        if (typeof value === 'boolean') {
            return 'boolean';
        }

        if (Array.isArray(value)) {
            return 'array';
        }

        if (typeof value === 'object') {
            return 'object';
        }

        if (typeof value === 'function') {
            return 'function';
        }

        return 'unknown';
    }

    /**
     * 检测是否为JSON字符串
     */
    isJsonString(str) {
        if (typeof str !== 'string') {
            return false;
        }

        // 简单的JSON格式检测
        const trimmed = str.trim();
        return (trimmed.startsWith('{') && trimmed.endsWith('}')) ||
               (trimmed.startsWith('[') && trimmed.endsWith(']'));
    }

    /**
     * 渲染变量列表
     */
    renderVariableList() {
        const listContainer = document.querySelector('#variable-list');
        if (!listContainer) return;

        const variables = this.variables || {};
        const variableCount = Object.keys(variables).length;

        // 更新变量数量显示
        const countElement = document.querySelector('#variable-count');
        if (countElement) {
            countElement.textContent = variableCount;
        }

        if (variableCount === 0) {
            listContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fa fa-code fa-3x"></i>
                    <h3>暂无变量</h3>
                    <p>点击"添加变量"开始创建您的第一个变量</p>
                </div>
            `;
            return;
        }

        // 根据视图模式渲染
        if (this.currentViewMode === 'tree') {
            this.renderTreeView(listContainer, variables);
        } else {
            this.renderListView(listContainer, variables);
        }
    }

    /**
     * 渲染列表视图
     */
    renderListView(container, variables) {
        const variableItems = Object.entries(variables).map(([key, variable]) => {
            return this.createVariableItem(key, variable);
        }).join('');

        container.innerHTML = variableItems;
        container.className = 'variable-list list-view';

        // 渲染后再次应用变量管理器主题，确保动态节点继承
        try {
            const activeThemeCard = this.modal?.querySelector('.theme-preview-card.active');
            const themeId = activeThemeCard?.getAttribute('data-theme');
            const theme = themeId ? this.getThemeById(themeId) : null;
            if (theme) this.applyVariableManagerTheme(theme);
        } catch (e) {
            console.warn('[InfoBarSettings] ⚠️ 渲染后应用变量管理器主题失败:', e);
        }
    }

    /**
     * 渲染树状视图
     */
    renderTreeView(container, variables) {
        // 按类型分组变量
        const groupedVariables = this.groupVariablesByType(variables);

        let treeHTML = '';
        Object.entries(groupedVariables).forEach(([type, vars]) => {
            if (vars.length === 0) return;

            treeHTML += `
                <div class="tree-group">
                    <div class="tree-group-header" data-type="${type}">
                        <i class="fa fa-chevron-down tree-toggle"></i>
                        <i class="fa ${this.getTypeIcon(type)} type-icon"></i>
                        <span class="group-title">${this.getTypeDisplayName(type)}</span>
                        <span class="group-count">(${vars.length})</span>
                    </div>
                    <div class="tree-group-content">
                        ${vars.map(([key, variable]) => this.createTreeVariableItem(key, variable)).join('')}
                    </div>
                </div>
            `;
        });

        container.innerHTML = treeHTML;
        container.className = 'variable-list tree-view';

        // 绑定折叠/展开事件
        this.bindTreeEvents(container);
    }

    /**
     * 按类型分组变量
     */
    groupVariablesByType(variables) {
        const groups = {
            string: [],
            number: [],
            boolean: [],
            array: [],
            object: [],
            function: [],
            null: [],
            unknown: []
        };

        Object.entries(variables).forEach(([key, variable]) => {
            const type = variable.type || 'unknown';
            if (groups[type]) {
                groups[type].push([key, variable]);
            } else {
                groups.unknown.push([key, variable]);
            }
        });

        return groups;
    }

    /**
     * 获取类型图标
     */
    getTypeIcon(type) {
        const icons = {
            string: 'fa-quote-left',
            number: 'fa-calculator',
            boolean: 'fa-toggle-on',
            array: 'fa-list-ol',
            object: 'fa-cube',
            function: 'fa-code',
            null: 'fa-circle-o',
            unknown: 'fa-question'
        };
        return icons[type] || 'fa-question';
    }

    /**
     * 获取类型显示名称
     */
    getTypeDisplayName(type) {
        const names = {
            string: '字符串',
            number: '数字',
            boolean: '布尔值',
            array: '数组',
            object: '对象',
            function: '函数',
            null: '空值',
            unknown: '未知类型'
        };
        return names[type] || '未知类型';
    }

    /**
     * 创建树状变量项
     */
    createTreeVariableItem(key, variable) {
        const value = variable.value || '';
        const description = variable.description || '';

        return `
            <div class="tree-variable-item" data-variable-id="${key}">
                <div class="tree-variable-header">
                    <div class="tree-variable-info">
                        <span class="tree-variable-name">${key}</span>
                        ${variable.scope ? `<span class="variable-scope ${variable.scope}">${variable.scope === 'global' ? '全局' : '局部'}</span>` : ''}
                    </div>
                    <div class="tree-variable-actions">
                        <button class="btn-icon" data-action="edit-variable" title="编辑">
                            <i class="fa fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-danger" data-action="delete-variable" title="删除">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="tree-variable-content">
                    <div class="tree-variable-value">${this.formatVariableValue(value, variable.type)}</div>
                    ${description ? `<div class="tree-variable-description">${description}</div>` : ''}
                </div>
            </div>
        `;
    }

    /**
     * 绑定树状视图事件
     */
    bindTreeEvents(container) {
        container.addEventListener('click', (e) => {
            const groupHeader = e.target.closest('.tree-group-header');
            if (groupHeader) {
                const groupContent = groupHeader.nextElementSibling;
                const toggle = groupHeader.querySelector('.tree-toggle');

                if (groupContent.style.display === 'none') {
                    groupContent.style.display = 'block';
                    toggle.className = 'fa fa-chevron-down tree-toggle';
                } else {
                    groupContent.style.display = 'none';
                    toggle.className = 'fa fa-chevron-right tree-toggle';
                }
            }
        });
    }

    /**
     * 创建变量项HTML
     */
    createVariableItem(key, variable) {
        const type = variable.type || 'string';
        const value = variable.value || '';
        const description = variable.description || '';
        const isGlobal = variable.global || false;

        // 为数组和对象类型添加特殊操作按钮
        let specialActions = '';
        if (type === 'array') {
            specialActions = `
                <button class="btn-icon btn-special" data-action="add-array-item" data-variable-id="${key}" title="添加数组项">
                    <i class="fa fa-plus"></i>
                </button>
            `;
        } else if (type === 'object') {
            specialActions = `
                <button class="btn-icon btn-special" data-action="add-object-property" data-variable-id="${key}" title="添加属性">
                    <i class="fa fa-plus"></i>
                </button>
            `;
        }

        return `
            <div class="variable-item" data-variable-id="${key}" data-variable-type="${type}">
                <div class="variable-header">
                    <div class="variable-info">
                        <span class="variable-name">${key}</span>
                        <span class="variable-type ${type}">${type}</span>
                        ${isGlobal ? '<span class="variable-scope global">全局</span>' : '<span class="variable-scope local">局部</span>'}
                        ${specialActions}
                    </div>
                    <div class="variable-actions">
                        <button class="btn-icon" data-action="edit-variable" title="编辑">
                            <i class="fa fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-danger" data-action="delete-variable" title="删除">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="variable-content">
                    <div class="variable-value">${this.formatVariableValue(value, type)}</div>
                    ${description ? `<div class="variable-description">${description}</div>` : ''}
                    ${this.createVariableContentActions(key, type, value)}
                </div>
            </div>
        `;
    }

    /**
     * 创建变量内容操作区域
     */
    createVariableContentActions(key, type, value) {
        if (type === 'array' && Array.isArray(value)) {
            return `
                <div class="variable-content-actions">
                    <div class="array-items">
                        ${value.map((item, index) => this.createArrayItemElement(key, item, index)).join('')}
                    </div>
                    <button class="btn-add-item" data-action="add-array-item" data-variable-id="${key}">
                        <i class="fa fa-plus"></i> 添加项
                    </button>
                </div>
            `;
        } else if (type === 'object' && typeof value === 'object' && value !== null) {
            return `
                <div class="variable-content-actions">
                    <div class="object-properties">
                        ${Object.entries(value).map(([propKey, propValue]) =>
                            this.createObjectPropertyElement(key, propKey, propValue, 0)
                        ).join('')}
                    </div>
                    <button class="btn-add-item" data-action="add-object-property" data-variable-id="${key}">
                        <i class="fa fa-plus"></i> 添加属性
                    </button>
                </div>
            `;
        }
        return '';
    }

    /**
     * 创建数组项元素
     */
    createArrayItemElement(variableId, item, index, level = 0) {
        let content = '';

        if (Array.isArray(item)) {
            content = `
                <div class="array-item nested-array" data-index="${index}" style="margin-left: ${level * 20}px;">
                    <span class="array-index">[${index}]</span>
                    <span class="array-type-indicator">[数组:${item.length}项]</span>
                    <button class="btn-icon-small btn-success" data-action="add-nested-array-item" data-variable-id="${variableId}" data-path="${index}" title="添加子项">
                        <i class="fa fa-plus"></i>
                    </button>
                    <button class="btn-icon-small btn-primary" data-action="edit-nested-array" data-variable-id="${variableId}" data-index="${index}" data-level="${level}" title="编辑数组">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="remove-nested-array-item" data-index="${index}" data-variable-id="${variableId}" data-level="${level}" title="删除项">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="nested-items">
                    ${item.map((subItem, subIndex) =>
                        this.createArrayItemElement(variableId, subItem, subIndex, level + 1)
                    ).join('')}
                </div>
            `;
        } else if (typeof item === 'object' && item !== null) {
            content = `
                <div class="array-item nested-object" data-index="${index}" style="margin-left: ${level * 20}px;">
                    <span class="array-index">[${index}]</span>
                    <span class="array-type-indicator">{对象:${Object.keys(item).length}键}</span>
                    <button class="btn-icon-small btn-success" data-action="add-nested-object-property" data-variable-id="${variableId}" data-path="${index}" title="添加属性">
                        <i class="fa fa-plus"></i>
                    </button>
                    <button class="btn-icon-small btn-primary" data-action="edit-nested-object" data-variable-id="${variableId}" data-index="${index}" data-level="${level}" title="编辑对象">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="remove-nested-array-item" data-index="${index}" data-variable-id="${variableId}" data-level="${level}" title="删除项">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="nested-items">
                    ${Object.entries(item).map(([propKey, propValue]) =>
                        this.createObjectPropertyElement(variableId, propKey, propValue, level + 1, `${index}.${propKey}`)
                    ).join('')}
                </div>
            `;
        } else {
            content = `
                <div class="array-item" data-index="${index}" style="margin-left: ${level * 20}px;">
                    <span class="array-index">[${index}]</span>
                    <span class="array-value">${this.formatArrayItemValue(item)}</span>
                    <button class="btn-icon-small btn-primary" data-action="edit-array-item" data-variable-id="${variableId}" data-index="${index}" data-level="${level}" title="编辑项">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="${level > 0 ? 'remove-nested-array-item' : 'remove-array-item'}" data-index="${index}" data-variable-id="${variableId}" data-level="${level}" title="删除项">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            `;
        }

        return content;
    }

    /**
     * 创建对象属性元素
     */
    createObjectPropertyElement(variableId, propKey, propValue, level = 0, path = '') {
        const fullPath = path ? `${path}` : propKey;
        let content = '';

        if (Array.isArray(propValue)) {
            content = `
                <div class="object-property nested-array" data-key="${propKey}" style="margin-left: ${level * 20}px;">
                    <span class="property-key">${propKey}:</span>
                    <span class="property-type-indicator">[数组:${propValue.length}项]</span>
                    <button class="btn-icon-small btn-success" data-action="add-nested-array-item" data-variable-id="${variableId}" data-path="${fullPath}" title="添加子项">
                        <i class="fa fa-plus"></i>
                    </button>
                    <button class="btn-icon-small btn-primary" data-action="edit-nested-property-array" data-variable-id="${variableId}" data-key="${propKey}" data-path="${fullPath}" data-level="${level}" title="编辑数组">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="remove-nested-object-property" data-key="${propKey}" data-variable-id="${variableId}" data-path="${fullPath}" data-level="${level}" title="删除属性">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="nested-items">
                    ${propValue.map((item, index) =>
                        this.createArrayItemElement(variableId, item, index, level + 1)
                    ).join('')}
                </div>
            `;
        } else if (typeof propValue === 'object' && propValue !== null) {
            content = `
                <div class="object-property nested-object" data-key="${propKey}" style="margin-left: ${level * 20}px;">
                    <span class="property-key">${propKey}:</span>
                    <span class="property-type-indicator">{对象:${Object.keys(propValue).length}键}</span>
                    <button class="btn-icon-small btn-success" data-action="add-nested-object-property" data-variable-id="${variableId}" data-path="${fullPath}" title="添加属性">
                        <i class="fa fa-plus"></i>
                    </button>
                    <button class="btn-icon-small btn-primary" data-action="edit-nested-property-object" data-variable-id="${variableId}" data-key="${propKey}" data-path="${fullPath}" data-level="${level}" title="编辑对象">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="remove-nested-object-property" data-key="${propKey}" data-variable-id="${variableId}" data-path="${fullPath}" data-level="${level}" title="删除属性">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
                <div class="nested-items">
                    ${Object.entries(propValue).map(([subKey, subValue]) =>
                        this.createObjectPropertyElement(variableId, subKey, subValue, level + 1, `${fullPath}.${subKey}`)
                    ).join('')}
                </div>
            `;
        } else {
            content = `
                <div class="object-property" data-key="${propKey}" style="margin-left: ${level * 20}px;">
                    <span class="property-key">${propKey}:</span>
                    <span class="property-value">${this.formatArrayItemValue(propValue)}</span>
                    <button class="btn-icon-small btn-primary" data-action="edit-object-property" data-variable-id="${variableId}" data-key="${propKey}" data-path="${path}" data-level="${level}" title="编辑属性">
                        <i class="fa fa-edit"></i>
                    </button>
                    <button class="btn-icon-small btn-danger" data-action="${level > 0 ? 'remove-nested-object-property' : 'remove-object-property'}" data-key="${propKey}" data-variable-id="${variableId}" data-path="${path}" data-level="${level}" title="删除属性">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            `;
        }

        return content;
    }

    /**
     * 格式化数组项值
     */
    formatArrayItemValue(value) {
        if (value === null || value === undefined) {
            return '<span class="null-value">null</span>';
        }
        if (typeof value === 'string') {
            return `"${value}"`;
        }
        if (typeof value === 'object') {
            return Array.isArray(value) ? `[数组:${value.length}项]` : `{对象:${Object.keys(value).length}键}`;
        }
        return String(value);
    }

    /**
     * 格式化变量值显示
     */
    formatVariableValue(value, type) {
        if (value === null || value === undefined) {
            return '<span class="null-value">null</span>';
        }

        switch (type) {
            case 'string':
                return `"${value}"`;
            case 'number':
                return value.toString();
            case 'boolean':
                return value ? 'true' : 'false';
            case 'array':
                return Array.isArray(value) ? `[${value.length} 项]` : '[]';
            case 'object':
                return typeof value === 'object' ? `{${Object.keys(value).length} 键}` : '{}';
            case 'function':
                return '<span class="function-value">function</span>';
            default:
                return value.toString();
        }
    }

    /**
     * 添加新变量
     */
    addNewVariable() {
        this.showVariableEditDialog();
    }

    /**
     * 显示变量编辑对话框
     */
    showVariableEditDialog(existingVariable = null, variableKey = null) {
        const isEdit = !!existingVariable;
        const typeSelect = document.querySelector('#variable-type-select');
        const selectedType = typeSelect ? typeSelect.value : 'string';

        // 创建编辑对话框
        const dialog = document.createElement('div');
        dialog.className = 'variable-edit-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.variable-edit-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>${isEdit ? '编辑变量' : '添加变量'}</h3>
                    <button class="dialog-close" onclick="this.closest('.variable-edit-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>变量名</label>
                        <input type="text" id="variable-name" value="${existingVariable?.name || variableKey || ''}" ${isEdit ? 'readonly' : ''}>
                    </div>
                    <div class="form-group">
                        <label>变量类型</label>
                        <select id="variable-type" ${isEdit ? 'disabled' : ''}>
                            <option value="string" ${(existingVariable?.type || selectedType) === 'string' ? 'selected' : ''}>字符串</option>
                            <option value="number" ${(existingVariable?.type || selectedType) === 'number' ? 'selected' : ''}>数字</option>
                            <option value="boolean" ${(existingVariable?.type || selectedType) === 'boolean' ? 'selected' : ''}>布尔值</option>
                            <option value="array" ${(existingVariable?.type || selectedType) === 'array' ? 'selected' : ''}>数组</option>
                            <option value="object" ${(existingVariable?.type || selectedType) === 'object' ? 'selected' : ''}>对象</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>变量值</label>
                        <textarea id="variable-value" rows="4" placeholder="请输入变量值...">${this.formatValueForEdit(existingVariable?.value, existingVariable?.type)}</textarea>
                        <div class="value-hint" id="value-hint">
                            ${this.getValueHint(existingVariable?.type || selectedType)}
                        </div>
                    </div>
                    <div class="form-group">
                        <label>作用域</label>
                        <div class="scope-info">
                            <i class="fa ${this.currentVariableScope === 'global' ? 'fa-globe' : 'fa-comments'}"></i>
                            ${this.currentVariableScope === 'global' ? '全局变量' : '聊天变量'}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.variable-edit-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-variable-dialog" data-is-edit="${isEdit}" data-variable-key="${variableKey || ''}">${isEdit ? '保存' : '添加'}</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件 - 使用箭头函数保持this上下文
        const self = this;
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-variable-dialog') {
                const isEdit = actionElement.dataset.isEdit === 'true';
                const variableKey = actionElement.dataset.variableKey || '';
                console.log('[VariableManager] 🔘 对话框保存按钮被点击');
                self.saveVariableFromDialog(actionElement, isEdit, variableKey);
            }
        });

        // 绑定类型变更事件
        const typeSelectElement = dialog.querySelector('#variable-type');
        const valueHint = dialog.querySelector('#value-hint');

        typeSelectElement.addEventListener('change', (e) => {
            valueHint.textContent = this.getValueHint(e.target.value);
        });

        // 聚焦到名称输入框
        setTimeout(() => {
            const nameInput = dialog.querySelector('#variable-name');
            if (nameInput && !isEdit) {
                nameInput.focus();
            }
        }, 100);
    }

    /**
     * 格式化值用于编辑
     */
    formatValueForEdit(value, type) {
        if (value === null || value === undefined) {
            return '';
        }

        if (type === 'array' || type === 'object') {
            try {
                return JSON.stringify(value, null, 2);
            } catch (e) {
                return String(value);
            }
        }

        return String(value);
    }

    /**
     * 获取值提示
     */
    getValueHint(type) {
        switch (type) {
            case 'string':
                return '输入文本内容，例如：Hello World';
            case 'number':
                return '输入数字，例如：42 或 3.14';
            case 'boolean':
                return '输入 true 或 false';
            case 'array':
                return '输入JSON数组，例如：["item1", "item2", "item3"]';
            case 'object':
                return '输入JSON对象，例如：{"key1": "value1", "key2": "value2"}';
            default:
                return '';
        }
    }

    /**
     * 从对话框保存变量
     */
    async saveVariableFromDialog(button, isEdit, existingKey) {
        try {
            const dialog = button.closest('.variable-edit-dialog');
            const name = dialog.querySelector('#variable-name').value.trim();
            const type = dialog.querySelector('#variable-type').value;
            const valueText = dialog.querySelector('#variable-value').value.trim();

            if (!name) {
                alert('请输入变量名');
                return;
            }

            // 解析值
            let value;
            try {
                value = this.parseVariableValue(valueText, type);
            } catch (e) {
                alert('变量值格式错误: ' + e.message);
                return;
            }

            // 保存变量
            await this.saveVariableToSillyTavern(name, value, type, isEdit, existingKey);

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.loadVariables();

            console.log('[VariableManager] ✅', isEdit ? '编辑' : '添加', '变量:', name);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存变量失败:', error);
            alert('保存变量失败: ' + error.message);
        }
    }

    /**
     * 解析变量值
     */
    parseVariableValue(valueText, type) {
        if (!valueText) {
            switch (type) {
                case 'string': return '';
                case 'number': return 0;
                case 'boolean': return false;
                case 'array': return [];
                case 'object': return {};
                default: return '';
            }
        }

        switch (type) {
            case 'string':
                return valueText;
            case 'number':
                const num = Number(valueText);
                if (isNaN(num)) {
                    throw new Error('无效的数字格式');
                }
                return num;
            case 'boolean':
                const lower = valueText.toLowerCase();
                if (lower === 'true') return true;
                if (lower === 'false') return false;
                throw new Error('布尔值必须是 true 或 false');
            case 'array':
            case 'object':
                try {
                    const parsed = JSON.parse(valueText);
                    if (type === 'array' && !Array.isArray(parsed)) {
                        throw new Error('必须是有效的JSON数组');
                    }
                    if (type === 'object' && (Array.isArray(parsed) || typeof parsed !== 'object')) {
                        throw new Error('必须是有效的JSON对象');
                    }
                    return parsed;
                } catch (e) {
                    throw new Error('无效的JSON格式: ' + e.message);
                }
            default:
                return valueText;
        }
    }

    /**
     * 保存变量到SillyTavern
     */
    async saveVariableToSillyTavern(name, value, type, isEdit, existingKey) {
        try {
            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();

                if (this.currentVariableScope === 'global') {
                    // 保存全局变量
                    const extensionSettings = context.extensionSettings || {};
                    if (!extensionSettings.variables) {
                        extensionSettings.variables = {};
                    }

                    // 如果是编辑且键名改变，删除旧键
                    if (isEdit && existingKey && existingKey !== name) {
                        delete extensionSettings.variables[existingKey];
                    }

                    extensionSettings.variables[name] = value;

                    // 保存设置
                    if (context.saveSettingsDebounced) {
                        context.saveSettingsDebounced();
                    }
                } else {
                    // 保存聊天变量
                    const chatMetadata = context.chatMetadata || {};
                    if (!chatMetadata.variables) {
                        chatMetadata.variables = {};
                    }

                    // 如果是编辑且键名改变，删除旧键
                    if (isEdit && existingKey && existingKey !== name) {
                        delete chatMetadata.variables[existingKey];
                    }

                    chatMetadata.variables[name] = value;

                    // 保存元数据
                    if (context.saveMetadata) {
                        await context.saveMetadata();
                    }
                }

                console.log('[VariableManager] ✅ 变量已保存到SillyTavern:', name);
            } else {
                // 回退到配置管理器
                const configKey = this.currentVariableScope === 'global' ? 'globalVariables' : 'chatVariables';
                const variables = await this.configManager.getConfig(configKey) || {};

                if (isEdit && existingKey && existingKey !== name) {
                    delete variables[existingKey];
                }

                variables[name] = {
                    type: type,
                    value: value,
                    scope: this.currentVariableScope,
                    created: new Date().toISOString()
                };

                await this.configManager.setConfig(configKey, variables);
                console.log('[VariableManager] ✅ 变量已保存到配置管理器:', name);
            }
        } catch (error) {
            console.error('[VariableManager] ❌ 保存变量失败:', error);
            throw error;
        }
    }

    /**
     * 保存变量
     */
    async saveVariables() {
        try {
            await this.configManager.setConfig('variables', this.variables || {});
            this.showMessage('变量保存成功', 'success');
            console.log('[VariableManager] ✅ 变量保存成功');
        } catch (error) {
            console.error('[VariableManager] ❌ 保存变量失败:', error);
            this.showMessage('保存变量失败: ' + error.message, 'error');
        }
    }

    /**
     * 清空当前作用域变量（全局/聊天）
     */
    async clearCurrentScopeVariables() {
        try {
            const scope = this.currentVariableScope || 'global';
            const confirmed = confirm(`确定要清空${scope === 'global' ? '【全局变量】' : '【聊天变量】'}内的所有变量吗？此操作不可撤销。`);
            if (!confirmed) return;

            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();
                if (scope === 'global') {
                    // 清空扩展设置中的全局变量
                    const extensionSettings = context.extensionSettings || {};
                    extensionSettings.variables = {};
                    await context.saveSettingsDebounced?.();
                    console.log('[VariableManager] 🗑️ 已清空全局变量');
                } else {
                    // 清空当前聊天的变量（保存在configManager中）
                    const configKey = `chat_${context?.chat?.public_id || 'current'}_variables`;
                    await this.configManager.setConfig(configKey, {});
                    console.log('[VariableManager] 🗑️ 已清空聊天变量:', configKey);
                }
            } else {
                // 兜底：仅清空内存变量并保存到配置管理器
                if (scope === 'global') {
                    await this.configManager.setConfig('variables', {});
                } else {
                    const context = (window.SillyTavern && window.SillyTavern.getContext) ? window.SillyTavern.getContext() : null;
                    const configKey = `chat_${context?.chat?.public_id || 'current'}_variables`;
                    await this.configManager.setConfig(configKey, {});
                }
            }

            // 刷新内存与UI
            this.variables = {};
            this.renderVariableList();
            this.showMessage('变量已清空', 'success');
        } catch (error) {
            console.error('[VariableManager] ❌ 清空变量失败:', error);
            this.showMessage('清空变量失败: ' + error.message, 'error');
        }
    }
    /**
     * 清空当前作用域变量（全局/聊天）
     */
    async clearCurrentScopeVariables() {
        try {
            const scope = this.currentVariableScope || 'global';
            const confirmed = confirm(`确定要清空${scope === 'global' ? '【全局变量】' : '【聊天变量】'}内的所有变量吗？此操作不可撤销。`);
            if (!confirmed) return;

            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();
                if (scope === 'global') {
                    // 清空扩展设置中的全局变量
                    const extensionSettings = context.extensionSettings || {};
                    extensionSettings.variables = {};
                    await context.saveSettingsDebounced?.();
                    console.log('[VariableManager] 🗑️ 已清空全局变量');
                } else {
                    // 清空当前聊天的变量（保存在configManager中）
                    const configKey = `chat_${context?.chat?.public_id || 'current'}_variables`;
                    await this.configManager.setConfig(configKey, {});
                    console.log('[VariableManager] 🗑️ 已清空聊天变量:', configKey);
                }
            } else {
                // 兜底：仅清空内存变量并保存到配置管理器
                if (scope === 'global') {
                    await this.configManager.setConfig('variables', {});
                } else {
                    const context = (window.SillyTavern && window.SillyTavern.getContext) ? window.SillyTavern.getContext() : null;
                    const configKey = `chat_${context?.chat?.public_id || 'current'}_variables`;
                    await this.configManager.setConfig(configKey, {});
                }
            }

            // 刷新内存与UI
            this.variables = {};
            this.renderVariableList();
            this.showMessage('变量已清空', 'success');
        } catch (error) {
            console.error('[VariableManager] ❌ 清空变量失败:', error);
            this.showMessage('清空变量失败: ' + error.message, 'error');
        }
    }

    /**
     * 过滤变量
     */
    filterVariables(searchTerm) {
        const variableItems = document.querySelectorAll('.variable-item');
        const term = searchTerm.toLowerCase();

        variableItems.forEach(item => {
            const name = item.querySelector('.variable-name').textContent.toLowerCase();
            const description = item.querySelector('.variable-description')?.textContent?.toLowerCase() || '';

            if (name.includes(term) || description.includes(term)) {
                item.style.display = 'block';
            } else {
                item.style.display = 'none';
            }
        });
    }

    /**
     * 编辑变量
     */
    editVariable(variableId) {
        const variable = this.variables[variableId];
        if (!variable) return;

        // 显示编辑对话框
        this.showVariableEditDialog(variable, variableId);
    }

    /**
     * 删除变量
     */
    async deleteVariable(variableId) {
        if (!confirm(`确定要删除变量 "${variableId}" 吗？`)) return;

        try {
            // 从SillyTavern删除变量
            await this.deleteVariableFromSillyTavern(variableId);

            // 重新加载变量列表
            this.loadVariables();

            console.log('[VariableManager] ✅ 删除变量:', variableId);
        } catch (error) {
            console.error('[VariableManager] ❌ 删除变量失败:', error);
            alert('删除变量失败: ' + error.message);
        }
    }

    /**
     * 从SillyTavern删除变量
     */
    async deleteVariableFromSillyTavern(variableId) {
        try {
            if (window.SillyTavern && window.SillyTavern.getContext) {
                const context = window.SillyTavern.getContext();

                if (this.currentVariableScope === 'global') {
                    // 删除全局变量
                    const extensionSettings = context.extensionSettings || {};
                    if (extensionSettings.variables) {
                        delete extensionSettings.variables[variableId];

                        // 保存设置
                        if (context.saveSettingsDebounced) {
                            context.saveSettingsDebounced();
                        }
                    }
                } else {
                    // 删除聊天变量
                    const chatMetadata = context.chatMetadata || {};
                    if (chatMetadata.variables) {
                        delete chatMetadata.variables[variableId];

                        // 保存元数据
                        if (context.saveMetadata) {
                            await context.saveMetadata();
                        }
                    }
                }
            } else {
                // 回退到配置管理器
                const configKey = this.currentVariableScope === 'global' ? 'globalVariables' : 'chatVariables';
                const variables = await this.configManager.getConfig(configKey) || {};
                delete variables[variableId];
                await this.configManager.setConfig(configKey, variables);
            }
        } catch (error) {
            console.error('[VariableManager] ❌ 从SillyTavern删除变量失败:', error);
            throw error;
        }
    }

    /**
     * 导出变量
     */
    exportVariables() {
        try {
            const data = {
                variables: this.variables || {},
                exported: new Date().toISOString(),
                version: '1.0.0'
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `variables_${new Date().toISOString().slice(0, 10)}.json`;
            a.click();

            URL.revokeObjectURL(url);

            this.showMessage('变量导出成功', 'success');
            console.log('[VariableManager] ✅ 变量导出成功');
        } catch (error) {
            console.error('[VariableManager] ❌ 导出变量失败:', error);
            this.showMessage('导出变量失败: ' + error.message, 'error');
        }
    }

    /**
     * 导入变量
     */
    importVariables() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';

        input.onchange = async (e) => {
            try {
                const file = e.target.files[0];
                if (!file) return;

                const text = await file.text();
                const data = JSON.parse(text);

                if (data.variables) {
                    // 合并变量（可以选择覆盖或跳过重复）
                    const shouldOverwrite = confirm('是否覆盖同名变量？点击"确定"覆盖，"取消"跳过。');

                    Object.entries(data.variables).forEach(([key, variable]) => {
                        if (!this.variables[key] || shouldOverwrite) {
                            this.variables[key] = variable;
                        }
                    });

                    this.renderVariableList();
                    this.showMessage('变量导入成功', 'success');
                    console.log('[VariableManager] ✅ 变量导入成功');
                } else {
                    throw new Error('无效的变量文件格式');
                }
            } catch (error) {
                console.error('[VariableManager] ❌ 导入变量失败:', error);
                this.showMessage('导入变量失败: ' + error.message, 'error');
            }
        };

        input.click();
    }

    /**
     * 添加数组项
     */
    async addArrayItem(variableId) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'array') {
                console.error('[VariableManager] 变量不是数组类型:', variableId);
                return;
            }

            // 显示简化的数组项添加对话框
            this.showArrayItemDialog(variableId);

        } catch (error) {
            console.error('[VariableManager] ❌ 添加数组项失败:', error);
            alert('添加数组项失败: ' + error.message);
        }
    }

    /**
     * 显示数组项添加对话框
     */
    showArrayItemDialog(variableId, existingIndex = null, existingValue = null) {
        const isEdit = existingIndex !== null;

        // 创建简化的数组项对话框
        const dialog = document.createElement('div');
        dialog.className = 'array-item-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.array-item-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>${isEdit ? '编辑数组项' : '添加数组项'}</h3>
                    <button class="dialog-close" onclick="this.closest('.array-item-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>数组项值</label>
                        <textarea id="array-item-value" rows="3" placeholder="请输入数组项值...">${existingValue || ''}</textarea>
                        <div class="value-hint">
                            支持文本、数字、JSON对象等格式
                        </div>
                    </div>
                    <div class="form-group">
                        <label>所属数组</label>
                        <div class="scope-info">
                            <i class="fa fa-list"></i>
                            ${variableId}${isEdit ? ` [${existingIndex}]` : ''}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.array-item-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-array-item" data-variable-id="${variableId}" data-is-edit="${isEdit}" data-index="${existingIndex || ''}">${isEdit ? '保存' : '添加'}</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-array-item') {
                const variableId = actionElement.dataset.variableId;
                const isEdit = actionElement.dataset.isEdit === 'true';
                const index = actionElement.dataset.index || null;
                this.saveArrayItemFromDialog(actionElement, variableId, isEdit, index);
            }
        });

        // 聚焦到值输入框
        setTimeout(() => {
            const valueInput = dialog.querySelector('#array-item-value');
            if (valueInput) {
                valueInput.focus();
                valueInput.select();
            }
        }, 100);
    }

    /**
     * 从对话框保存数组项
     */
    async saveArrayItemFromDialog(button, variableId, isEdit, index) {
        try {
            const dialog = button.closest('.array-item-dialog');
            const valueText = dialog.querySelector('#array-item-value').value.trim();

            if (!valueText) {
                alert('请输入数组项值');
                return;
            }

            // 解析值
            let value;
            try {
                // 尝试解析为JSON，如果失败则作为字符串
                value = JSON.parse(valueText);
            } catch (e) {
                value = valueText;
            }

            // 保存数组项
            await this.saveArrayItemToVariable(variableId, value, isEdit, index);

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅', isEdit ? '编辑' : '添加', '数组项:', value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存数组项失败:', error);
            alert('保存数组项失败: ' + error.message);
        }
    }

    /**
     * 保存数组项到变量
     */
    async saveArrayItemToVariable(variableId, value, isEdit, index) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'array') {
                throw new Error('变量不是数组类型');
            }

            // 确保变量值是数组
            if (!Array.isArray(variable.value)) {
                variable.value = [];
            }

            if (isEdit && index !== null) {
                // 编辑现有项
                variable.value[parseInt(index)] = value;
            } else {
                // 添加新项
                variable.value.push(value);
            }

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            console.log('[VariableManager] ✅ 数组项已保存:', variableId, value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存数组项到变量失败:', error);
            throw error;
        }
    }

    /**
     * 删除数组项
     */
    async removeArrayItem(variableId, index) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'array' || !Array.isArray(variable.value)) {
                console.error('[VariableManager] 变量不是数组类型:', variableId);
                return;
            }

            if (!confirm(`确定要删除数组项 [${index}] 吗？`)) return;

            // 删除数组项
            variable.value.splice(index, 1);

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            // 重新渲染
            this.renderVariableList();

            console.log('[VariableManager] ✅ 删除数组项:', variableId, index);
        } catch (error) {
            console.error('[VariableManager] ❌ 删除数组项失败:', error);
            alert('删除数组项失败: ' + error.message);
        }
    }

    /**
     * 添加对象属性
     */
    async addObjectProperty(variableId) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'object') {
                console.error('[VariableManager] 变量不是对象类型:', variableId);
                return;
            }

            // 显示添加属性对话框
            this.showObjectPropertyDialog(variableId);

        } catch (error) {
            console.error('[VariableManager] ❌ 添加对象属性失败:', error);
            alert('添加对象属性失败: ' + error.message);
        }
    }

    /**
     * 显示对象属性编辑对话框
     */
    showObjectPropertyDialog(variableId, existingKey = null, existingProperty = null) {
        const isEdit = !!existingProperty;

        // 创建属性编辑对话框
        const dialog = document.createElement('div');
        dialog.className = 'object-property-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.object-property-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>${isEdit ? '编辑属性' : '添加属性'}</h3>
                    <button class="dialog-close" onclick="this.closest('.object-property-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>属性名</label>
                        <input type="text" id="property-name" value="${existingKey || ''}" ${isEdit ? 'readonly' : ''} placeholder="请输入属性名">
                    </div>
                    <div class="form-group">
                        <label>属性类型</label>
                        <select id="property-type">
                            <option value="string" ${(existingProperty?.type || 'string') === 'string' ? 'selected' : ''}>字符串</option>
                            <option value="number" ${(existingProperty?.type || 'string') === 'number' ? 'selected' : ''}>数字</option>
                            <option value="boolean" ${(existingProperty?.type || 'string') === 'boolean' ? 'selected' : ''}>布尔值</option>
                            <option value="array" ${(existingProperty?.type || 'string') === 'array' ? 'selected' : ''}>数组</option>
                            <option value="object" ${(existingProperty?.type || 'string') === 'object' ? 'selected' : ''}>对象</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>属性值</label>
                        <textarea id="property-value" rows="4" placeholder="请输入属性值...">${this.formatValueForEdit(existingProperty?.value, existingProperty?.type)}</textarea>
                        <div class="value-hint" id="property-value-hint">
                            ${this.getValueHint(existingProperty?.type || 'string')}
                        </div>
                    </div>
                    <div class="form-group">
                        <label>所属对象</label>
                        <div class="scope-info">
                            <i class="fa fa-cube"></i>
                            ${variableId}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.object-property-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-object-property" data-variable-id="${variableId}" data-is-edit="${isEdit}" data-existing-key="${existingKey || ''}">${isEdit ? '保存' : '添加'}</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-object-property') {
                const variableId = actionElement.dataset.variableId;
                const isEdit = actionElement.dataset.isEdit === 'true';
                const existingKey = actionElement.dataset.existingKey || '';
                this.saveObjectPropertyFromDialog(actionElement, variableId, isEdit, existingKey);
            }
        });

        // 绑定类型变更事件
        const typeSelectElement = dialog.querySelector('#property-type');
        const valueHint = dialog.querySelector('#property-value-hint');

        typeSelectElement.addEventListener('change', (e) => {
            valueHint.textContent = this.getValueHint(e.target.value);
        });

        // 聚焦到名称输入框
        setTimeout(() => {
            const nameInput = dialog.querySelector('#property-name');
            if (nameInput && !isEdit) {
                nameInput.focus();
            }
        }, 100);
    }

    /**
     * 从对话框保存对象属性
     */
    async saveObjectPropertyFromDialog(button, variableId, isEdit, existingKey) {
        try {
            const dialog = button.closest('.object-property-dialog');
            const name = dialog.querySelector('#property-name').value.trim();
            const type = dialog.querySelector('#property-type').value;
            const valueText = dialog.querySelector('#property-value').value.trim();

            if (!name) {
                alert('请输入属性名');
                return;
            }

            // 解析值
            let value;
            try {
                value = this.parseVariableValue(valueText, type);
            } catch (e) {
                alert('属性值格式错误: ' + e.message);
                return;
            }

            // 保存属性
            await this.saveObjectPropertyToVariable(variableId, name, value, isEdit, existingKey);

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅', isEdit ? '编辑' : '添加', '对象属性:', name);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存对象属性失败:', error);
            alert('保存对象属性失败: ' + error.message);
        }
    }

    /**
     * 保存对象属性到变量
     */
    async saveObjectPropertyToVariable(variableId, propertyName, propertyValue, isEdit, existingKey) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'object') {
                throw new Error('变量不是对象类型');
            }

            // 确保变量值是对象
            if (typeof variable.value !== 'object' || variable.value === null) {
                variable.value = {};
            }

            // 如果是编辑且键名改变，删除旧键
            if (isEdit && existingKey && existingKey !== propertyName) {
                delete variable.value[existingKey];
            }

            // 设置新值
            variable.value[propertyName] = propertyValue;

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            console.log('[VariableManager] ✅ 对象属性已保存:', variableId, propertyName, propertyValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存对象属性到变量失败:', error);
            throw error;
        }
    }

    /**
     * 删除对象属性
     */
    async removeObjectProperty(variableId, propertyKey) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'object' || typeof variable.value !== 'object') {
                console.error('[VariableManager] 变量不是对象类型:', variableId);
                return;
            }

            if (!confirm(`确定要删除属性 "${propertyKey}" 吗？`)) return;

            // 删除属性
            delete variable.value[propertyKey];

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            // 重新渲染
            this.renderVariableList();

            console.log('[VariableManager] ✅ 删除对象属性:', variableId, propertyKey);
        } catch (error) {
            console.error('[VariableManager] ❌ 删除对象属性失败:', error);
            alert('删除对象属性失败: ' + error.message);
        }
    }

    /**
     * 添加嵌套数组项
     */
    async addNestedArrayItem(variableId, path) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 显示嵌套数组项添加对话框
            this.showNestedArrayItemDialog(variableId, path);

        } catch (error) {
            console.error('[VariableManager] ❌ 添加嵌套数组项失败:', error);
            alert('添加嵌套数组项失败: ' + error.message);
        }
    }

    /**
     * 显示嵌套数组项添加对话框
     */
    showNestedArrayItemDialog(variableId, path, existingIndex = null, existingValue = null) {
        const isEdit = existingIndex !== null;

        // 创建嵌套数组项对话框
        const dialog = document.createElement('div');
        dialog.className = 'array-item-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.array-item-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>${isEdit ? '编辑嵌套数组项' : '添加嵌套数组项'}</h3>
                    <button class="dialog-close" onclick="this.closest('.array-item-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>数组项值</label>
                        <textarea id="array-item-value" rows="3" placeholder="请输入数组项值...">${existingValue || ''}</textarea>
                        <div class="value-hint">
                            支持文本、数字、JSON对象等格式
                        </div>
                    </div>
                    <div class="form-group">
                        <label>嵌套路径</label>
                        <div class="scope-info">
                            <i class="fa fa-sitemap"></i>
                            ${variableId} → ${path}${isEdit ? ` [${existingIndex}]` : ''}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.array-item-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-nested-array-item" data-variable-id="${variableId}" data-path="${path}" data-is-edit="${isEdit}" data-index="${existingIndex || ''}">${isEdit ? '保存' : '添加'}</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-nested-array-item') {
                const variableId = actionElement.dataset.variableId;
                const path = actionElement.dataset.path;
                const isEdit = actionElement.dataset.isEdit === 'true';
                const index = actionElement.dataset.index || null;
                this.saveNestedArrayItemFromDialog(actionElement, variableId, path, isEdit, index);
            }
        });

        // 聚焦到值输入框
        setTimeout(() => {
            const valueInput = dialog.querySelector('#array-item-value');
            if (valueInput) {
                valueInput.focus();
                valueInput.select();
            }
        }, 100);
    }

    /**
     * 从对话框保存嵌套数组项
     */
    async saveNestedArrayItemFromDialog(button, variableId, path, isEdit, index) {
        try {
            const dialog = button.closest('.array-item-dialog');
            const valueText = dialog.querySelector('#array-item-value').value.trim();

            if (!valueText) {
                alert('请输入数组项值');
                return;
            }

            // 解析值
            let value;
            try {
                value = JSON.parse(valueText);
            } catch (e) {
                value = valueText;
            }

            // 保存嵌套数组项
            await this.saveNestedArrayItemToVariable(variableId, path, value, isEdit, index);

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅', isEdit ? '编辑' : '添加', '嵌套数组项:', value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套数组项失败:', error);
            alert('保存嵌套数组项失败: ' + error.message);
        }
    }

    /**
     * 保存嵌套数组项到变量
     */
    async saveNestedArrayItemToVariable(variableId, path, value, isEdit, index) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                throw new Error('变量不存在');
            }

            // 获取嵌套数组的引用
            const targetArray = this.getNestedValue(variable.value, path);
            if (!Array.isArray(targetArray)) {
                throw new Error('目标不是数组');
            }

            if (isEdit && index !== null) {
                // 编辑现有项
                targetArray[parseInt(index)] = value;
            } else {
                // 添加新项
                targetArray.push(value);
            }

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            console.log('[VariableManager] ✅ 嵌套数组项已保存:', variableId, path, value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套数组项到变量失败:', error);
            throw error;
        }
    }

    /**
     * 添加嵌套对象属性
     */
    async addNestedObjectProperty(variableId, path) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 显示嵌套属性对话框
            this.showNestedObjectPropertyDialog(variableId, path);

        } catch (error) {
            console.error('[VariableManager] ❌ 添加嵌套对象属性失败:', error);
            alert('添加嵌套对象属性失败: ' + error.message);
        }
    }

    /**
     * 显示嵌套对象属性编辑对话框
     */
    showNestedObjectPropertyDialog(variableId, path) {
        // 创建嵌套属性编辑对话框
        const dialog = document.createElement('div');
        dialog.className = 'object-property-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.object-property-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>添加嵌套属性</h3>
                    <button class="dialog-close" onclick="this.closest('.object-property-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>属性名</label>
                        <input type="text" id="property-name" placeholder="请输入属性名">
                    </div>
                    <div class="form-group">
                        <label>属性类型</label>
                        <select id="property-type">
                            <option value="string">字符串</option>
                            <option value="number">数字</option>
                            <option value="boolean">布尔值</option>
                            <option value="array">数组</option>
                            <option value="object">对象</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>属性值</label>
                        <textarea id="property-value" rows="4" placeholder="请输入属性值..."></textarea>
                        <div class="value-hint" id="property-value-hint">
                            ${this.getValueHint('string')}
                        </div>
                    </div>
                    <div class="form-group">
                        <label>嵌套路径</label>
                        <div class="scope-info">
                            <i class="fa fa-sitemap"></i>
                            ${variableId} → ${path}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.object-property-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-nested-object-property" data-variable-id="${variableId}" data-path="${path}">添加</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-nested-object-property') {
                const variableId = actionElement.dataset.variableId;
                const path = actionElement.dataset.path;
                this.saveNestedObjectPropertyFromDialog(actionElement, variableId, path);
            }
        });

        // 绑定类型变更事件
        const typeSelectElement = dialog.querySelector('#property-type');
        const valueHint = dialog.querySelector('#property-value-hint');

        typeSelectElement.addEventListener('change', (e) => {
            valueHint.textContent = this.getValueHint(e.target.value);
        });

        // 聚焦到名称输入框
        setTimeout(() => {
            const nameInput = dialog.querySelector('#property-name');
            if (nameInput) {
                nameInput.focus();
            }
        }, 100);
    }

    /**
     * 从对话框保存嵌套对象属性
     */
    async saveNestedObjectPropertyFromDialog(button, variableId, path) {
        try {
            const dialog = button.closest('.object-property-dialog');
            const name = dialog.querySelector('#property-name').value.trim();
            const type = dialog.querySelector('#property-type').value;
            const valueText = dialog.querySelector('#property-value').value.trim();

            if (!name) {
                alert('请输入属性名');
                return;
            }

            // 解析值
            let value;
            try {
                value = this.parseVariableValue(valueText, type);
            } catch (e) {
                alert('属性值格式错误: ' + e.message);
                return;
            }

            // 保存嵌套属性
            await this.saveNestedObjectPropertyToVariable(variableId, path, name, value);

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅ 添加嵌套对象属性:', name);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套对象属性失败:', error);
            alert('保存嵌套对象属性失败: ' + error.message);
        }
    }

    /**
     * 保存嵌套对象属性到变量
     */
    async saveNestedObjectPropertyToVariable(variableId, path, propertyName, propertyValue) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                throw new Error('变量不存在');
            }

            // 获取嵌套对象的引用
            const targetObject = this.getNestedValue(variable.value, path);
            if (typeof targetObject !== 'object' || targetObject === null) {
                throw new Error('目标不是对象');
            }

            // 设置新值
            targetObject[propertyName] = propertyValue;

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            console.log('[VariableManager] ✅ 嵌套对象属性已保存:', variableId, path, propertyName, propertyValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套对象属性到变量失败:', error);
            throw error;
        }
    }

    /**
     * 获取嵌套值的引用
     */
    getNestedValue(obj, path) {
        if (!path) return obj;

        const keys = path.split('.');
        let current = obj;

        for (const key of keys) {
            if (current === null || current === undefined) {
                return null;
            }

            // 处理数组索引
            if (Array.isArray(current) && /^\d+$/.test(key)) {
                current = current[parseInt(key)];
            } else if (typeof current === 'object') {
                current = current[key];
            } else {
                return null;
            }
        }

        return current;
    }

    /**
     * 删除嵌套数组项
     */
    async removeNestedArrayItem(variableId, index, level, event) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 构建嵌套路径
            const path = this.buildNestedPath(event.target, level);
            console.log('[VariableManager] 🔘 删除嵌套数组项路径:', path, '索引:', index);

            if (!confirm(`确定要删除嵌套数组项 [${index}] 吗？\n路径: ${variableId}${path ? ' → ' + path : ''}`)) return;

            // 获取目标数组
            const targetArray = this.getNestedValue(variable.value, path);
            if (!Array.isArray(targetArray)) {
                console.error('[VariableManager] 目标不是数组:', path);
                return;
            }

            // 删除数组项
            targetArray.splice(parseInt(index), 1);

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            // 重新渲染
            this.renderVariableList();

            console.log('[VariableManager] ✅ 删除嵌套数组项:', variableId, path, index);
        } catch (error) {
            console.error('[VariableManager] ❌ 删除嵌套数组项失败:', error);
            alert('删除嵌套数组项失败: ' + error.message);
        }
    }

    /**
     * 删除嵌套对象属性
     */
    async removeNestedObjectProperty(variableId, key, path) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            console.log('[VariableManager] 🔘 删除嵌套对象属性路径:', path, '键:', key);

            if (!confirm(`确定要删除嵌套属性 "${key}" 吗？\n路径: ${variableId}${path ? ' → ' + path : ''}`)) return;

            // 获取父对象路径
            const parentPath = this.getParentPath(path);
            const targetObject = this.getNestedValue(variable.value, parentPath);

            if (typeof targetObject !== 'object' || targetObject === null) {
                console.error('[VariableManager] 目标不是对象:', parentPath);
                return;
            }

            // 删除属性
            delete targetObject[key];

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            // 重新渲染
            this.renderVariableList();

            console.log('[VariableManager] ✅ 删除嵌套对象属性:', variableId, path, key);
        } catch (error) {
            console.error('[VariableManager] ❌ 删除嵌套对象属性失败:', error);
            alert('删除嵌套对象属性失败: ' + error.message);
        }
    }

    /**
     * 构建嵌套路径
     */
    buildNestedPath(element, level) {
        const pathParts = [];

        // 向上遍历找到所有嵌套层级
        let currentElement = element.closest('.array-item, .object-property');
        while (currentElement && level > 0) {
            const parent = currentElement.closest('.nested-items');
            if (parent) {
                const parentItem = parent.previousElementSibling;
                if (parentItem) {
                    if (parentItem.classList.contains('array-item')) {
                        const index = parentItem.dataset.index;
                        if (index !== undefined) {
                            pathParts.unshift(index);
                        }
                    } else if (parentItem.classList.contains('object-property')) {
                        const key = parentItem.dataset.key;
                        if (key !== undefined) {
                            pathParts.unshift(key);
                        }
                    }
                }
                currentElement = parentItem;
                level--;
            } else {
                break;
            }
        }

        return pathParts.join('.');
    }

    /**
     * 获取父路径
     */
    getParentPath(path) {
        if (!path) return '';
        const parts = path.split('.');
        parts.pop(); // 移除最后一部分
        return parts.join('.');
    }

    /**
     * 编辑数组项
     */
    editArrayItem(variableId, index) {
        try {
            const variable = this.variables[variableId];
            if (!variable || variable.type !== 'array' || !Array.isArray(variable.value)) {
                console.error('[VariableManager] 变量不是数组类型:', variableId);
                return;
            }

            const currentValue = variable.value[parseInt(index)];
            const formattedValue = typeof currentValue === 'string' ? currentValue : JSON.stringify(currentValue);

            this.showArrayItemDialog(variableId, index, formattedValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑数组项失败:', error);
            alert('编辑数组项失败: ' + error.message);
        }
    }

    /**
     * 编辑对象属性
     */
    editObjectProperty(variableId, key, path) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 获取当前属性值
            let currentValue;
            if (path && path !== key) {
                // 嵌套属性
                const parentPath = this.getParentPath(path);
                const parentObject = this.getNestedValue(variable.value, parentPath);
                currentValue = parentObject[key];
            } else {
                // 顶级属性
                currentValue = variable.value[key];
            }

            // 确定属性类型
            let propertyType = 'string';
            if (typeof currentValue === 'number') {
                propertyType = 'number';
            } else if (typeof currentValue === 'boolean') {
                propertyType = 'boolean';
            } else if (Array.isArray(currentValue)) {
                propertyType = 'array';
            } else if (typeof currentValue === 'object' && currentValue !== null) {
                propertyType = 'object';
            }

            const existingProperty = {
                type: propertyType,
                value: currentValue
            };

            this.showObjectPropertyDialog(variableId, key, existingProperty);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑对象属性失败:', error);
            alert('编辑对象属性失败: ' + error.message);
        }
    }

    /**
     * 编辑嵌套数组项
     */
    editNestedArrayItem(variableId, index, level, event) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 构建嵌套路径
            const path = this.buildNestedPath(event.target, level);
            console.log('[VariableManager] 🔘 编辑嵌套数组项路径:', path, '索引:', index);

            // 获取目标数组
            const targetArray = this.getNestedValue(variable.value, path);
            if (!Array.isArray(targetArray)) {
                console.error('[VariableManager] 目标不是数组:', path);
                return;
            }

            const currentValue = targetArray[parseInt(index)];
            const formattedValue = typeof currentValue === 'string' ? currentValue : JSON.stringify(currentValue);

            this.showNestedArrayItemDialog(variableId, path, index, formattedValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑嵌套数组项失败:', error);
            alert('编辑嵌套数组项失败: ' + error.message);
        }
    }

    /**
     * 编辑嵌套对象项
     */
    editNestedObjectItem(variableId, index, level, event) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            // 构建嵌套路径
            const path = this.buildNestedPath(event.target, level);
            console.log('[VariableManager] 🔘 编辑嵌套对象项路径:', path, '索引:', index);

            // 获取目标数组（对象在数组中）
            const parentPath = this.getParentPath(path);
            const targetArray = this.getNestedValue(variable.value, parentPath);
            if (!Array.isArray(targetArray)) {
                console.error('[VariableManager] 父级不是数组:', parentPath);
                return;
            }

            const currentValue = targetArray[parseInt(index)];
            if (typeof currentValue !== 'object' || currentValue === null) {
                console.error('[VariableManager] 目标不是对象:', currentValue);
                return;
            }

            // 这里可以显示一个对象编辑对话框，暂时用JSON编辑
            const formattedValue = JSON.stringify(currentValue, null, 2);
            this.showNestedArrayItemDialog(variableId, parentPath, index, formattedValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑嵌套对象项失败:', error);
            alert('编辑嵌套对象项失败: ' + error.message);
        }
    }

    /**
     * 编辑嵌套属性数组
     */
    editNestedPropertyArray(variableId, key, path, level) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            console.log('[VariableManager] 🔘 编辑嵌套属性数组:', path, '键:', key);

            // 获取父对象路径
            const parentPath = this.getParentPath(path);
            const targetObject = this.getNestedValue(variable.value, parentPath);

            if (typeof targetObject !== 'object' || targetObject === null) {
                console.error('[VariableManager] 目标不是对象:', parentPath);
                return;
            }

            const currentValue = targetObject[key];
            if (!Array.isArray(currentValue)) {
                console.error('[VariableManager] 属性不是数组:', currentValue);
                return;
            }

            // 显示数组编辑对话框（JSON格式）
            const formattedValue = JSON.stringify(currentValue, null, 2);

            // 创建临时的属性编辑对话框
            this.showNestedPropertyEditDialog(variableId, key, path, 'array', formattedValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑嵌套属性数组失败:', error);
            alert('编辑嵌套属性数组失败: ' + error.message);
        }
    }

    /**
     * 编辑嵌套属性对象
     */
    editNestedPropertyObject(variableId, key, path, level) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                console.error('[VariableManager] 变量不存在:', variableId);
                return;
            }

            console.log('[VariableManager] 🔘 编辑嵌套属性对象:', path, '键:', key);

            // 获取父对象路径
            const parentPath = this.getParentPath(path);
            const targetObject = this.getNestedValue(variable.value, parentPath);

            if (typeof targetObject !== 'object' || targetObject === null) {
                console.error('[VariableManager] 目标不是对象:', parentPath);
                return;
            }

            const currentValue = targetObject[key];
            if (typeof currentValue !== 'object' || currentValue === null) {
                console.error('[VariableManager] 属性不是对象:', currentValue);
                return;
            }

            // 显示对象编辑对话框（JSON格式）
            const formattedValue = JSON.stringify(currentValue, null, 2);

            // 创建临时的属性编辑对话框
            this.showNestedPropertyEditDialog(variableId, key, path, 'object', formattedValue);
        } catch (error) {
            console.error('[VariableManager] ❌ 编辑嵌套属性对象失败:', error);
            alert('编辑嵌套属性对象失败: ' + error.message);
        }
    }

    /**
     * 显示嵌套属性编辑对话框
     */
    showNestedPropertyEditDialog(variableId, key, path, type, currentValue) {
        // 创建嵌套属性编辑对话框
        const dialog = document.createElement('div');
        dialog.className = 'array-item-dialog';
        dialog.innerHTML = `
            <div class="dialog-overlay" onclick="this.closest('.array-item-dialog').remove()"></div>
            <div class="dialog-container">
                <div class="dialog-header">
                    <h3>编辑嵌套${type === 'array' ? '数组' : '对象'}</h3>
                    <button class="dialog-close" onclick="this.closest('.array-item-dialog').remove()">×</button>
                </div>
                <div class="dialog-body">
                    <div class="form-group">
                        <label>属性名</label>
                        <input type="text" id="nested-property-key" value="${key}" placeholder="请输入属性名...">
                        <div class="value-hint">
                            修改属性名将重命名该属性
                        </div>
                    </div>
                    <div class="form-group">
                        <label>${type === 'array' ? '数组' : '对象'}内容 (JSON格式)</label>
                        <textarea id="nested-property-value" rows="6" placeholder="请输入JSON格式的${type === 'array' ? '数组' : '对象'}...">${currentValue}</textarea>
                        <div class="value-hint">
                            请输入有效的JSON格式
                        </div>
                    </div>
                    <div class="form-group">
                        <label>嵌套路径</label>
                        <div class="scope-info">
                            <i class="fa fa-sitemap"></i>
                            ${variableId} → ${path}
                        </div>
                    </div>
                </div>
                <div class="dialog-footer">
                    <button class="btn-cancel" onclick="this.closest('.array-item-dialog').remove()">取消</button>
                    <button class="btn-save" data-action="save-nested-property-edit" data-variable-id="${variableId}" data-key="${key}" data-path="${path}" data-type="${type}">保存</button>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // 绑定对话框事件
        dialog.addEventListener('click', (e) => {
            const actionElement = e.target.closest('[data-action]');
            const action = actionElement?.dataset?.action;

            if (action === 'save-nested-property-edit') {
                const variableId = actionElement.dataset.variableId;
                const key = actionElement.dataset.key;
                const path = actionElement.dataset.path;
                const type = actionElement.dataset.type;
                this.saveNestedPropertyEditFromDialog(actionElement, variableId, key, path, type);
            }
        });

        // 聚焦到值输入框
        setTimeout(() => {
            const valueInput = dialog.querySelector('#nested-property-value');
            if (valueInput) {
                valueInput.focus();
                valueInput.select();
            }
        }, 100);
    }

    /**
     * 从对话框保存嵌套属性编辑
     */
    async saveNestedPropertyEditFromDialog(button, variableId, key, path, type) {
        try {
            const dialog = button.closest('.array-item-dialog');
            const newKey = dialog.querySelector('#nested-property-key').value.trim();
            const valueText = dialog.querySelector('#nested-property-value').value.trim();

            if (!newKey) {
                alert('请输入属性名');
                return;
            }

            if (!valueText) {
                alert('请输入内容');
                return;
            }

            // 解析JSON值
            let value;
            try {
                value = JSON.parse(valueText);
            } catch (e) {
                alert('JSON格式错误: ' + e.message);
                return;
            }

            // 验证类型
            if (type === 'array' && !Array.isArray(value)) {
                alert('输入的内容不是数组格式');
                return;
            }
            if (type === 'object' && (typeof value !== 'object' || value === null || Array.isArray(value))) {
                alert('输入的内容不是对象格式');
                return;
            }

            // 如果属性名发生了变化，需要重命名属性
            if (newKey !== key) {
                await this.renameNestedProperty(variableId, key, newKey, path, value);
            } else {
                // 保存嵌套属性
                await this.saveNestedPropertyEditToVariable(variableId, key, path, value);
            }

            // 关闭对话框
            dialog.remove();

            // 重新加载变量列表
            this.renderVariableList();

            console.log('[VariableManager] ✅ 编辑嵌套属性:', newKey, value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套属性编辑失败:', error);
            alert('保存嵌套属性编辑失败: ' + error.message);
        }
    }

    /**
     * 重命名嵌套属性
     */
    async renameNestedProperty(variableId, oldKey, newKey, path, newValue) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                throw new Error('变量不存在');
            }

            // 获取父对象路径
            const parentPath = this.getParentPath(path);
            const targetObject = this.getNestedValue(variable.value, parentPath);

            if (typeof targetObject !== 'object' || targetObject === null) {
                throw new Error('目标不是对象');
            }

            // 删除旧属性，添加新属性
            delete targetObject[oldKey];
            targetObject[newKey] = newValue;

            // 保存到变量
            await this.saveVariableToSillyTavern(variableId, variable.value);

            console.log('[VariableManager] ✅ 重命名嵌套属性:', oldKey, '→', newKey);
        } catch (error) {
            console.error('[VariableManager] ❌ 重命名嵌套属性失败:', error);
            throw error;
        }
    }

    /**
     * 保存嵌套属性编辑到变量
     */
    async saveNestedPropertyEditToVariable(variableId, key, path, value) {
        try {
            const variable = this.variables[variableId];
            if (!variable) {
                throw new Error('变量不存在');
            }

            // 获取父对象路径
            const parentPath = this.getParentPath(path);
            const targetObject = this.getNestedValue(variable.value, parentPath);

            if (typeof targetObject !== 'object' || targetObject === null) {
                throw new Error('目标不是对象');
            }

            // 设置新值
            targetObject[key] = value;

            // 保存到SillyTavern
            await this.saveVariableToSillyTavern(variableId, variable.value, variable.type, true, variableId);

            console.log('[VariableManager] ✅ 嵌套属性编辑已保存:', variableId, path, key, value);
        } catch (error) {
            console.error('[VariableManager] ❌ 保存嵌套属性编辑到变量失败:', error);
            throw error;
        }
    }

    /**
     * 打开状态栏编辑器
     */
    openStatusBarEditor() {
        try {
            console.log('[InfoBarSettings] 🎨 打开状态栏编辑器...');

            // 创建状态栏编辑器模态框
            this.createStatusBarEditorModal();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 打开状态栏编辑器失败:', error);
            this.handleError(error);
        }
    }

    /**
     * @deprecated 保持向后兼容性
     */
    openHTMLTemplateEditor() {
        return this.openStatusBarEditor();
    }

    /**
     * 创建状态栏编辑器模态框
     */
    createStatusBarEditorModal() {
        try {
            // 移除现有的编辑器模态框
            const existingModal = document.querySelector('.status-bar-editor-modal');
            if (existingModal) {
                existingModal.remove();
            }

            // 创建模态框HTML
            const modalHTML = this.createStatusBarEditorHTML();

            // 添加到页面
            document.body.insertAdjacentHTML('beforeend', modalHTML);

            // 绑定事件
            this.bindStatusBarEditorEvents();

            console.log('[InfoBarSettings] ✅ 状态栏编辑器创建完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 创建状态栏编辑器失败:', error);
            this.handleError(error);
        }
    }

    /**
     * @deprecated 保持向后兼容性
     */
    createHTMLTemplateEditorModal() {
        return this.createStatusBarEditorModal();
    }

    /**
     * 获取信息栏主题颜色
     */
    getInfoBarThemeColor(type) {
        try {
            // 从SillyTavern扩展设置获取当前主题
            const context = SillyTavern.getContext();
            const extensionSettings = context?.extensionSettings || {};
            const configs = extensionSettings['Information bar integration tool'] || {};
            const themeConfig = configs.theme || {};
            const currentThemeId = themeConfig.current || 'default';

            console.log('[InfoBarSettings] 🎨 获取主题颜色:', { currentThemeId, type });

            // 信息栏主题颜色配置
            const themeColors = {
                default: {
                    background: '#1a1a1a',
                    surface: '#2a2a2a',
                    border: '#333',
                    text: '#fff',
                    textSecondary: '#888',
                    accent: '#007bff'
                },
                dark: {
                    background: '#0f0f0f',
                    surface: '#1a1a1a',
                    border: '#2a2a2a',
                    text: '#e0e0e0',
                    textSecondary: '#999',
                    accent: '#4CAF50'
                },
                blue: {
                    background: '#1a1a2e',
                    surface: '#16213e',
                    border: '#0f3460',
                    text: '#e6e6e6',
                    textSecondary: '#94a3b8',
                    accent: '#5eead4'
                },
                purple: {
                    background: '#2d1b69',
                    surface: '#3c2a78',
                    border: '#4a3586',
                    text: '#f0f0f0',
                    textSecondary: '#c4b5fd',
                    accent: '#8b5cf6'
                },
                green: {
                    background: '#0f2027',
                    surface: '#203a43',
                    border: '#2c5530',
                    text: '#e8f5e8',
                    textSecondary: '#a8d8a8',
                    accent: '#4ade80'
                },
                red: {
                    background: '#2d1b1b',
                    surface: '#3c2a2a',
                    border: '#4a3535',
                    text: '#f0e8e8',
                    textSecondary: '#d8a8a8',
                    accent: '#f87171'
                },
                'purple-night': {
                    background: '#1a1a1a',
                    surface: '#2a2a2a',
                    border: '#333',
                    text: '#fff',
                    textSecondary: '#888',
                    accent: '#007bff'
                }
            };

            const theme = themeColors[currentThemeId] || themeColors.default;
            const color = theme[type] || theme.background;

            console.log('[InfoBarSettings] 🎨 返回颜色:', { type, color });
            return color;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取主题颜色失败:', error);
            // 返回默认颜色
            const defaults = {
                background: '#1a1a1a',
                surface: '#2a2a2a',
                border: '#333',
                text: '#fff',
                textSecondary: '#888',
                accent: '#007bff'
            };
            return defaults[type] || defaults.background;
        }
    }

    /**
     * 创建状态栏编辑器HTML - 全新响应式设计
     */
    createStatusBarEditorHTML() {
        // 预先获取所有主题颜色，避免在模板字符串中重复调用
        const themeColors = {
            background: this.getInfoBarThemeColor('background'),
            surface: this.getInfoBarThemeColor('surface'),
            border: this.getInfoBarThemeColor('border'),
            text: this.getInfoBarThemeColor('text'),
            textSecondary: this.getInfoBarThemeColor('textSecondary'),
            accent: this.getInfoBarThemeColor('accent')
        };

        return `
            <div class="status-bar-editor-modal" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.85);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
                box-sizing: border-box;
            ">
                <div class="status-bar-editor-container" style="
                    width: 100%;
                    height: 100%;
                    max-width: 1600px;
                    max-height: 900px;
                    min-width: 800px;
                    min-height: 600px;
                    background: ${themeColors.background};
                    border-radius: 12px;
                    display: flex;
                    flex-direction: column;
                    overflow: hidden;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
                    border: 1px solid ${themeColors.border};
                    position: relative;
                ">
                    <!-- 编辑器头部 - 响应式设计 -->
                    <div class="editor-header" style="
                        padding: 16px 24px;
                        background: ${themeColors.surface};
                        border-bottom: 1px solid ${themeColors.border};
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        flex-shrink: 0;
                        min-height: 70px;
                    ">
                        <div class="editor-title" style="flex-grow: 1; min-width: 0;">
                            <h3 style="margin: 0; color: ${themeColors.text}; font-size: 18px; font-weight: 600;">
                                <i class="fas fa-edit" style="margin-right: 8px; color: ${themeColors.accent};"></i>
                                状态栏编辑
                            </h3>
                            <p style="margin: 4px 0 0 0; color: ${themeColors.textSecondary}; font-size: 13px;">
                                智能创建和编辑自定义状态栏样式，支持AI创作和实时预览
                            </p>
                        </div>
                        <div class="editor-controls" style="display: flex; align-items: center; gap: 12px; flex-shrink: 0;">
                            <button class="btn btn-secondary" data-action="close-status-bar-editor" style="
                                padding: 8px 12px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 6px;
                                cursor: pointer;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>

                    <!-- 编辑器主体 - 可调整的响应式布局 -->
                    <div class="editor-body" style="
                        flex: 1;
                        display: flex;
                        overflow: hidden;
                        position: relative;
                        min-height: 0;
                    ">
                        <!-- 左侧编辑区 - 自适应宽度 -->
                        <div class="editor-left" style="
                            flex: 1;
                            min-width: 400px;
                            display: flex;
                            flex-direction: column;
                            border-right: 1px solid ${themeColors.border};
                            background: ${themeColors.background};
                        ">
                            <!-- 编辑器工具栏 -->
                            <div class="editor-toolbar" style="
                                display: flex;
                                align-items: center;
                                padding: 8px 16px;
                                background: ${themeColors.surface};
                                border-bottom: 1px solid ${themeColors.border};
                                gap: 12px;
                                flex-shrink: 0;
                            ">
                                <div class="editor-tabs" style="display: flex; gap: 4px;">
                                <button class="editor-tab active" data-tab="html" style="
                                        padding: 6px 12px;
                                        background: ${themeColors.accent};
                                    border: none;
                                        color: ${themeColors.background};
                                    cursor: pointer;
                                        border-radius: 4px;
                                        font-size: 12px;
                                        font-weight: 500;
                                        transition: all 0.2s ease;
                                    ">编辑器</button>
                                <button class="editor-tab" data-tab="preview" style="
                                        padding: 6px 12px;
                                        background: transparent;
                                        border: 1px solid ${themeColors.border};
                                    color: ${themeColors.textSecondary};
                                    cursor: pointer;
                                        border-radius: 4px;
                                        font-size: 12px;
                                        transition: all 0.2s ease;
                                    ">预览</button>
                            </div>
                                <div class="editor-tools" style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
                                    <span class="editor-info" style="font-size: 11px; color: ${themeColors.textSecondary};">
                                        <i class="fas fa-info-circle"></i> 行: <span class="line-count">1</span>, 列: <span class="col-count">1</span>
                                    </span>
                                    <button class="editor-tool-btn" data-action="toggle-wrap" style="
                                        padding: 4px 8px;
                                        background: transparent;
                                        border: 1px solid ${themeColors.border};
                                        color: ${themeColors.textSecondary};
                                        border-radius: 3px;
                                        cursor: pointer;
                                        font-size: 11px;
                                    ">
                                        <i class="fas fa-text-width"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="editor-content" style="flex: 1; position: relative; overflow: hidden;">
                                <!-- 代码编辑器 -->
                                <div class="code-editor-container" style="
                                    width: 100%;
                                    height: 100%;
                                    position: relative;
                                    background: ${themeColors.background};
                                ">
                                <textarea class="html-template-textarea" style="
                                    width: 100%;
                                    height: 100%;
                                    background: ${themeColors.background};
                                    color: ${themeColors.text};
                                    border: none;
                                    padding: 20px;
                                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                                        font-size: 13px;
                                        line-height: 1.6;
                                    resize: none;
                                    outline: none;
                                        box-sizing: border-box;
                                        tab-size: 2;
                                        white-space: pre;
                                        overflow-wrap: normal;
                                        word-break: normal;
                                " placeholder="在此输入您的HTML模板代码...

🚀 快速开始：
<div class='status-card'>
    <div class='status-header'>
    <h3>{{data.name}}</h3>
        <span class='status-badge'>{{data.status}}</span>
    </div>
    <div class='status-content'>
        <div class='progress-bar'>
            <div class='progress-fill' style='width: {{computed.healthPercentage}}%'></div>
    </div>
    <p>生命值: {{data.health}}/{{data.maxHealth}}</p>
    </div>
</div>

💡 提示：使用右侧面板查看可用数据字段和语法帮助"></textarea>

                                    <!-- 语法高亮层 -->
                                    <div class="syntax-highlight-layer" style="
                                        position: absolute;
                                        top: 0;
                                        left: 0;
                                        width: 100%;
                                        height: 100%;
                                        pointer-events: none;
                                        z-index: 1;
                                        background: transparent;
                                        padding: 20px;
                                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                                        font-size: 13px;
                                        line-height: 1.6;
                                        box-sizing: border-box;
                                        overflow: hidden;
                                        white-space: pre;
                                        color: transparent;
                                    "></div>
                                </div>

                                <!-- 预览容器 -->
                                <div class="preview-container" style="
                                    width: 100%;
                                    height: 100%;
                                    background: ${themeColors.background};
                                    padding: 20px;
                                    overflow: auto;
                                    display: none;
                                    box-sizing: border-box;
                                    border: 1px solid ${themeColors.border};
                                    border-radius: 8px;
                                    margin: 10px;
                                    width: calc(100% - 20px);
                                    height: calc(100% - 20px);
                                ">
                                    <div class="preview-content"></div>
                                </div>
                            </div>
                        </div>

                        <!-- 可调整分隔条 -->
                        <div class="editor-resizer" style="
                            width: 4px;
                            background: ${themeColors.border};
                            cursor: col-resize;
                            position: relative;
                            transition: background 0.2s ease;
                            flex-shrink: 0;
                        "
                        onmouseover="this.style.background='${themeColors.accent}'"
                        onmouseout="this.style.background='${themeColors.border}'">
                            <div style="
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translate(-50%, -50%);
                                width: 2px;
                                height: 30px;
                                background: ${themeColors.textSecondary};
                                border-radius: 1px;
                            "></div>
                        </div>

                        <!-- 右侧信息面板 - 自适应宽度 -->
                        <div class="editor-right" style="
                            width: 420px;
                            min-width: 300px;
                            max-width: 600px;
                            background: ${themeColors.surface};
                            display: flex;
                            flex-direction: column;
                            border-left: 1px solid ${themeColors.border};
                        ">
                            <!-- 状态栏创作中心 -->
                            <div class="status-bar-creation-center" style="
                                display: flex;
                                background: ${themeColors.background};
                                border-bottom: 1px solid ${themeColors.border};
                                padding: 12px 16px;
                                align-items: center;
                                gap: 12px;
                                flex-shrink: 0;
                            ">
                                <div class="creation-center-title" style="
                                    color: ${themeColors.text};
                                    font-size: 14px;
                                    font-weight: 600;
                                    display: flex;
                                    align-items: center;
                                    gap: 8px;
                                ">
                                    <i class="fas fa-magic" style="color: ${themeColors.accent};"></i>
                                    状态栏创作中心
                                </div>
                                <div class="creation-actions" style="
                                    display: flex;
                                    gap: 8px;
                                    margin-left: auto;
                                ">

                                    <button class="btn btn-sm btn-outline-secondary data-info-btn" data-action="show-data-info" style="
                                        padding: 6px 12px;
                                        font-size: 12px;
                                        border: 1px solid ${themeColors.border};
                                        background: transparent;
                                        color: ${themeColors.textSecondary};
                                        border-radius: 6px;
                                        cursor: pointer;
                                        transition: all 0.2s ease;
                                    " onmouseover="this.style.background='${themeColors.border}'; this.style.color='${themeColors.text}'"
                                       onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                        <i class="fas fa-info-circle"></i> 数据信息
                                    </button>
                                </div>
                            </div>
                            <div class="info-content" style="
                                flex: 1;
                                padding: 16px;
                                overflow-y: auto;
                                color: ${themeColors.text};
                                font-size: 12px;
                                line-height: 1.5;
                                min-height: 0;
                            ">
                                ${this.createStatusBarPromptEditor()}
                            </div>
                        </div>
                    </div>

                    <!-- 编辑器底部状态栏 - 响应式设计 -->
                    <div class="editor-footer" style="
                        padding: 12px 24px;
                        background: ${themeColors.surface};
                        border-top: 1px solid ${themeColors.border};
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        flex-shrink: 0;
                        min-height: 50px;
                        gap: 16px;
                    ">
                        <div class="editor-status" style="display: flex; align-items: center; gap: 16px; flex-grow: 1;">
                            <span class="status-indicator" style="
                                display: flex;
                                align-items: center;
                                gap: 6px;
                                color: ${themeColors.textSecondary};
                                font-size: 11px;
                            ">
                                <i class="fas fa-circle" style="color: #4CAF50; font-size: 8px;"></i>
                                就绪
                            </span>
                            <span class="template-size" style="color: ${themeColors.textSecondary}; font-size: 11px;">
                                大小: <span class="size-value">0</span> 字符
                            </span>
                            <span class="validation-status" style="color: ${themeColors.textSecondary}; font-size: 11px;">
                                <i class="fas fa-check-circle" style="color: #4CAF50;"></i> 语法正确
                            </span>
                        </div>
                        <div class="editor-actions" style="display: flex; align-items: center; gap: 8px; flex-shrink: 0;">
                            <button class="btn btn-sm btn-outline-secondary" data-action="load-template" style="
                                padding: 6px 12px;
                                font-size: 11px;
                                border: 1px solid ${themeColors.border};
                                background: transparent;
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                transition: all 0.2s ease;
                            ">
                                <i class="fas fa-folder-open"></i> 加载
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" data-action="save-template" style="
                                padding: 6px 12px;
                                font-size: 11px;
                                border: 1px solid ${themeColors.border};
                                background: transparent;
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                transition: all 0.2s ease;
                            ">
                                <i class="fas fa-save"></i> 保存
                            </button>
                            <button class="btn btn-sm btn-primary" data-action="apply-template" style="
                                padding: 6px 16px;
                                font-size: 11px;
                                background: ${themeColors.accent};
                                color: ${themeColors.background};
                                border: none;
                                border-radius: 4px;
                                cursor: pointer;
                                font-weight: 500;
                                box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2);
                                transition: all 0.2s ease;
                            ">
                                <i class="fas fa-check"></i> 应用模板
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 🚀 创建状态栏提示词编辑器
     */
    createStatusBarPromptEditor() {
        const themeColors = {
            background: this.getInfoBarThemeColor('background'),
            surface: this.getInfoBarThemeColor('surface'),
            border: this.getInfoBarThemeColor('border'),
            text: this.getInfoBarThemeColor('text'),
            textSecondary: this.getInfoBarThemeColor('textSecondary'),
            accent: this.getInfoBarThemeColor('accent')
        };

        return `
            <div class="status-bar-prompt-editor">
                <!-- AI提示词编辑区域 -->
                <div class="prompt-editor-section" style="
                    background: ${themeColors.background};
                    border: 1px solid ${themeColors.border};
                    border-radius: 8px;
                    padding: 16px;
                    margin-bottom: 16px;
                ">
                    <h4 style="margin: 0 0 12px 0; color: ${themeColors.accent}; font-size: 14px; font-weight: 600;">
                        <i class="fas fa-robot"></i> AI创作提示词
                    </h4>
                    <textarea class="prompt-textarea" placeholder="描述您想要的状态栏样式，例如：
• 粉色主题角色卡片，显示头像和基本信息
• 简约物品栏，网格布局显示道具
• 技能面板带进度条和等级显示
• 现代化设计，渐变背景圆角卡片
• 其他创意需求..." style="
                        width: 100%;
                        height: 120px;
                        background: ${themeColors.surface};
                        color: ${themeColors.text};
                        border: 1px solid ${themeColors.border};
                        border-radius: 6px;
                        padding: 12px;
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        font-size: 13px;
                        line-height: 1.5;
                        resize: vertical;
                        box-sizing: border-box;
                    "></textarea>
                    <div class="prompt-actions" style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-top: 12px;
                    ">
                        <div class="prompt-templates" style="display: flex; gap: 6px; flex-wrap: wrap;">
                            <button class="prompt-template-btn" data-template="character" style="
                                padding: 4px 8px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                font-size: 11px;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                角色卡片
                            </button>
                            <button class="prompt-template-btn" data-template="inventory" style="
                                padding: 4px 8px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                font-size: 11px;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                物品栏
                            </button>
                            <button class="prompt-template-btn" data-template="stats" style="
                                padding: 4px 8px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                font-size: 11px;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                属性面板
                            </button>
                            <button class="prompt-template-btn" data-template="modern" style="
                                padding: 4px 8px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                font-size: 11px;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                现代风格
                            </button>
                            <button class="prompt-template-btn" data-template="minimal" style="
                                padding: 4px 8px;
                                background: transparent;
                                border: 1px solid ${themeColors.border};
                                color: ${themeColors.textSecondary};
                                border-radius: 4px;
                                cursor: pointer;
                                font-size: 11px;
                                transition: all 0.2s ease;
                            " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                               onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                                简约风格
                            </button>
                        </div>
                        <button class="use-prompt-btn" data-action="use-custom-prompt" style="
                            padding: 6px 12px;
                            background: ${themeColors.accent};
                            color: ${themeColors.background};
                            border: none;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 12px;
                            font-weight: 500;
                            transition: all 0.2s ease;
                        " onmouseover="this.style.opacity='0.9'" onmouseout="this.style.opacity='1'">
                            <i class="fas fa-robot"></i> AI生成
                        </button>
                    </div>
                </div>

                <!-- 数据字段参考 -->
                <div class="data-reference-section" style="
                    background: ${themeColors.background};
                    border: 1px solid ${themeColors.border};
                    border-radius: 8px;
                    padding: 16px;
                ">
                    <h4 style="margin: 0 0 12px 0; color: ${themeColors.accent}; font-size: 14px; font-weight: 600;">
                        <i class="fas fa-database"></i> 可用数据字段
                    </h4>
                    <div class="data-fields-list" style="
                        max-height: 200px;
                        overflow-y: auto;
                        border: 1px solid ${themeColors.border};
                        border-radius: 6px;
                        padding: 2px;
                        background: ${themeColors.surface};
                    ">
                        <div class="loading-fields" style="
                            text-align: center;
                            padding: 20px;
                            color: ${themeColors.textSecondary};
                        ">
                            <i class="fas fa-spinner fa-spin"></i> 加载数据字段...
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * @deprecated 保持向后兼容性
     */
    createAdvancedDataSourceInfo() {
        const themeColors = {
            background: this.getInfoBarThemeColor('background'),
            surface: this.getInfoBarThemeColor('surface'),
            border: this.getInfoBarThemeColor('border'),
            text: this.getInfoBarThemeColor('text'),
            textSecondary: this.getInfoBarThemeColor('textSecondary'),
            accent: this.getInfoBarThemeColor('accent')
        };

        return `
            <div class="advanced-data-source-info">
                <!-- 快速插入区域 -->
                <div class="quick-insert-section" style="
                    background: ${themeColors.background};
                    border: 1px solid ${themeColors.border};
                    border-radius: 6px;
                    padding: 12px;
                    margin-bottom: 16px;
                ">
                    <h4 style="margin: 0 0 8px 0; color: ${themeColors.accent}; font-size: 13px; font-weight: 600;">
                        <i class="fas fa-bolt"></i> 快速插入
                </h4>
                    <div class="quick-insert-buttons" style="display: grid; grid-template-columns: 1fr 1fr; gap: 6px;">
                        <button class="quick-insert-btn" data-insert="{{data.name}}" style="
                            padding: 4px 8px; background: transparent; border: 1px solid ${themeColors.border};
                            color: ${themeColors.text}; border-radius: 3px; cursor: pointer; font-size: 10px;
                        ">姓名</button>
                        <button class="quick-insert-btn" data-insert="{{data.health}}" style="
                            padding: 4px 8px; background: transparent; border: 1px solid ${themeColors.border};
                            color: ${themeColors.text}; border-radius: 3px; cursor: pointer; font-size: 10px;
                        ">生命值</button>
                    </div>
                </div>

                <!-- 当前启用面板 -->
                <div class="enabled-panels-section">
                    <h4 style="margin: 0 0 10px 0; color: ${themeColors.accent}; font-size: 13px; font-weight: 600;">
                        <i class="fas fa-database"></i> 当前启用的数据面板
                </h4>
                    <div class="enabled-panels-list" id="enabled-panels-list" style="
                        background: ${themeColors.background}; border: 1px solid ${themeColors.border};
                        border-radius: 4px; padding: 10px; margin-bottom: 16px; min-height: 80px;
                        max-height: 120px; overflow-y: auto;
                    ">
                        <div style="color: ${themeColors.textSecondary}; font-size: 11px;">正在加载数据面板...</div>
                    </div>
                </div>

                <!-- 可用数据字段 -->
                <div class="available-fields-section">
                    <h4 style="margin: 0 0 10px 0; color: ${themeColors.accent}; font-size: 13px; font-weight: 600;">
                        <i class="fas fa-tags"></i> 可用数据字段
                </h4>
                    <div class="available-fields-list" id="available-fields-list" style="
                        background: ${themeColors.background}; border: 1px solid ${themeColors.border};
                        border-radius: 4px; padding: 8px; min-height: 120px; max-height: 200px;
                        overflow-y: auto; font-size: 11px;
                    ">
                        <div style="color: ${themeColors.textSecondary}; font-size: 11px;">正在加载字段列表...</div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 绑定状态栏编辑器事件 - 全新响应式版本
     */
    bindStatusBarEditorEvents() {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            if (!modal) return;

            // 关闭编辑器
            modal.addEventListener('click', (e) => {
                if (e.target === modal || e.target.closest('[data-action="close-status-bar-editor"]')) {
                    console.log('[InfoBarSettings] 🔒 关闭状态栏编辑器');
                    modal.remove();
                }
            });

            // 🔧 修复：直接绑定关闭按钮事件
            const closeBtn = modal.querySelector('[data-action="close-status-bar-editor"]');
            if (closeBtn) {
                closeBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('[InfoBarSettings] 🔒 关闭按钮被点击');
                    modal.remove();
                });
            }

            // 阻止点击编辑器容器时关闭模态框
            modal.querySelector('.status-bar-editor-container')?.addEventListener('click', (e) => {
                e.stopPropagation();
            });



            // 标签页切换 - 编辑器标签
            modal.querySelectorAll('.editor-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    this.switchEditorTab(tab.dataset.tab);
                });
            });

            // 标签页切换 - 信息面板标签
            modal.querySelectorAll('.info-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    this.switchInfoTab(tab.dataset.infoTab);
                });
            });

            // 🚀 新增：状态栏提示词编辑器事件
            this.bindPromptEditorEvents(modal);





            // 🚀 新增：显示数据信息
            modal.querySelector('[data-action="show-data-info"]')?.addEventListener('click', () => {
                this.showDataInfoPanel();
            });

            // 其他按钮事件
            modal.querySelector('[data-action="load-template"]')?.addEventListener('click', () => {
                this.loadHTMLTemplate();
            });

            modal.querySelector('[data-action="save-template"]')?.addEventListener('click', () => {
                this.saveHTMLTemplate();
            });

            modal.querySelector('[data-action="apply-template"]')?.addEventListener('click', () => {
                this.applyHTMLTemplate();
            });

            // 🚀 新增：编辑器工具按钮
            modal.querySelector('[data-action="toggle-wrap"]')?.addEventListener('click', () => {
                this.toggleWordWrap();
            });

            // 实时预览和语法检查
            const textarea = modal.querySelector('.html-template-textarea');
            if (textarea) {
                // 输入事件 - 实时预览
                textarea.addEventListener('input', () => {
                    this.updateTemplatePreview();
                    this.updateEditorStatus();
                    this.validateTemplateSyntax();
                });

                // 🚀 新增：光标位置跟踪
                textarea.addEventListener('selectionchange', () => {
                    this.updateCursorPosition();
                });

                textarea.addEventListener('keyup', () => {
                    this.updateCursorPosition();
                });

                textarea.addEventListener('click', () => {
                    this.updateCursorPosition();
                });

                // 🚀 新增：键盘快捷键
                textarea.addEventListener('keydown', (e) => {
                    this.handleEditorKeydown(e);
                });
            }

            // 🚀 新增：可调整分隔条拖拽功能
            this.initEditorResizer(modal);

            // 🚀 新增：窗口大小变化时的响应式调整
            window.addEventListener('resize', () => {
                this.adjustEditorLayout();
            });

            // 加载数据信息
            this.loadAdvancedDataInfo();

            // 自动加载HTML模板
            this.loadHTMLTemplate();

            // 🚀 新增：初始化语法高亮
            this.initSyntaxHighlight();

            // 🚀 新增：加载数据字段到提示词编辑器
            this.loadDataFieldsToPromptEditor();

            console.log('[InfoBarSettings] ✅ 状态栏编辑器事件绑定完成 (响应式版本)');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定状态栏编辑器事件失败:', error);
        }
    }

    /**
     * @deprecated 保持向后兼容性
     */
    bindHTMLTemplateEditorEvents() {
        return this.bindStatusBarEditorEvents();
    }

    /**
     * 🚀 新增：初始化可调整分隔条
     */
    initEditorResizer(modal) {
        try {
            const resizer = modal.querySelector('.editor-resizer');
            const leftPanel = modal.querySelector('.editor-left');
            const rightPanel = modal.querySelector('.editor-right');

            if (!resizer || !leftPanel || !rightPanel) return;

            let isResizing = false;
            let startX = 0;
            let startLeftWidth = 0;
            let startRightWidth = 0;

            resizer.addEventListener('mousedown', (e) => {
                isResizing = true;
                startX = e.clientX;
                startLeftWidth = leftPanel.offsetWidth;
                startRightWidth = rightPanel.offsetWidth;

                document.body.style.cursor = 'col-resize';
                e.preventDefault();
            });

            document.addEventListener('mousemove', (e) => {
                if (!isResizing) return;

                const deltaX = e.clientX - startX;
                const containerWidth = leftPanel.parentElement.offsetWidth;
                const newLeftWidth = startLeftWidth + deltaX;
                const newRightWidth = startRightWidth - deltaX;

                // 限制最小宽度
                if (newLeftWidth >= 300 && newRightWidth >= 250) {
                    leftPanel.style.flex = 'none';
                    leftPanel.style.width = `${newLeftWidth}px`;
                    rightPanel.style.width = `${newRightWidth}px`;
                }
            });

            document.addEventListener('mouseup', () => {
                if (isResizing) {
                    isResizing = false;
                    document.body.style.cursor = '';
                }
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化分隔条失败:', error);
        }
    }

    /**
     * 🚀 新增：插入模板文本
     */
    insertTemplateText(text) {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            if (!textarea) return;

            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const currentValue = textarea.value;

            const newValue = currentValue.substring(0, start) + text + currentValue.substring(end);
            textarea.value = newValue;

            // 设置光标位置到插入文本之后
            const newCursorPos = start + text.length;
            textarea.setSelectionRange(newCursorPos, newCursorPos);
            textarea.focus();

            // 触发更新事件
            this.updateTemplatePreview();
            this.updateEditorStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 插入模板文本失败:', error);
        }
    }

    /**
     * 🚀 新增：格式化模板
     */
    formatTemplate() {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            if (!textarea) return;

            const code = textarea.value;
            if (!code.trim()) return;

            // 简单的HTML格式化
            const formatted = this.formatHTML(code);
            textarea.value = formatted;

            // 触发更新
            this.updateTemplatePreview();
            this.updateEditorStatus();

            console.log('[InfoBarSettings] ✅ 模板格式化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 格式化模板失败:', error);
        }
    }

    /**
     * 🚀 新增：HTML格式化
     */
    formatHTML(html) {
        try {
            let formatted = html;
            let indent = 0;
            const indentSize = 2;

            // 移除多余的空白
            formatted = formatted.replace(/\s+/g, ' ').trim();

            // 添加换行和缩进
            formatted = formatted.replace(/</g, '\n<');
            formatted = formatted.replace(/>/g, '>\n');

            const lines = formatted.split('\n').filter(line => line.trim());
            const result = [];

            for (const line of lines) {
                const trimmed = line.trim();
                if (!trimmed) continue;

                // 减少缩进（闭合标签）
                if (trimmed.startsWith('</')) {
                    indent = Math.max(0, indent - indentSize);
                }

                // 添加缩进
                result.push(' '.repeat(indent) + trimmed);

                // 增加缩进（开放标签）
                if (trimmed.startsWith('<') && !trimmed.startsWith('</') && !trimmed.endsWith('/>')) {
                    // 检查是否是自闭合标签
                    const tagName = trimmed.match(/<([^>\s]+)/)?.[1];
                    const selfClosingTags = ['input', 'img', 'br', 'hr', 'meta', 'link'];
                    if (!selfClosingTags.includes(tagName)) {
                        indent += indentSize;
                    }
                }
            }

            return result.join('\n');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ HTML格式化失败:', error);
            return html;
        }
    }

    /**
     * 🚀 新增：更新光标位置显示
     */
    updateCursorPosition() {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            const lineCount = document.querySelector('.line-count');
            const colCount = document.querySelector('.col-count');

            if (!textarea || !lineCount || !colCount) return;

            const text = textarea.value.substring(0, textarea.selectionStart);
            const lines = text.split('\n');
            const currentLine = lines.length;
            const currentCol = lines[lines.length - 1].length + 1;

            lineCount.textContent = currentLine;
            colCount.textContent = currentCol;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新光标位置失败:', error);
        }
    }

    /**
     * 🚀 新增：更新编辑器状态
     */
    updateEditorStatus() {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            const sizeValue = document.querySelector('.size-value');

            if (!textarea || !sizeValue) return;

            const charCount = textarea.value.length;
            sizeValue.textContent = charCount.toLocaleString();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新编辑器状态失败:', error);
        }
    }

    /**
     * 🚀 新增：验证模板语法
     */
    validateTemplateSyntax() {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            const validationStatus = document.querySelector('.validation-status');

            if (!textarea || !validationStatus) return;

            const template = textarea.value;
            const errors = this.checkTemplateSyntax(template);

            if (errors.length === 0) {
                validationStatus.innerHTML = '<i class="fas fa-check-circle" style="color: #4CAF50;"></i> 语法正确';
            } else {
                validationStatus.innerHTML = `<i class="fas fa-exclamation-triangle" style="color: #FF5722;"></i> ${errors.length} 个错误`;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 验证模板语法失败:', error);
        }
    }

    /**
     * 🚀 新增：检查模板语法
     */
    checkTemplateSyntax(template) {
        const errors = [];

        try {
            // 检查HTML标签匹配
            const htmlErrors = this.checkHTMLSyntax(template);
            errors.push(...htmlErrors);

            // 检查模板语法
            const templateErrors = this.checkTemplateBindingSyntax(template);
            errors.push(...templateErrors);

        } catch (error) {
            errors.push('语法检查器内部错误');
        }

        return errors;
    }

    /**
     * 🚀 新增：检查HTML语法
     */
    checkHTMLSyntax(html) {
        const errors = [];

        try {
            // 简单的标签匹配检查
            const openTags = [];
            const tagRegex = /<\/?([a-zA-Z][a-zA-Z0-9]*)\b[^>]*>/g;
            let match;

            while ((match = tagRegex.exec(html)) !== null) {
                const tag = match[1].toLowerCase();
                const isClosing = match[0].startsWith('</');
                const isSelfClosing = match[0].endsWith('/>');

                if (isSelfClosing) continue;

                if (isClosing) {
                    const lastOpen = openTags.pop();
                    if (!lastOpen || lastOpen !== tag) {
                        errors.push(`标签不匹配: </${tag}>`);
                    }
                } else {
                    // 自闭合标签不需要匹配
                    const selfClosingTags = ['input', 'img', 'br', 'hr', 'meta', 'link'];
                    if (!selfClosingTags.includes(tag)) {
                        openTags.push(tag);
                    }
                }
            }

            // 检查未闭合的标签
            openTags.forEach(tag => {
                errors.push(`未闭合的标签: <${tag}>`);
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ HTML语法检查失败:', error);
        }

        return errors;
    }

    /**
     * 🚀 新增：检查模板绑定语法
     */
    checkTemplateBindingSyntax(template) {
        const errors = [];

        try {
            // 检查未闭合的模板标签
            const openPatterns = [
                { regex: /\{\{#if\s+[^}]+\}\}/g, close: '{{/if}}', name: 'if' },
                { regex: /\{\{#each\s+[^}]+\}\}/g, close: '{{/each}}', name: 'each' }
            ];

            for (const pattern of openPatterns) {
                const opens = [...template.matchAll(pattern.regex)];
                const closes = [...template.matchAll(new RegExp(pattern.close.replace(/[{}]/g, '\\$&'), 'g'))];

                if (opens.length !== closes.length) {
                    errors.push(`${pattern.name} 标签数量不匹配`);
                }
            }

            // 检查无效的绑定语法
            const invalidBindings = template.match(/\{\{[^}]*\{\{|\}\}[^{]*\}\}/g);
            if (invalidBindings) {
                errors.push('检测到无效的绑定语法');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 模板绑定语法检查失败:', error);
        }

        return errors;
    }

    /**
     * 切换编辑器标签页 - 更新版本
     */
    switchEditorTab(tabName) {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            if (!modal) return;

            const themeColors = {
                background: this.getInfoBarThemeColor('background'),
                accent: this.getInfoBarThemeColor('accent'),
                textSecondary: this.getInfoBarThemeColor('textSecondary')
            };

            // 更新标签页状态
            modal.querySelectorAll('.editor-tab').forEach(tab => {
                if (tab.dataset.tab === tabName) {
                    tab.classList.add('active');
                    tab.style.background = themeColors.accent;
                    tab.style.color = themeColors.background;
                } else {
                    tab.classList.remove('active');
                    tab.style.background = 'transparent';
                    tab.style.color = themeColors.textSecondary;
                    tab.style.border = '1px solid ' + this.getInfoBarThemeColor('border');
                }
            });

            // 切换内容
            const codeEditor = modal.querySelector('.code-editor-container');
            const preview = modal.querySelector('.preview-container');

            if (tabName === 'html') {
                if (codeEditor) codeEditor.style.display = 'block';
                if (preview) preview.style.display = 'none';
            } else if (tabName === 'preview') {
                if (codeEditor) codeEditor.style.display = 'none';
                if (preview) preview.style.display = 'block';
                this.updateTemplatePreview();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换编辑器标签页失败:', error);
        }
    }

    /**
     * 切换信息标签页
     */
    switchInfoTab(tabName) {
        try {
            const modal = document.querySelector('.html-template-editor-modal');
            if (!modal) return;

            // 更新标签页状态
            modal.querySelectorAll('.info-tab').forEach(tab => {
                if (tab.dataset.infoTab === tabName) {
                    tab.classList.add('active');
                    tab.style.color = 'var(--SmartThemeBodyColor, #fff)';
                    tab.style.borderBottomColor = 'var(--SmartThemeQuoteColor, #007bff)';
                } else {
                    tab.classList.remove('active');
                    tab.style.color = 'var(--SmartThemeQuoteColor, #888)';
                    tab.style.borderBottomColor = 'transparent';
                }
            });

            // 更新内容
            const infoContent = modal.querySelector('.info-content');
            if (infoContent) {
                switch (tabName) {
                    case 'data-source':
                        infoContent.innerHTML = this.createAdvancedDataSourceInfo();
                        this.loadAdvancedDataInfo();
                        break;
                    case 'syntax-help':
                        infoContent.innerHTML = this.createSyntaxHelpInfo();
                        this.bindSyntaxHelpEvents();
                        break;
                    case 'templates':
                        infoContent.innerHTML = this.createTemplateLibraryInfo();
                        this.loadTemplateLibrary();
                        break;
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换信息标签页失败:', error);
        }
    }

    /**
     * 创建语法帮助信息
     */
    createSyntaxHelpInfo() {
        return `
            <div class="syntax-help-info">
                <h4 style="margin: 0 0 10px 0; color: var(--SmartThemeQuoteColor, #007bff);">
                    <i class="fas fa-book"></i> 模板语法说明
                </h4>

                <div class="syntax-section">
                    <h5 style="color: var(--SmartThemeBodyColor, #fff); margin: 15px 0 5px 0;">数据绑定</h5>
                    <code style="background: var(--SmartThemeBodyColor, #333); padding: 2px 5px; border-radius: 3px;">{{data.fieldName}}</code>
                    <p style="margin: 5px 0; font-size: 12px;">绑定数据字段，如 {{data.name}}、{{data.health}}</p>
                </div>

                <div class="syntax-section">
                    <h5 style="color: var(--SmartThemeBodyColor, #fff); margin: 15px 0 5px 0;">计算字段</h5>
                    <code style="background: var(--SmartThemeBodyColor, #333); padding: 2px 5px; border-radius: 3px;">{{computed.fieldName}}</code>
                    <p style="margin: 5px 0; font-size: 12px;">使用计算字段，如 {{computed.healthPercentage}}</p>
                </div>

                <div class="syntax-section">
                    <h5 style="color: var(--SmartThemeBodyColor, #fff); margin: 15px 0 5px 0;">条件渲染</h5>
                    <code style="background: var(--SmartThemeBodyColor, #333); padding: 2px 5px; border-radius: 3px; display: block; margin: 5px 0;">
                        {{#if data.health > 50}}<br>
                        &nbsp;&nbsp;健康状态良好<br>
                        {{/if}}
                    </code>
                </div>

                <div class="syntax-section">
                    <h5 style="color: var(--SmartThemeBodyColor, #fff); margin: 15px 0 5px 0;">循环渲染</h5>
                    <code style="background: var(--SmartThemeBodyColor, #333); padding: 2px 5px; border-radius: 3px; display: block; margin: 5px 0;">
                        {{#each data.items}}<br>
                        &nbsp;&nbsp;&lt;div&gt;{{this.name}}&lt;/div&gt;<br>
                        {{/each}}
                    </code>
                </div>

                <div class="syntax-section">
                    <h5 style="color: var(--SmartThemeBodyColor, #fff); margin: 15px 0 5px 0;">常用计算字段</h5>
                    <ul style="margin: 5px 0; padding-left: 20px; font-size: 12px;">
                        <li>{{computed.healthPercentage}} - 生命值百分比</li>
                        <li>{{computed.timestamp}} - 当前时间戳</li>
                    </ul>
                </div>
            </div>
        `;
    }

    /**
     * 创建模板库信息
     */
    createTemplateLibraryInfo() {
        return `
            <div class="template-library-info">
                <h4 style="margin: 0 0 10px 0; color: var(--SmartThemeQuoteColor, #007bff);">
                    <i class="fas fa-layer-group"></i> 模板库
                </h4>

                <div class="template-item" style="margin: 10px 0; padding: 10px; background: var(--SmartThemeBodyColor, #333); border-radius: 5px; cursor: pointer;" data-template="character-card">
                    <h6 style="margin: 0 0 5px 0; color: var(--SmartThemeBodyColor, #fff);">角色卡片</h6>
                    <p style="margin: 0; font-size: 11px; color: var(--SmartThemeQuoteColor, #888);">显示角色基本信息和状态</p>
                </div>

                <div class="template-item" style="margin: 10px 0; padding: 10px; background: var(--SmartThemeBodyColor, #333); border-radius: 5px; cursor: pointer;" data-template="status-bar">
                    <h6 style="margin: 0 0 5px 0; color: var(--SmartThemeBodyColor, #fff);">状态栏</h6>
                    <p style="margin: 0; font-size: 11px; color: var(--SmartThemeQuoteColor, #888);">简洁的生命值和状态显示</p>
                </div>

                <div class="template-item" style="margin: 10px 0; padding: 10px; background: var(--SmartThemeBodyColor, #333); border-radius: 5px; cursor: pointer;" data-template="inventory-grid">
                    <h6 style="margin: 0 0 5px 0; color: var(--SmartThemeBodyColor, #fff);">物品网格</h6>
                    <p style="margin: 0; font-size: 11px; color: var(--SmartThemeQuoteColor, #888);">网格式物品展示界面</p>
                </div>

                <div class="template-item" style="margin: 10px 0; padding: 10px; background: var(--SmartThemeBodyColor, #333); border-radius: 5px; cursor: pointer;" data-template="rpg-dashboard">
                    <h6 style="margin: 0 0 5px 0; color: var(--SmartThemeBodyColor, #fff);">RPG仪表板</h6>
                    <p style="margin: 0; font-size: 11px; color: var(--SmartThemeQuoteColor, #888);">完整的RPG游戏界面</p>
                </div>

                <button class="btn btn-secondary" style="width: 100%; margin-top: 10px;" data-action="import-template">
                    <i class="fas fa-upload"></i> 导入自定义模板
                </button>
            </div>
        `;
    }

    /**
     * 更新模板预览
     */
    updateTemplatePreview() {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            if (!modal) return;

            const textarea = modal.querySelector('.html-template-textarea');
            const preview = modal.querySelector('.preview-container');

            if (!textarea || !preview) return;

            const template = textarea.value;

            // 获取示例数据
            const sampleData = this.getSampleData();

            // 使用HTML模板解析器渲染预览
            const infoBarTool = window.SillyTavernInfobar?.modules?.infoBarTool;
            if (infoBarTool && infoBarTool.htmlTemplateParser) {
                const renderedHTML = infoBarTool.htmlTemplateParser.parseTemplate(template, sampleData);
                preview.innerHTML = renderedHTML;
            } else {
                // 简单的预览渲染
                preview.innerHTML = this.simpleTemplateRender(template, sampleData);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新模板预览失败:', error);
            const preview = document.querySelector('.status-bar-editor-modal .preview-container');
            if (preview) {
                preview.innerHTML = `<div style="color: red; padding: 10px;">预览错误: ${error.message}</div>`;
            }
        }
    }

    /**
     * 获取示例数据
     */
    getSampleData() {
        return {
            data: {
                name: '影之刃',
                health: 1240,
                maxHealth: 1580,
                energy: 320,
                maxEnergy: 450,
                level: 42,
                class: '暗影刺客',
                location: '暗影森林',
                mood: '警觉',
                items: [
                    { name: '暗影之牙', type: '武器', quantity: 1 },
                    { name: '治疗药水', type: '消耗品', quantity: 8 },
                    { name: '回城卷轴', type: '道具', quantity: 3 }
                ]
            },
            computed: {
                healthPercentage: 78,
                energyPercentage: 71,
                timestamp: new Date().toLocaleString()
            }
        };
    }

    /**
     * 🚀 增强的模板渲染 - 支持复杂数据路径和CSS样式
     */
    simpleTemplateRender(template, data) {
        try {
            let result = template;

            // 🔧 修复：支持复杂的数据路径，如 {{data.personal.name}}
            result = result.replace(/\{\{data\.([^}]+)\}\}/g, (match, path) => {
                try {
                    const keys = path.split('.');
                    let value = data.data;

                    for (const key of keys) {
                        if (value && typeof value === 'object' && key in value) {
                            value = value[key];
                        } else {
                            return ''; // 如果路径不存在，返回空字符串
                        }
                    }

                    return String(value || '');
                } catch (e) {
                    console.warn('[InfoBarSettings] 数据路径解析失败:', path, e);
                    return '';
                }
            });

            // 处理计算字段
            result = result.replace(/\{\{computed\.([^}]+)\}\}/g, (match, field) => {
                try {
                    const keys = field.split('.');
                    let value = data.computed;

                    for (const key of keys) {
                        if (value && typeof value === 'object' && key in value) {
                            value = value[key];
                        } else {
                            return '';
                        }
                    }

                    return String(value || '');
                } catch (e) {
                    console.warn('[InfoBarSettings] 计算字段解析失败:', field, e);
                    return '';
                }
            });

            // 🚀 新增：处理条件渲染 {{#if condition}}...{{/if}}
            result = result.replace(/\{\{#if\s+([^}]+)\}\}([\s\S]*?)\{\{\/if\}\}/g, (match, condition, content) => {
                try {
                    // 简单的条件判断
                    let conditionValue = false;

                    if (condition.startsWith('data.')) {
                        const path = condition.substring(5).split('.');
                        let value = data.data;
                        for (const key of path) {
                            if (value && typeof value === 'object' && key in value) {
                                value = value[key];
                            } else {
                                value = null;
                                break;
                            }
                        }
                        conditionValue = Boolean(value);
                    }

                    return conditionValue ? content : '';
                } catch (e) {
                    console.warn('[InfoBarSettings] 条件渲染解析失败:', condition, e);
                    return '';
                }
            });

            // 🚀 新增：处理循环渲染 {{#each array}}...{{/each}}
            result = result.replace(/\{\{#each\s+([^}]+)\}\}([\s\S]*?)\{\{\/each\}\}/g, (match, arrayPath, itemTemplate) => {
                try {
                    let arrayValue = [];

                    if (arrayPath.startsWith('data.')) {
                        const path = arrayPath.substring(5).split('.');
                        let value = data.data;
                        for (const key of path) {
                            if (value && typeof value === 'object' && key in value) {
                                value = value[key];
                            } else {
                                value = null;
                                break;
                            }
                        }
                        if (Array.isArray(value)) {
                            arrayValue = value;
                        }
                    }

                    return arrayValue.map((item, index) => {
                        let itemHtml = itemTemplate;
                        // 替换 {{this}} 为当前项
                        itemHtml = itemHtml.replace(/\{\{this\}\}/g, String(item || ''));
                        // 替换 {{@index}} 为索引
                        itemHtml = itemHtml.replace(/\{\{@index\}\}/g, String(index));
                        return itemHtml;
                    }).join('');
                } catch (e) {
                    console.warn('[InfoBarSettings] 循环渲染解析失败:', arrayPath, e);
                    return '';
                }
            });

            // 🔧 修复：确保CSS样式正确保留
            // 移除可能破坏CSS的转义
            result = result.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');

            console.log('[InfoBarSettings] ✅ 模板渲染完成，结果长度:', result.length);
            return result;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 模板渲染失败:', error);
            return `<div style="color: red; padding: 10px; border: 1px solid red; border-radius: 4px; background: #ffe6e6;">
                <strong>渲染错误:</strong> ${error.message}
                <br><small>请检查模板语法是否正确</small>
            </div>`;
        }
    }

    /**
     * 加载当前数据信息
     */
    async loadCurrentDataInfo() {
        try {
            const modal = document.querySelector('.html-template-editor-modal');
            if (!modal) return;

            // 获取启用的面板信息
            const enabledPanelsList = modal.querySelector('#enabled-panels-list');
            const availableFieldsList = modal.querySelector('#available-fields-list');

            if (enabledPanelsList) {
                const enabledPanels = this.getEnabledPanels();
                if (Object.keys(enabledPanels).length > 0) {
                    enabledPanelsList.innerHTML = Object.entries(enabledPanels)
                        .map(([panelId, config]) => `
                            <div style="margin: 5px 0; padding: 5px; background: var(--SmartThemeBodyColor, #333); border-radius: 3px;">
                                <strong>${config.name || panelId}</strong>
                                <div style="font-size: 11px; color: var(--SmartThemeQuoteColor, #888);">
                                    字段: ${(config.fields || []).join(', ') || '无'}
                                </div>
                            </div>
                        `).join('');
                } else {
                    enabledPanelsList.innerHTML = '<p style="color: var(--SmartThemeQuoteColor, #888);">暂无启用的面板</p>';
                }
            }

            if (availableFieldsList) {
                try {
                    // 获取当前数据字段
                    const fields = await this.getCurrentDataFields();

                    if (Object.keys(fields).length > 0) {
                        availableFieldsList.innerHTML = Object.entries(fields)
                            .map(([panelId, fieldList]) => `
                                <div style="margin: 5px 0;">
                                    <strong>${panelId}:</strong>
                                    <div style="font-size: 11px; margin-left: 10px;">
                                        ${fieldList.map(field => `<code style="background: ${this.getInfoBarThemeColor('surface')}; padding: 1px 3px; margin: 1px; border-radius: 2px; color: ${this.getInfoBarThemeColor('accent')};">{{data.${field}}}</code>`).join(' ')}
                                    </div>
                                </div>
                            `).join('');
                    } else {
                        availableFieldsList.innerHTML = `<p style="color: ${this.getInfoBarThemeColor('textSecondary')};">暂无可用数据字段</p>`;
                    }
                } catch (error) {
                    console.error('[InfoBarSettings] ❌ 加载数据字段失败:', error);
                    availableFieldsList.innerHTML = `<p style="color: ${this.getInfoBarThemeColor('textSecondary')};">加载数据字段失败</p>`;
                }
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载当前数据信息失败:', error);
        }
    }

    /**
     * 处理AI修改模板
     */
    async handleAIModifyTemplate() {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            if (!modal) return;

            const textarea = modal.querySelector('.html-template-textarea');
            const aiButton = modal.querySelector('[data-action="ai-modify-template"]');

            if (!textarea) return;

            const userTemplate = textarea.value.trim();
            if (!userTemplate) {
                alert('请先输入HTML模板代码');
                return;
            }

            // 显示加载状态
            aiButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> AI处理中...';
            aiButton.disabled = true;

            // 调用AI助手 - 使用自定义API
            try {
                // 获取当前启用的面板信息
                const enabledPanels = this.getEnabledPanels();
                const availableFields = await this.getCurrentDataFields();

                // 构建AI提示词
                const prompt = this.buildAIModifyPrompt(userTemplate, enabledPanels, availableFields);

                // 调用自定义API
                const modifiedTemplate = await this.callCustomAI(prompt);

                textarea.value = modifiedTemplate;
                this.updateTemplatePreview();

                // 显示成功消息
                this.showNotification('AI修改完成！', 'success');
            } catch (error) {
                console.error('[InfoBarSettings] ❌ AI修改失败:', error);
                throw new Error(`AI修改失败: ${error.message}`);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ AI修改模板失败:', error);
            this.showNotification(`AI修改失败: ${error.message}`, 'error');
        } finally {
            // 恢复按钮状态
            const aiButton = document.querySelector('.html-template-editor-modal [data-action="ai-modify-template"]');
            if (aiButton) {
                aiButton.innerHTML = '<i class="fas fa-magic"></i> AI一键修改';
                aiButton.disabled = false;
            }
        }
    }

    /**
     * 显示通知
     */
    showNotification(message, type = 'info') {
        // 创建通知元素
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            border-radius: 5px;
            z-index: 10001;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            max-width: 300px;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        // 3秒后自动移除
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    /**
     * 加载HTML模板
     */
    loadHTMLTemplate() {
        try {
            console.log('[InfoBarSettings] 📂 加载HTML模板...');

            const modal = document.querySelector('.status-bar-editor-modal');
            const textarea = modal?.querySelector('.html-template-textarea');

            if (!textarea) {
                console.error('[InfoBarSettings] ❌ 找不到模板文本区域');
                return;
            }

            // 获取保存的自定义HTML模板
            const context = SillyTavern.getContext();
            const extensionSettings = context?.extensionSettings || {};
            const configs = extensionSettings['Information bar integration tool'] || {};
            const customTemplate = configs.customHTMLTemplate;

            if (customTemplate) {
                console.log('[InfoBarSettings] ✅ 加载保存的自定义模板');
                textarea.value = customTemplate;
            } else {
                console.log('[InfoBarSettings] 📝 加载默认状态栏模板');
                // 加载你提供的状态栏模板
                textarea.value = this.getDefaultStatusBarTemplate();
            }

            // 更新预览
            this.updateTemplatePreview();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载HTML模板失败:', error);
        }
    }

    /**
     * 获取默认状态栏模板
     */
    getDefaultStatusBarTemplate() {
        return `<div class="container" style="
    display: flex;
    max-width: 1200px;
    width: 100%;
    background: rgba(15, 23, 42, 0.85);
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(94, 234, 212, 0.2);
    backdrop-filter: blur(10px);
    margin: 10px auto;
">
    <!-- 角色信息面板 -->
    <div class="character-panel" style="
        flex: 1;
        padding: 20px;
        background: linear-gradient(135deg, rgba(30, 41, 59, 0.9), rgba(15, 23, 42, 0.9));
        border-right: 1px solid rgba(94, 234, 212, 0.2);
        position: relative;
    ">
        <div class="character-header" style="
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        ">
            <div class="character-avatar" style="
                width: 50px;
                height: 50px;
                border-radius: 50%;
                background: linear-gradient(45deg, #5eead4, #06b6d4);
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 15px;
                box-shadow: 0 4px 15px rgba(94, 234, 212, 0.3);
            ">
                <i class="fas fa-user" style="color: #0f172a; font-size: 20px;"></i>
            </div>
            <div class="character-info">
                <h3 class="character-name" style="
                    margin: 0;
                    color: #5eead4;
                    font-size: 18px;
                    font-weight: 600;
                    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
                ">{{data.character.name || '测试角色'}}</h3>
                <p class="character-class" style="
                    margin: 2px 0 0 0;
                    color: #94a3b8;
                    font-size: 14px;
                ">{{data.character.class || '法师'}} - Lv.{{data.character.level || 30}}</p>
            </div>
        </div>

        <!-- 生命值条 -->
        <div class="stat-bar health-bar" style="margin-bottom: 12px;">
            <div class="stat-label" style="
                display: flex;
                justify-content: space-between;
                margin-bottom: 5px;
                font-size: 12px;
                color: #cbd5e1;
            ">
                <span><i class="fas fa-heart" style="color: #ef4444; margin-right: 5px;"></i>生命值</span>
                <span>{{data.character.health || 850}}/{{data.character.maxHealth || 1000}}</span>
            </div>
            <div class="progress-bar" style="
                width: 100%;
                height: 8px;
                background: rgba(15, 23, 42, 0.6);
                border-radius: 4px;
                overflow: hidden;
                border: 1px solid rgba(239, 68, 68, 0.3);
            ">
                <div class="progress-fill" style="
                    width: {{computed.healthPercentage || 85}}%;
                    height: 100%;
                    background: linear-gradient(90deg, #ef4444, #f87171);
                    transition: width 0.3s ease;
                    box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
                "></div>
            </div>
        </div>

        <!-- 魔法值条 -->
        <div class="stat-bar mana-bar" style="margin-bottom: 12px;">
            <div class="stat-label" style="
                display: flex;
                justify-content: space-between;
                margin-bottom: 5px;
                font-size: 12px;
                color: #cbd5e1;
            ">
                <span><i class="fas fa-magic" style="color: #3b82f6; margin-right: 5px;"></i>魔法值</span>
                <span>{{data.character.energy || 320}}/{{data.character.maxEnergy || 450}}</span>
            </div>
            <div class="progress-bar" style="
                width: 100%;
                height: 8px;
                background: rgba(15, 23, 42, 0.6);
                border-radius: 4px;
                overflow: hidden;
                border: 1px solid rgba(59, 130, 246, 0.3);
            ">
                <div class="progress-fill" style="
                    width: {{computed.energyPercentage || 71}}%;
                    height: 100%;
                    background: linear-gradient(90deg, #3b82f6, #60a5fa);
                    transition: width 0.3s ease;
                    box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
                "></div>
            </div>
        </div>

        <!-- 金币 -->
        <div class="gold-info" style="
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: rgba(251, 191, 36, 0.1);
            border-radius: 8px;
            border: 1px solid rgba(251, 191, 36, 0.2);
        ">
            <i class="fas fa-coins" style="color: #fbbf24; margin-right: 8px;"></i>
            <span style="color: #fbbf24; font-weight: 500;">{{data.character.gold || 2847}} 金币</span>
        </div>
    </div>

    <!-- 状态信息面板 -->
    <div class="status-panel" style="
        flex: 1;
        padding: 20px;
        background: linear-gradient(135deg, rgba(20, 30, 48, 0.9), rgba(15, 23, 42, 0.9));
        position: relative;
    ">
        <h4 style="
            margin: 0 0 15px 0;
            color: #5eead4;
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
        ">
            <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
            状态信息
        </h4>

        <div class="status-grid" style="
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
        ">
            <div class="status-item" style="
                padding: 10px;
                background: rgba(30, 41, 59, 0.5);
                border-radius: 8px;
                border: 1px solid rgba(94, 234, 212, 0.1);
            ">
                <div style="color: #94a3b8; font-size: 11px; margin-bottom: 3px;">位置</div>
                <div style="color: #e2e8f0; font-size: 13px; font-weight: 500;">{{data.status.location || '神秘森林'}}</div>
            </div>

            <div class="status-item" style="
                padding: 10px;
                background: rgba(30, 41, 59, 0.5);
                border-radius: 8px;
                border: 1px solid rgba(94, 234, 212, 0.1);
            ">
                <div style="color: #94a3b8; font-size: 11px; margin-bottom: 3px;">心情</div>
                <div style="color: #e2e8f0; font-size: 13px; font-weight: 500;">{{data.status.mood || '专注'}}</div>
            </div>

            <div class="status-item" style="
                padding: 10px;
                background: rgba(30, 41, 59, 0.5);
                border-radius: 8px;
                border: 1px solid rgba(94, 234, 212, 0.1);
            ">
                <div style="color: #94a3b8; font-size: 11px; margin-bottom: 3px;">时间</div>
                <div style="color: #e2e8f0; font-size: 13px; font-weight: 500;">{{data.status.time || '黄昏'}}</div>
            </div>

            <div class="status-item" style="
                padding: 10px;
                background: rgba(30, 41, 59, 0.5);
                border-radius: 8px;
                border: 1px solid rgba(94, 234, 212, 0.1);
            ">
                <div style="color: #94a3b8; font-size: 11px; margin-bottom: 3px;">天气</div>
                <div style="color: #e2e8f0; font-size: 13px; font-weight: 500;">{{data.status.weather || '晴朗'}}</div>
            </div>
        </div>

        <!-- 装饰性元素 -->
        <div style="
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(94, 234, 212, 0.2), transparent);
            animation: pulse 2s infinite;
        "></div>
    </div>
</div>

<style>
@keyframes pulse {
    0%, 100% { opacity: 0.5; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.1); }
}

.container:hover {
    transform: translateY(-2px);
    transition: transform 0.3s ease;
}

.stat-bar:hover .progress-fill {
    filter: brightness(1.2);
}

.status-item:hover {
    background: rgba(30, 41, 59, 0.7) !important;
    transform: translateY(-1px);
    transition: all 0.2s ease;
}
</style>`;
    }

    /**
     * 保存HTML模板
     */
    saveHTMLTemplate() {
        try {
            console.log('[InfoBarSettings] 💾 保存HTML模板...');

            const modal = document.querySelector('.status-bar-editor-modal');
            const textarea = modal?.querySelector('.html-template-textarea');

            if (!textarea) {
                console.error('[InfoBarSettings] ❌ 找不到模板文本区域');
                return;
            }

            const templateContent = textarea.value.trim();
            if (!templateContent) {
                console.warn('[InfoBarSettings] ⚠️ 模板内容为空');
                return;
            }

            // 保存到SillyTavern扩展设置
            const context = SillyTavern.getContext();
            const extensionSettings = context?.extensionSettings || {};
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            extensionSettings['Information bar integration tool'].customHTMLTemplate = templateContent;

            // 使用正确的保存方法
            context.saveSettingsDebounced();

            // 🔧 验证保存的完整性
            setTimeout(() => {
                const savedTemplate = extensionSettings['Information bar integration tool'].customHTMLTemplate;
                if (savedTemplate && savedTemplate.length === templateContent.length) {
                    console.log('[InfoBarSettings] ✅ HTML模板保存成功，长度验证通过:', templateContent.length);
                } else {
                    console.error('[InfoBarSettings] ❌ HTML模板保存可能不完整:', {
                        原始长度: templateContent.length,
                        保存后长度: savedTemplate?.length || 0
                    });
                }
            }, 100);

            console.log('[InfoBarSettings] ✅ HTML模板保存成功');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存HTML模板失败:', error);
        }
    }

    /**
     * 应用HTML模板
     */
    applyHTMLTemplate() {
        try {
            console.log('[InfoBarSettings] ✅ 应用HTML模板...');

            const modal = document.querySelector('.status-bar-editor-modal');
            const textarea = modal?.querySelector('.html-template-textarea');

            if (!textarea) {
                console.error('[InfoBarSettings] ❌ 找不到模板文本区域');
                return;
            }

            const templateContent = textarea.value.trim();
            if (!templateContent) {
                console.warn('[InfoBarSettings] ⚠️ 模板内容为空');
                return;
            }

            // 先保存模板
            this.saveHTMLTemplate();

            // 更新信息栏设置，启用自定义HTML模板风格
            const context = SillyTavern.getContext();
            const extensionSettings = context?.extensionSettings || {};
            if (!extensionSettings['Information bar integration tool']) {
                extensionSettings['Information bar integration tool'] = {};
            }

            // 正确设置为自定义HTML模板风格
            extensionSettings['Information bar integration tool'].style = {
                current: 'custom-html',
                lastUpdated: new Date().toISOString()
            };

            // 使用正确的保存方法
            context.saveSettingsDebounced();

            // 关闭编辑器
            modal.remove();

            // 刷新信息栏显示
            if (this.infoBarTool && this.infoBarTool.messageInfoBarRenderer) {
                this.infoBarTool.messageInfoBarRenderer.refreshAllInfoBars();
            }

            console.log('[InfoBarSettings] ✅ HTML模板应用成功，已切换到自定义HTML模板风格');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 应用HTML模板失败:', error);
        }
    }

    /**
     * 构建AI修改提示词
     */
    buildAIModifyPrompt(userTemplate, enabledPanels, availableFields) {
        // 🚀 构建简化的核心信息，避免token超限
        const coreFieldsInfo = this.buildCoreFieldsInfo(enabledPanels, availableFields);

        // 🔧 检测模板大小，决定处理策略
        const templateLength = userTemplate.length;
        console.log('[InfoBarSettings] 📏 模板长度检测:', templateLength, '字符');

        if (templateLength > 20000) {
            // 超大模板：只提供结构优化建议
            return `您的HTML模板过大(${templateLength}字符)，无法完整处理。请采用以下策略：

## 🎯 简化建议
1. 移除大量CSS样式，改用外部样式表
2. 删除复杂的JavaScript代码
3. 简化HTML结构，专注核心内容

## 📊 可用数据字段
${coreFieldsInfo}

## 🔧 数据绑定语法
- 基本绑定: {{data.personal.name}}
- 条件显示: {{#if data.field}}内容{{/if}}
- 循环列表: {{#each data.array}}{{this}}{{/each}}

请手动为关键元素添加数据绑定，然后重新使用AI优化。

## 📝 模板片段示例
\`\`\`html
<div class="player-info">
    <h2><i class="fas fa-user"></i> {{data.personal.name}}</h2>
    {{#if data.personal.level}}
    <p>等级: {{data.personal.level}}</p>
    {{/if}}
</div>
\`\`\``;
        } else if (templateLength > 10000) {
            // 大模板：精简处理
            const templatePreview = userTemplate.substring(0, 5000) + '\n\n[模板过长，已截断...]';
            return `优化HTML模板(简化版，原长度${templateLength}字符)：

## 📊 数据字段
${coreFieldsInfo}

## 🔧 语法
- {{data.panel.field}} - 数据绑定
- {{#if data.field}}{{/if}} - 条件显示

## 📝 用户模板(前5000字符)
${templatePreview}

## 要求
仅为关键元素添加数据绑定，保持原结构，添加必要的Font Awesome图标。返回完整HTML：`;
        } else {
            // 正常大小模板：完整处理
            return `优化以下HTML模板，添加数据绑定和现代化样式：

## 可用数据字段
${coreFieldsInfo}

## 语法规则
- 数据绑定: {{data.panelName.fieldName}}
- 条件显示: {{#if data.field}}内容{{/if}}
- 循环数组: {{#each data.array}}{{this}}{{/each}}

## 用户模板
${userTemplate}

## 要求
1. 保持原有布局结构
2. 添加所有可用数据字段的绑定
3. 使用现代CSS样式，支持深色主题
4. 添加适当的Font Awesome图标
5. 确保响应式设计
6. 为可选数据添加条件判断

直接返回完整的HTML代码，包含内联CSS：`;
        }
    }

    /**
     * 🔧 构建核心数据字段信息（简化版，避免token超限）
     */
    buildCoreFieldsInfo(enabledPanels, availableFields) {
        let info = '';

        if (enabledPanels && typeof enabledPanels === 'object') {
            const panelCount = Object.keys(enabledPanels).length;
            info += `启用面板(${panelCount}个): `;

            const panelNames = Object.entries(enabledPanels)
                .slice(0, 8) // 只显示前8个面板，避免过长
                .map(([panelId, config]) => `${panelId}`)
                .join(', ');

            info += panelNames;
            if (panelCount > 8) info += `, ...等${panelCount}个`;
            info += '\n\n';
        }

        // 简化的字段示例
        info += `数据访问示例:\n`;
        info += `- 角色信息: {{data.personal.name}}, {{data.personal.age}}\n`;
        info += `- 统计数据: {{data.stats.health}}, {{data.stats.level}}\n`;
        info += `- 物品道具: {{data.inventory.items}}\n`;
        info += `- 任务信息: {{data.tasks.current}}\n`;
        info += `- 位置信息: {{data.world.location}}\n`;

        return info;
    }

    /**
     * 🚀 构建详细的数据字段信息
     */
    buildDetailedFieldsInfo(enabledPanels, availableFields) {
        let info = '';

        if (enabledPanels && typeof enabledPanels === 'object') {
            const panelCount = Object.keys(enabledPanels).length;
            info += `### 启用的数据面板 (${panelCount}个)：\n\n`;

            Object.entries(enabledPanels).forEach(([panelId, panelConfig]) => {
                const panelName = this.getPanelDisplayName(panelId);
                const fieldsCount = this.countEnabledFields(panelConfig);

                info += `#### 📊 ${panelName} (${panelId})\n`;
                info += `- 状态: ${panelConfig.enabled !== false ? '✅ 已启用' : '❌ 已禁用'}\n`;
                info += `- 字段数量: ${fieldsCount}个\n`;
                info += `- 访问语法: \`{{data.${panelId}.fieldName}}\`\n\n`;
            });
        }

        if (availableFields && typeof availableFields === 'object') {
            const totalFields = Object.keys(availableFields).length;
            info += `### 可用数据字段 (${totalFields}个)：\n\n`;

            Object.entries(availableFields).forEach(([panelId, fields]) => {
                if (fields && typeof fields === 'object') {
                    const fieldList = Object.keys(fields);
                    if (fieldList.length > 0) {
                        info += `#### 🏷️ ${this.getPanelDisplayName(panelId)}面板字段:\n`;
                        fieldList.forEach(field => {
                            const fieldValue = fields[field];
                            const fieldType = typeof fieldValue;
                            info += `- \`{{data.${panelId}.${field}}}\` (${fieldType}) - 示例: "${fieldValue}"\n`;
                        });
                        info += '\n';
                    }
                }
            });
        }

        return info || '暂无可用的数据字段信息';
    }

    /**
     * 🎯 获取模板语法指南
     */
    getTemplateSyntaxGuide() {
        return `### 基础语法：
- \`{{data.fieldName}}\` - 输出字段值
- \`{{#if data.field}}\`内容\`{{/if}}\` - 条件渲染
- \`{{#each data.array}}\`项目内容\`{{/each}}\` - 循环渲染
- \`{{#unless data.field}}\`备用内容\`{{/unless}}\` - 反向条件

### 面板访问：
- \`{{data.character.name}}\` - 角色面板的name字段
- \`{{data.stats.health}}\` - 统计面板的health字段
- \`{{data.inventory.items}}\` - 物品面板的items数组

### 高级用法：
- \`{{data.stats.health}}/{{data.stats.maxHealth}}\` - 组合显示
- 支持嵌套对象和数组访问
- 自动处理undefined和null值`;
    }

    /**
     * 💡 获取数据绑定示例
     */
    getDataBindingExamples() {
        return `### 基础数据显示：
\`\`\`html
<div class="character-info">
    <h3>{{data.character.name}}</h3>
    <p>等级: {{data.character.level}}</p>
</div>
\`\`\`

### 条件渲染示例：
\`\`\`html
{{#if data.stats.health}}
<div class="health-bar">
    <span>生命值: {{data.stats.health}}/{{data.stats.maxHealth}}</span>
    <div class="progress-bar">
        <div style="width: {{data.stats.healthPercent}}%"></div>
    </div>
</div>
{{/if}}
\`\`\`

### 数组循环示例：
\`\`\`html
{{#if data.inventory.items}}
<ul class="inventory-list">
    {{#each data.inventory.items}}
    <li class="item">
        <i class="fas fa-box"></i>
        <span>{{this.name}} (x{{this.quantity}})</span>
    </li>
    {{/each}}
</ul>
{{/if}}
\`\`\``;
    }

    /**
     * 调用自定义AI API
     */
    async callCustomAI(prompt) {
        try {
            // 获取API配置
            const apiConfig = this.getAPIConfig();

            if (!apiConfig.enabled) {
                throw new Error('AI API未启用，请在扩展设置中配置API');
            }

            if (!apiConfig.apiKey) {
                throw new Error('API密钥未配置，请在扩展设置中添加API密钥');
            }

            if (!apiConfig.endpoint) {
                throw new Error('API端点未配置，请在扩展设置中配置API端点');
            }

            console.log('[InfoBarSettings] 🤖 调用自定义AI API...', {
                provider: apiConfig.provider,
                model: apiConfig.model,
                endpoint: apiConfig.endpoint,
                maxTokens: apiConfig.maxTokens,
                temperature: apiConfig.temperature,
                hasApiKey: !!apiConfig.apiKey
            });

            // 🔧 修复：确保端点正确
            if (!apiConfig.endpoint) {
                console.error('[InfoBarSettings] ❌ API端点为空:', apiConfig);
                throw new Error('API端点未配置，请检查扩展设置');
            }

            let requestBody, headers;

            // 根据不同的API提供商构建请求
            if (apiConfig.provider === 'gemini') {
                headers = {
                    'Content-Type': 'application/json',
                    'x-goog-api-key': apiConfig.apiKey,
                    ...apiConfig.headers
                };
                requestBody = {
                    contents: [{
                        parts: [{
                            text: `你是一个专业的HTML模板开发助手。请根据用户要求优化HTML模板，添加数据绑定。\n\n${prompt}`
                        }]
                    }],
                    generationConfig: {
                        maxOutputTokens: Math.min(apiConfig.maxTokens || 4000, 8000), // 🔧 使用用户设置，最大限制8000避免超限
                        temperature: apiConfig.temperature || 0.7, // 🔧 使用用户设置的温度
                        topP: 0.8,
                        topK: 20
                    }
                };
            } else {
                // 🔧 修复：OpenAI格式，使用用户配置的参数
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiConfig.apiKey}`,
                    ...apiConfig.headers
                };
                requestBody = {
                    model: apiConfig.model, // 使用用户配置的模型
                    messages: [
                        {
                            role: 'system',
                            content: '你是一个专业的HTML模板开发助手，专注于生成高质量、语义化的HTML代码。'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: Math.min(apiConfig.maxTokens || 4000, 8000), // 🔧 使用用户设置的最大令牌数，最大限制8000
                    temperature: apiConfig.temperature || 0.7 // 🔧 使用用户设置的温度
                };

                // 🔧 添加其他可选参数（如果用户配置了）
                if (apiConfig.topP !== undefined) {
                    requestBody.top_p = apiConfig.topP;
                }
                if (apiConfig.frequencyPenalty !== undefined) {
                    requestBody.frequency_penalty = apiConfig.frequencyPenalty;
                }
                if (apiConfig.presencePenalty !== undefined) {
                    requestBody.presence_penalty = apiConfig.presencePenalty;
                }
            }

            // 🔧 修复：使用统一的AbortController与中止按钮打通
            const controller = this.currentAPIController || (this.currentAPIController = new AbortController());
            // 统一超时句柄，便于在finally中清理
            this.currentAPITimeoutId = setTimeout(() => {
                try { controller.abort(); } catch (e) { /* noop */ }
            }, 60000); // 60秒超时

            // 生成并附加可追踪的请求ID
            this.currentAPIRequestId = this.currentAPIRequestId || `ib_${Date.now()}_${Math.random().toString(36).slice(2)}`;
            this.lastRequestUrl = apiConfig.endpoint;

            let response;
            let retryCount = 0;
            const maxRetries = apiConfig.retryCount || 2;

            while (retryCount <= maxRetries) {
                // 每次尝试前先检查是否已中止
                if (this._customAPIAborted || controller.signal.aborted) {
                    const abortErr = new Error('用户已中止API生成');
                    abortErr.name = 'AbortError';
                    abortErr.isUserAbort = true;
                    throw abortErr;
                }

                try {
                    console.log(`[InfoBarSettings] 🌐 发送API请求 (尝试 ${retryCount + 1}/${maxRetries + 1})`);

                    // 为请求头附加可追踪的Request-ID，供服务端取消
                    try { if (headers && typeof headers === 'object') { headers['X-Request-ID'] = this.currentAPIRequestId; } } catch {}

                    response = await fetch(apiConfig.endpoint, {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(requestBody),
                        signal: controller.signal
                    });

                    clearTimeout(this.currentAPITimeoutId);

                    if (response.ok) {
                        break; // 成功，跳出重试循环
                    } else if (response.status >= 500 && retryCount < maxRetries) {
                        // 服务器错误，可以重试
                        console.warn(`[InfoBarSettings] ⚠️ 服务器错误 ${response.status}，${2 ** retryCount}秒后重试...`);
                        await new Promise(resolve => setTimeout(resolve, 1000 * (2 ** retryCount)));
                        retryCount++;
                        continue;
                    } else {
                        // 客户端错误或重试次数用完
                        throw new Error(`API请求失败: ${response.status} ${response.statusText}`);
                    }
                } catch (error) {
                    clearTimeout(this.currentAPITimeoutId);

                    if (error.name === 'AbortError') {
                        // 如果是用户主动中止，保留AbortError并上抛给任务队列
                        if (this._customAPIAborted || controller.signal.aborted) {
                            error.isUserAbort = true;
                            throw error;
                        }
                        // 否则是超时等中止
                        throw error;
                    } else if (retryCount < maxRetries && (error.message.includes('fetch') || error.message.includes('network'))) {
                        console.warn(`[InfoBarSettings] ⚠️ 网络错误，${2 ** retryCount}秒后重试:`, error.message);
                        await new Promise(resolve => setTimeout(resolve, 1000 * (2 ** retryCount)));
                        retryCount++;
                        continue;
                    } else {
                        throw error;
                    }
                }
            }

            const data = await response.json();

            // 🔧 增加调试日志，帮助诊断API返回格式
            console.log('[InfoBarSettings] 📋 API返回数据结构:', JSON.stringify(data, null, 2));

            let result;
            if (apiConfig.provider === 'gemini') {
                // 🚀 增强Gemini API格式处理
                try {
                    if (!data.candidates || !Array.isArray(data.candidates) || data.candidates.length === 0) {
                        console.error('[InfoBarSettings] ❌ Gemini返回格式错误 - 无candidates:', data);
                        throw new Error(`Gemini API返回格式错误: 无candidates字段或为空数组`);
                    }

                    const candidate = data.candidates[0];
                    if (!candidate) {
                        console.error('[InfoBarSettings] ❌ Gemini返回格式错误 - 无candidate:', candidate);
                        throw new Error('Gemini API返回格式错误: candidate为空');
                    }

                    // 🚀 检查是否因为MAX_TOKENS导致响应被截断
                    if (candidate.finishReason === 'MAX_TOKENS') {
                        console.warn('[InfoBarSettings] ⚠️ Gemini响应被截断 - MAX_TOKENS，尝试提取部分内容:', candidate);

                        // 🔧 尝试获取截断前的部分内容
                        let partialContent = '';
                        if (candidate.content.parts && Array.isArray(candidate.content.parts) && candidate.content.parts.length > 0) {
                            const part = candidate.content.parts[0];
                            if (part && typeof part.text === 'string') {
                                partialContent = part.text.trim();
                            }
                        }

                        if (partialContent) {
                            console.log('[InfoBarSettings] 🔄 获取到部分内容，长度:', partialContent.length);

                            // 🎯 检查是否包含有效的HTML内容
                            if (partialContent.includes('<html') || partialContent.includes('<!DOCTYPE') || partialContent.includes('<div')) {
                                console.log('[InfoBarSettings] ✅ 检测到有效HTML内容，使用部分结果');
                                result = partialContent + '\n\n<!-- ⚠️ 内容被截断，建议简化模板后重新生成 -->';
                            } else {
                                // 如果不是HTML内容，返回建议
                                result = partialContent + '\n\n⚠️ AI建议：您的模板过大，请按照上述建议简化后重新尝试。';
                            }
                        } else {
                            throw new Error('AI响应被截断且无可用内容，请大幅简化HTML模板或减少提示词长度。');
                        }
                    }

                    // 🔧 如果不是MAX_TOKENS截断，进行正常内容处理
                    if (candidate.finishReason !== 'MAX_TOKENS') {
                        if (!candidate.content) {
                            console.error('[InfoBarSettings] ❌ Gemini返回格式错误 - 无content:', candidate);
                            throw new Error('Gemini API返回格式错误: candidate无content字段');
                        }

                        // 🔧 处理不同的content格式
                        let textContent = '';

                        if (candidate.content.parts && Array.isArray(candidate.content.parts) && candidate.content.parts.length > 0) {
                            // 标准格式：有parts数组
                            const part = candidate.content.parts[0];
                            if (part && typeof part.text === 'string') {
                                textContent = part.text.trim();
                            }
                        } else if (candidate.content.text && typeof candidate.content.text === 'string') {
                            // 备用格式：直接包含text字段
                            textContent = candidate.content.text.trim();
                        } else if (typeof candidate.content === 'string') {
                            // 备用格式：content直接是字符串
                            textContent = candidate.content.trim();
                        }

                        if (!textContent) {
                            console.error('[InfoBarSettings] ❌ Gemini返回内容为空:', candidate.content);
                            throw new Error('Gemini API返回的内容为空，可能是因为提示词太长或其他API限制');
                        }

                        result = textContent;
                        console.log('[InfoBarSettings] ✅ 成功解析Gemini返回内容，长度:', result.length);
                    }

                } catch (parseError) {
                    console.error('[InfoBarSettings] ❌ 解析Gemini返回内容失败:', parseError);
                    console.error('[InfoBarSettings] 📋 原始返回数据:', data);

                    // 🔧 尝试其他可能的格式
                    if (data.text) {
                        console.log('[InfoBarSettings] 🔄 尝试直接使用data.text');
                        result = data.text.trim();
                    } else if (data.content && typeof data.content === 'string') {
                        console.log('[InfoBarSettings] 🔄 尝试使用data.content');
                        result = data.content.trim();
                    } else if (typeof data === 'string') {
                        console.log('[InfoBarSettings] 🔄 尝试直接使用data字符串');
                        result = data.trim();
                    } else {
                        throw parseError;
                    }
                }
            } else {
                // OpenAI格式
                if (!data.choices || !data.choices[0] || !data.choices[0].message) {
                    throw new Error('AI API返回格式错误');
                }
                result = data.choices[0].message.content.trim();
            }

            // 清理返回的代码
            return this.cleanAIResponse(result);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 自定义AI API调用失败:', error);
            throw error;
        }
    }

    /**
     * 获取API配置
     */
    getAPIConfig() {
        try {
            // 🔧 修复：正确获取扩展设置
            let apiConfig = {};

            // 方法1：从全局扩展设置获取
            if (window.extension_settings && window.extension_settings['Information bar integration tool']) {
                apiConfig = window.extension_settings['Information bar integration tool'].apiConfig || {};
            }
            // 方法2：从SillyTavern上下文获取（备用）
            else if (typeof SillyTavern !== 'undefined' && SillyTavern.getContext) {
                const context = SillyTavern.getContext();
                const extensionSettings = context?.extensionSettings || {};
                const configs = extensionSettings['Information bar integration tool'] || {};
                apiConfig = configs.apiConfig || {};
            }
            // 方法3：从本地存储获取（最后备用）
            else {
                try {
                    const stored = localStorage.getItem('InfoBarSettings_apiConfig');
                    if (stored) {
                        apiConfig = JSON.parse(stored);
                    }
                } catch (e) {
                    console.warn('[InfoBarSettings] ⚠️ 从本地存储获取API配置失败:', e);
                }
            }

            console.log('[InfoBarSettings] 📊 获取API配置:', {
                enabled: apiConfig.enabled,
                provider: apiConfig.provider,
                model: apiConfig.model,
                maxTokens: apiConfig.maxTokens,
                temperature: apiConfig.temperature,
                hasApiKey: !!apiConfig.apiKey,
                endpoint: apiConfig.endpoint,
                baseUrl: apiConfig.baseUrl, // 🔧 添加baseUrl调试
                rawEndpoint: apiConfig.endpoint
            });

            // 🔧 修复：构建正确的端点URL，支持baseUrl和endpoint
            let endpoint = apiConfig.endpoint || apiConfig.baseUrl;

            // 🔧 修复：对于自定义provider，处理baseUrl和endpoint
            if (apiConfig.provider === 'custom') {
                if (!endpoint) {
                    console.warn('[InfoBarSettings] ⚠️ 自定义API提供商未配置端点，将在调用时检查');
                    // 不在这里抛错，而是在实际调用时检查
                } else {
                    // 🔧 修复：构建完整的chat completions端点
                    if (!endpoint.includes('/chat/completions')) {
                        // 如果是baseUrl格式，添加chat/completions路径
                        if (endpoint.endsWith('/v1') || endpoint.endsWith('/v1/')) {
                            endpoint = endpoint.replace(/\/v1\/?$/, '/v1/chat/completions');
                        } else if (endpoint.includes('/models')) {
                            endpoint = endpoint.replace('/models', '/chat/completions');
                        } else if (!endpoint.includes('/chat/completions')) {
                            // 如果没有具体路径，添加默认路径
                            endpoint = endpoint.replace(/\/$/, '') + '/chat/completions';
                        }
                        console.log('[InfoBarSettings] 🔧 构建完整端点:', endpoint);
                    }
                }
            } else if (apiConfig.provider === 'gemini') {
                // 🔧 修复：Gemini需要特殊的端点格式
                const model = apiConfig.model || 'gemini-pro';
                if (!endpoint || endpoint === 'https://generativelanguage.googleapis.com' || !endpoint.includes(':generateContent')) {
                    endpoint = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`;
                    console.log('[InfoBarSettings] 🔧 构建Gemini端点:', endpoint);
                }
            } else if (!endpoint) {
                try {
                    endpoint = this.getDefaultEndpoint(apiConfig.provider);
                } catch (e) {
                    console.warn('[InfoBarSettings] ⚠️ 获取默认端点失败:', e.message);
                    endpoint = ''; // 设为空，在调用时再检查
                }
            }

            return {
                enabled: apiConfig.enabled || false,
                endpoint: endpoint,
                apiKey: apiConfig.apiKey || '',
                model: apiConfig.model || 'gpt-3.5-turbo',
                provider: apiConfig.provider || 'openai',
                headers: apiConfig.headers || {},
                // 🔧 添加缺失的配置字段
                maxTokens: apiConfig.maxTokens || 4000, // 从用户设置或默认4000
                temperature: apiConfig.temperature || 0.7,
                retryCount: apiConfig.retryCount || 3,
                format: apiConfig.format || 'native'
            };
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取API配置失败:', error);
            console.error('[InfoBarSettings] 错误堆栈:', error.stack);
            console.error('[InfoBarSettings] 错误发生位置，原始配置:', {
                hasExtensionSettings: !!window.extension_settings,
                hasInfoBarConfig: !!(window.extension_settings && window.extension_settings['Information bar integration tool']),
                hasSillyTavern: typeof SillyTavern !== 'undefined'
            });
            return { enabled: false };
        }
    }

    /**
     * 获取默认API端点
     */
    getDefaultEndpoint(provider) {
        const endpoints = {
            openai: 'https://api.openai.com/v1/chat/completions',
            anthropic: 'https://api.anthropic.com/v1/messages',
            gemini: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'
            // 🔧 修复：移除custom的默认端点，custom必须由用户配置
        };

        // 🔧 修复：custom provider返回空字符串，不抛错
        if (provider === 'custom') {
            console.warn('[InfoBarSettings] ⚠️ 自定义provider需要用户配置端点');
            return ''; // 返回空字符串而不是抛错
        }

        return endpoints[provider] || endpoints.openai;
    }

    /**
     * 🚀 增强的AI响应清理
     */
    cleanAIResponse(response) {
        if (!response || typeof response !== 'string') {
            console.warn('[InfoBarSettings] ⚠️ AI响应为空或非字符串:', typeof response);
            return '';
        }

        console.log('[InfoBarSettings] 🧹 开始清理AI响应，原长度:', response.length);

        let cleaned = response;

        // 🔧 移除各种代码块标记
        cleaned = cleaned.replace(/```html\s*\n?/gi, '');
        cleaned = cleaned.replace(/```css\s*\n?/gi, '');
        cleaned = cleaned.replace(/```javascript\s*\n?/gi, '');
        cleaned = cleaned.replace(/```js\s*\n?/gi, '');
        cleaned = cleaned.replace(/```\s*\n?/g, '');

        // 🔧 移除可能的markdown格式
        cleaned = cleaned.replace(/^#+\s+.*$/gm, ''); // 移除标题
        cleaned = cleaned.replace(/^\*\*.*\*\*$/gm, ''); // 移除粗体行
        cleaned = cleaned.replace(/^[-*]\s+.*$/gm, ''); // 移除列表项

        // 🔧 移除AI可能添加的说明文字
        const removePatterns = [
            /^(这里是|以下是|这是一个|修改后的|优化后的).*HTML.*$/gim,
            /^.*完整.*HTML.*代码.*$/gim,
            /^.*修改.*模板.*$/gim,
            /^.*优化.*建议.*$/gim,
            /^.*注意事项.*$/gim,
            /^.*说明.*$/gim,
            /^.*解释.*$/gim
        ];

        removePatterns.forEach(pattern => {
            cleaned = cleaned.replace(pattern, '');
        });

        // 🔧 查找并提取HTML内容
        const htmlMatch = cleaned.match(/<[^>]+>/);
        if (htmlMatch) {
            // 找到HTML标签的起始位置
            const htmlStart = cleaned.indexOf(htmlMatch[0]);
            if (htmlStart > 0) {
                // 移除HTML之前的所有说明文字
                cleaned = cleaned.substring(htmlStart);
                console.log('[InfoBarSettings] ✂️ 移除了HTML之前的说明文字');
            }
        }

        // 🔧 移除多余的空行
        cleaned = cleaned.replace(/\n\s*\n\s*\n+/g, '\n\n');
        cleaned = cleaned.replace(/^\s*\n+/g, ''); // 移除开头空行
        cleaned = cleaned.replace(/\n+\s*$/g, ''); // 移除结尾空行

        // 🔧 基本HTML验证
        const result = cleaned.trim();

        if (!result) {
            console.error('[InfoBarSettings] ❌ 清理后AI响应为空');
            throw new Error('AI返回的内容清理后为空');
        }

        // 检查是否包含基本HTML结构
        const hasHTMLTags = /<[^>]+>/.test(result);
        if (!hasHTMLTags) {
            console.warn('[InfoBarSettings] ⚠️ 清理后的内容可能不是有效的HTML');
        }

        console.log('[InfoBarSettings] ✅ AI响应清理完成，最终长度:', result.length);
        console.log('[InfoBarSettings] 📋 清理后内容预览:', result.substring(0, 200) + '...');

        return result;
    }

    /**
     * 🔧 删除：重复的getEnabledPanels方法已删除
     * 原因：该方法与第一个getEnabledPanels方法重复，且返回错误的面板ID
     * 修复：使用第一个正确的getEnabledPanels方法，该方法使用标准面板ID
     */

    /**
     * 获取当前数据字段
     */
    async getCurrentDataFields() {
        try {
            // 从统一数据核心获取当前数据结构
            const infoBarTool = window.SillyTavernInfobar?.modules?.infoBarTool;
            if (infoBarTool && infoBarTool.dataCore) {
                // 使用正确的方法获取所有面板数据
                const allPanelData = await infoBarTool.dataCore.getAllPanelData();
                if (allPanelData && Object.keys(allPanelData).length > 0) {
                    const fields = {};
                    Object.entries(allPanelData).forEach(([panelId, panelData]) => {
                        fields[panelId] = Object.keys(panelData || {});
                    });
                    return fields;
                }

                // 尝试获取聊天数据
                const chatData = await infoBarTool.dataCore.getAllData('chat');
                if (chatData) {
                    const fields = {};
                    // 查找面板数据
                    Object.entries(chatData).forEach(([key, value]) => {
                        if (key.startsWith('panels.') && value) {
                            const panelId = key.split('.').pop();
                            fields[panelId] = Object.keys(value);
                        }
                    });
                    if (Object.keys(fields).length > 0) {
                        return fields;
                    }
                }
            }

            // 如果没有实际数据，返回示例字段
            return {
                character: ['name', 'class', 'level', 'health', 'maxHealth', 'energy', 'maxEnergy'],
                status: ['location', 'mood', 'time', 'weather'],
                inventory: ['items', 'gold', 'gems'],
                skills: ['skills', 'experience']
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取当前数据字段失败:', error);
            // 返回示例字段作为回退
            return {
                character: ['name', 'class', 'level', 'health', 'maxHealth', 'energy', 'maxEnergy'],
                status: ['location', 'mood', 'time', 'weather'],
                inventory: ['items', 'gold', 'gems'],
                skills: ['skills', 'experience']
            };
        }
    }

    /**
     * 🚀 新增：加载高级数据信息
     */
    loadAdvancedDataInfo() {
        try {
            // 加载当前启用的面板
            this.loadEnabledPanelsList();

            // 加载可用字段
            this.loadAvailableFieldsList();

            // 绑定快速插入按钮事件
            this.bindQuickInsertEvents();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载高级数据信息失败:', error);
        }
    }

    /**
     * 🚀 新增：加载当前启用的面板列表
     */
    async loadEnabledPanelsList() {
        try {
            const panelsList = document.querySelector('#enabled-panels-list');
            if (!panelsList) return;

            console.log('[InfoBarSettings] 📊 加载启用的面板列表...');

            // 获取当前启用的面板
            const enabledPanels = this.getEnabledPanels(); // 移除await，因为这是同步方法

            if (enabledPanels && Object.keys(enabledPanels).length > 0) {
                const themeColors = {
                    text: this.getInfoBarThemeColor('text'),
                    textSecondary: this.getInfoBarThemeColor('textSecondary'),
                    accent: this.getInfoBarThemeColor('accent'),
                    background: this.getInfoBarThemeColor('background'),
                    border: this.getInfoBarThemeColor('border')
                };

                // 🔧 修复：将面板对象转换为数组进行处理
                const panelsHTML = Object.entries(enabledPanels).map(([panelId, panelConfig]) => `
                    <div style="
                        display: flex;
                        align-items: center;
                        padding: 6px 8px;
                        margin-bottom: 4px;
                        background: ${themeColors.background};
                        border: 1px solid ${themeColors.border};
                        border-radius: 3px;
                        color: ${themeColors.text};
                        font-size: 11px;
                    ">
                        <i class="${this.getPanelIcon(panelId)}" style="
                            color: ${themeColors.accent};
                            margin-right: 6px;
                            font-size: 10px;
                        "></i>
                        <span style="flex-grow: 1;">${this.getPanelDisplayName(panelId)}</span>
                        <span style="
                            color: ${themeColors.textSecondary};
                            font-size: 9px;
                        ">${this.countEnabledFields(panelConfig)}个字段</span>
                    </div>
                `).join('');

                panelsList.innerHTML = panelsHTML;
            } else {
                panelsList.innerHTML = `
                    <div style="
                        text-align: center;
                        padding: 20px;
                        color: ${this.getInfoBarThemeColor('textSecondary')};
                        font-size: 11px;
                    ">
                        <i class="fas fa-info-circle" style="margin-bottom: 8px; display: block; font-size: 16px;"></i>
                        暂无启用的数据面板<br>
                        <small style="font-size: 9px;">请先在面板管理中启用数据面板</small>
                    </div>
                `;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载启用面板列表失败:', error);
            const panelsList = document.querySelector('#enabled-panels-list');
            if (panelsList) {
                panelsList.innerHTML = `
                    <div style="color: #FF5722; font-size: 11px; text-align: center; padding: 10px;">
                        <i class="fas fa-exclamation-triangle"></i> 加载失败
                    </div>
                `;
            }
        }
    }

    /**
     * 🔧 新增：计算面板中启用的字段数量
     */
    countEnabledFields(panelConfig) {
        if (!panelConfig || typeof panelConfig !== 'object') return 0;

        let count = 0;
        // 计算基本字段
        Object.entries(panelConfig).forEach(([key, value]) => {
            if (key !== 'enabled' && key !== 'name' && key !== 'subItems' && value && value.enabled !== false) {
                count++;
            }
        });

        // 计算子项
        if (panelConfig.subItems && Array.isArray(panelConfig.subItems)) {
            count += panelConfig.subItems.filter(item => item.enabled).length;
        }

        return count;
    }

    /**
     * 🔧 新增：获取面板图标
     */
    getPanelIcon(panelId) {
        const iconMap = {
            'character': 'fas fa-user',
            'stats': 'fas fa-chart-bar',
            'inventory': 'fas fa-box',
            'location': 'fas fa-map-marker-alt',
            'relationship': 'fas fa-heart',
            'story': 'fas fa-book',
            'custom': 'fas fa-layer-group',
            'custom1': 'fas fa-cube',
            'custom2': 'fas fa-puzzle-piece',
            'custom3': 'fas fa-star'
        };

        // 检查panelId是否匹配自定义面板格式
        if (panelId && panelId.toLowerCase().startsWith('custom')) {
            if (panelId === 'custom') return iconMap['custom'];
            // 处理 custom_xxxxx 格式
            if (panelId.includes('_')) {
                return iconMap['custom'];
            }
            // 处理 Custom1, Custom2 等格式
            const customMatch = panelId.match(/^custom(\d+)$/i);
            if (customMatch) {
                const num = parseInt(customMatch[1]);
                return iconMap[`custom${Math.min(num, 3)}`] || iconMap['custom'];
            }
        }

        return iconMap[panelId] || 'fas fa-layer-group';
    }

    /**
     * 🚀 新增：加载可用字段列表
     */
    async loadAvailableFieldsList() {
        try {
            const fieldsList = document.querySelector('#available-fields-list');
            if (!fieldsList) return;

            console.log('[InfoBarSettings] 🏷️ 加载可用字段列表...');

            // 获取当前数据字段
            const dataFields = await this.getCurrentDataFields();

            if (dataFields && Object.keys(dataFields).length > 0) {
                const themeColors = {
                    text: this.getInfoBarThemeColor('text'),
                    textSecondary: this.getInfoBarThemeColor('textSecondary'),
                    accent: this.getInfoBarThemeColor('accent'),
                    background: this.getInfoBarThemeColor('background'),
                    border: this.getInfoBarThemeColor('border')
                };

                let fieldsHTML = '';

                Object.entries(dataFields).forEach(([panelId, fields]) => {
                    if (fields && fields.length > 0) {
                        fieldsHTML += `
                            <div style="margin-bottom: 12px;">
                                <div style="
                                    font-weight: 600;
                                    color: ${themeColors.accent};
                                    font-size: 11px;
                                    margin-bottom: 6px;
                                    padding-bottom: 3px;
                                    border-bottom: 1px solid ${themeColors.border};
                                ">
                                    ${this.getPanelDisplayName(panelId)}
                                </div>
                                <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                        `;

                        fields.forEach(field => {
                            fieldsHTML += `
                                <button class="field-insert-btn"
                                        data-insert="{{data.${field}}}"
                                        style="
                                    padding: 2px 6px;
                                    background: transparent;
                                    border: 1px solid ${themeColors.border};
                                    color: ${themeColors.text};
                                    border-radius: 2px;
                                    cursor: pointer;
                                    font-size: 9px;
                                    transition: all 0.2s ease;
                                " onmouseover="this.style.background='${themeColors.accent}'; this.style.color='${themeColors.background}'"
                                   onmouseout="this.style.background='transparent'; this.style.color='${themeColors.text}'">
                                    ${field}
                                </button>
                            `;
                        });

                        fieldsHTML += `
                                </div>
                            </div>
                        `;
                    }
                });

                fieldsList.innerHTML = fieldsHTML;

                // 绑定字段插入按钮事件
                fieldsList.querySelectorAll('.field-insert-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        this.insertTemplateText(btn.dataset.insert);
                    });
                });

            } else {
                fieldsList.innerHTML = `
                    <div style="
                        text-align: center;
                        padding: 20px;
                        color: ${this.getInfoBarThemeColor('textSecondary')};
                        font-size: 11px;
                    ">
                        <i class="fas fa-database" style="margin-bottom: 8px; display: block; font-size: 16px;"></i>
                        暂无可用数据字段<br>
                        <small style="font-size: 9px;">请先发送AI消息生成数据</small>
                    </div>
                `;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载可用字段列表失败:', error);
            const fieldsList = document.querySelector('#available-fields-list');
            if (fieldsList) {
                fieldsList.innerHTML = `
                    <div style="color: #FF5722; font-size: 11px; text-align: center; padding: 10px;">
                        <i class="fas fa-exclamation-triangle"></i> 加载失败
                    </div>
                `;
            }
        }
    }

    /**
     * 🚀 新增：获取面板显示名称
     */
    getPanelDisplayName(panelId) {
        const panelNames = {
            character: '🧙‍♂️ 角色信息',
            status: '💖 状态显示',
            inventory: '🎒 物品背包',
            skills: '⚡ 技能能力',
            world: '🌍 世界信息',
            tasks: '📋 任务管理',
            relationships: '👥 人际关系',
            lore: '📚 传说典故',
            combat: '⚔️ 战斗状态',
            progress: '📈 进度追踪'
        };

        return panelNames[panelId] || `📊 ${panelId}`;
    }

    /**
     * 🚀 新增：绑定快速插入事件
     */
    bindQuickInsertEvents() {
        try {
            const modal = document.querySelector('.html-template-editor-modal');
            if (!modal) return;

            // 重新绑定快速插入按钮
            modal.querySelectorAll('.quick-insert-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    this.insertTemplateText(btn.dataset.insert);
                });
            });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定快速插入事件失败:', error);
        }
    }

    /**
     * 🚀 新增：初始化语法高亮
     */
    initSyntaxHighlight() {
        try {
            // 简单的语法高亮实现
            console.log('[InfoBarSettings] 🎨 语法高亮初始化完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化语法高亮失败:', error);
        }
    }

    /**
     * 🚀 新增：切换自动换行
     */
    toggleWordWrap() {
        try {
            const textarea = document.querySelector('.html-template-textarea');
            if (!textarea) return;

            const isWrapped = textarea.style.whiteSpace === 'pre-wrap';
            textarea.style.whiteSpace = isWrapped ? 'pre' : 'pre-wrap';
            textarea.style.overflowWrap = isWrapped ? 'normal' : 'break-word';

            console.log('[InfoBarSettings] 🔄 自动换行已', isWrapped ? '关闭' : '开启');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 切换自动换行失败:', error);
        }
    }

    /**
     * 🚀 新增：处理编辑器键盘事件
     */
    handleEditorKeydown(e) {
        try {
            // Ctrl+S 保存
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                this.saveHTMLTemplate();
                return;
            }

            // Ctrl+Shift+F 格式化
            if (e.ctrlKey && e.shiftKey && e.key === 'F') {
                e.preventDefault();
                this.formatTemplate();
                return;
            }

            // Tab 键插入空格
            if (e.key === 'Tab') {
                e.preventDefault();
                const textarea = e.target;
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;

                textarea.value = textarea.value.substring(0, start) + '  ' + textarea.value.substring(end);
                textarea.selectionStart = textarea.selectionEnd = start + 2;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理键盘事件失败:', error);
        }
    }

    /**
     * 🚀 新增：调整编辑器布局
     */
    adjustEditorLayout() {
        try {
            const modal = document.querySelector('.html-template-editor-modal');
            if (!modal) return;

            // 响应式布局调整逻辑
            const container = modal.querySelector('.html-template-editor-container');
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;

            if (windowWidth < 1200) {
                // 小屏幕优化
                container.style.minWidth = '90vw';
                container.style.maxWidth = '95vw';
            } else {
                // 恢复正常尺寸
                container.style.minWidth = '800px';
                container.style.maxWidth = '1600px';
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 调整编辑器布局失败:', error);
        }
    }

    /**
     * 🚀 新增：绑定语法帮助事件
     */
    bindSyntaxHelpEvents() {
        try {
            // 语法帮助相关事件绑定
            console.log('[InfoBarSettings] ✅ 语法帮助事件绑定完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定语法帮助事件失败:', error);
        }
    }

    /**
     * 🚀 新增：加载模板库
     */
    loadTemplateLibrary() {
        try {
            // 模板库加载逻辑
            console.log('[InfoBarSettings] ✅ 模板库加载完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载模板库失败:', error);
        }
    }

    /**
     * 🚀 新增：创建模板库信息
     */
    createTemplateLibraryInfo() {
        const themeColors = {
            background: this.getInfoBarThemeColor('background'),
            surface: this.getInfoBarThemeColor('surface'),
            border: this.getInfoBarThemeColor('border'),
            text: this.getInfoBarThemeColor('text'),
            textSecondary: this.getInfoBarThemeColor('textSecondary'),
            accent: this.getInfoBarThemeColor('accent')
        };

        return `
            <div class="template-library-info">
                <div class="template-categories">
                    <h4 style="margin: 0 0 10px 0; color: ${themeColors.accent}; font-size: 13px; font-weight: 600;">
                        <i class="fas fa-layer-group"></i> 模板分类
                    </h4>
                    <div style="color: ${themeColors.textSecondary}; font-size: 11px;">
                        模板库功能开发中...
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 🚀 处理AI创作状态栏
     */
    async handleAICreateStatusBar() {
        try {
            console.log('[InfoBarSettings] 🤖 开始AI创作状态栏...');

            const modal = document.querySelector('.status-bar-editor-modal');
            const aiButton = modal?.querySelector('[data-action="ai-create-status-bar"]');

            if (!aiButton) return;

            // 显示加载状态
            const originalText = aiButton.innerHTML;
            aiButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> AI创作中...';
            aiButton.disabled = true;

            try {
                // 获取当前启用的面板和数据获取方式
                const enabledPanels = await this.getEnabledPanelsForAI();
                const dataAccessMethods = await this.generateDataAccessMethods(enabledPanels);

                // 构建AI创作提示词
                const prompt = this.buildAICreateStatusBarPrompt(enabledPanels, dataAccessMethods);

                // 调用AI生成状态栏
                const generatedStatusBar = await this.callAIForStatusBarCreation(prompt);

                // 将生成的状态栏插入到编辑器
                const textarea = modal?.querySelector('.html-template-textarea');
                if (textarea && generatedStatusBar) {
                    textarea.value = generatedStatusBar;

                    // 更新预览
                    this.updateTemplatePreview();
                    this.updateEditorStatus();

                    console.log('[InfoBarSettings] ✅ AI状态栏创作完成');
                    this.showNotification('AI状态栏创作完成！', 'success');
                }

            } catch (error) {
                console.error('[InfoBarSettings] ❌ AI创作状态栏失败:', error);
                this.showNotification(`AI创作失败: ${error.message}`, 'error');
            } finally {
                // 恢复按钮状态
                aiButton.innerHTML = originalText;
                aiButton.disabled = false;
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理AI创作状态栏失败:', error);
        }
    }

    /**
     * 🚀 获取启用的面板信息（用于AI）
     */
    async getEnabledPanelsForAI() {
        try {
            console.log('[InfoBarSettings] 📊 获取启用面板信息...');

            // 使用SmartPromptSystem的方法获取启用面板
            const smartPromptSystem = window.SillyTavernInfobar?.modules?.smartPromptSystem;
            if (smartPromptSystem && typeof smartPromptSystem.getEnabledPanels === 'function') {
                const panels = await smartPromptSystem.getEnabledPanels();
                const enabledPanels = panels.map(panel => ({
                    id: panel.id,
                    name: panel.name || this.getPanelDisplayName(panel.id),
                    config: panel,
                    subItems: (panel.subItems || []).map(subItem => ({
                        key: subItem.key,
                        name: subItem.name || this.getSubItemDisplayName(panel.id, subItem.key),
                        config: subItem
                    }))
                }));

                console.log('[InfoBarSettings] ✅ 获取到启用面板:', enabledPanels.length, '个');
                return enabledPanels;
            }

            // 🔧 修复：备用方法，使用与SmartPromptSystem相同的逻辑
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            const enabledPanels = [];

            // 基础面板
            const basicPanelIds = [
                'personal', 'world', 'interaction', 'tasks', 'organization',
                'news', 'inventory', 'abilities', 'plot', 'cultivation',
                'fantasy', 'modern', 'historical', 'magic', 'training'
            ];

            for (const panelId of basicPanelIds) {
                if (configs[panelId]) {
                    const panel = configs[panelId];
                    const isEnabled = panel.enabled !== false; // 默认为true，除非明确设置为false

                    if (isEnabled) {
                        // 🔧 修复：同时处理基础设置复选框和面板管理自定义子项
                        const allSubItems = [];

                        // 1. 处理基础设置中的复选框配置（panel[key].enabled格式）
                        const subItemKeys = Object.keys(panel).filter(key =>
                            key !== 'enabled' &&
                            key !== 'subItems' &&     // 排除自定义子项数组
                            key !== 'description' &&  // 排除面板属性
                            key !== 'icon' &&
                            key !== 'required' &&
                            key !== 'memoryInject' &&
                            key !== 'prompts' &&
                            typeof panel[key] === 'object' &&
                            panel[key].enabled !== undefined
                        );
                        const enabledSubItems = subItemKeys.filter(key => panel[key].enabled === true);

                        // 添加基础设置的子项
                        enabledSubItems.forEach(key => {
                            allSubItems.push({
                                key: key,
                                name: panel[key].name || this.getSubItemDisplayName(panelId, key),
                                enabled: true,
                                value: panel[key].value || '',
                                source: 'basicSettings'
                            });
                        });

                        // 2. 处理面板管理中的自定义子项（panel.subItems数组格式）
                        let enabledCustomSubItems = [];
                        if (panel.subItems && Array.isArray(panel.subItems)) {
                            enabledCustomSubItems = panel.subItems.filter(subItem => subItem.enabled !== false);

                            // 创建键名集合，避免重复添加
                            const existingKeys = new Set(allSubItems.map(item => item.key));

                            enabledCustomSubItems.forEach(subItem => {
                                const key = subItem.key || subItem.name.toLowerCase().replace(/\s+/g, '_');

                                // 检查是否已存在，避免重复
                                if (!existingKeys.has(key)) {
                                    allSubItems.push({
                                        key: key,
                                        name: subItem.displayName || subItem.name,
                                        enabled: true,
                                        value: subItem.value || '',
                                        source: 'panelManagement'
                                    });
                                    existingKeys.add(key);
                                }
                            });
                        }

                        if (allSubItems.length > 0) {
                            enabledPanels.push({
                                id: panelId,
                                name: this.getPanelDisplayName(panelId),
                                config: panel,
                                subItems: allSubItems
                            });
                        }
                    }
                }
            }

            // 🔧 修复：检查自定义面板，使用与SmartPromptSystem相同的逻辑
            if (configs.customPanels) {
                for (const [panelId, panelConfig] of Object.entries(configs.customPanels)) {
                    if (panelConfig && panelConfig.enabled !== false) { // 默认启用，除非明确设置为false
                        const allSubItems = panelConfig.subItems || [];
                        // 只统计启用的子项
                        const enabledSubItems = allSubItems.filter(subItem => subItem.enabled !== false);

                        // 处理启用的子项
                        const processedSubItems = enabledSubItems.map(subItem => {
                            // 处理不同的子项格式
                            if (typeof subItem === 'string') {
                                return {
                                    key: subItem,
                                    name: subItem,
                                    enabled: true,
                                    value: ''
                                };
                            } else if (subItem && typeof subItem === 'object') {
                                return {
                                    key: subItem.key || subItem.name || subItem.id,
                                    name: subItem.name || subItem.displayName || subItem.key || subItem.id,
                                    enabled: subItem.enabled !== false,
                                    value: subItem.value || ''
                                };
                            }
                            return null;
                        }).filter(Boolean);

                        enabledPanels.push({
                            id: panelId,
                            key: panelConfig.key || panelId, // 添加key属性
                            type: 'custom',
                            name: panelConfig.name || '未命名面板',
                            config: panelConfig,
                            subItems: processedSubItems
                        });
                    }
                }
            }

            console.log('[InfoBarSettings] ✅ 获取到启用面板:', enabledPanels.length, '个');
            return enabledPanels;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取启用面板信息失败:', error);
            return [];
        }
    }

    /**
     * 🚀 生成数据获取方式说明
     */
    async generateDataAccessMethods(enabledPanels) {
        try {
            console.log('[InfoBarSettings] 🔧 生成数据获取方式说明...');

            const accessMethods = [];

            enabledPanels.forEach(panel => {
                const panelAccess = {
                    panelId: panel.id,
                    panelName: panel.name,
                    accessSyntax: `{{data.${panel.id}.fieldName}}`,
                    availableFields: [],
                    examples: []
                };

                // 为每个子项生成访问示例
                panel.subItems.forEach(subItem => {
                    panelAccess.availableFields.push({
                        key: subItem.key,
                        name: subItem.name,
                        syntax: `{{data.${panel.id}.${subItem.key}}}`
                    });

                    // 生成示例
                    panelAccess.examples.push(
                        `<span class="${panel.id}-${subItem.key}">{{data.${panel.id}.${subItem.key}}}</span>`
                    );
                });

                accessMethods.push(panelAccess);
            });

            console.log('[InfoBarSettings] ✅ 数据获取方式生成完成');
            return accessMethods;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成数据获取方式失败:', error);
            return [];
        }
    }

    /**
     * 🚀 构建AI创作状态栏提示词
     */
    buildAICreateStatusBarPrompt(enabledPanels, dataAccessMethods) {
        const panelSummary = enabledPanels.map(panel =>
            `${panel.name}(${panel.subItems.length}个字段)`
        ).join('、');

        const dataExamples = dataAccessMethods.map(method => {
            const fieldExamples = method.availableFields.slice(0, 4).map(field =>
                `  ${field.syntax} // ${field.name}`
            ).join('\n');

            return `### ${method.panelName}\n${fieldExamples}`;
        }).join('\n\n');

        return `# 状态栏HTML生成任务

## 任务目标
创建一个完整的HTML状态栏，包含CSS样式和数据绑定。

## 启用的数据面板
${panelSummary}

## 可用数据字段
${dataExamples}

## HTML格式要求
1. **完整HTML文档结构**：
   - 必须包含 <!DOCTYPE html>
   - 包含 <html>, <head>, <body> 标签
   - 在 <head> 中定义所有CSS样式

2. **CSS样式规范**：
   - 所有样式必须写在 <head> 内的 <style> 标签中
   - 不要使用内联样式 (style="...")
   - 使用CSS变量定义主题色彩
   - 支持响应式设计

3. **数据绑定语法**：
   - 使用 {{data.面板名.字段名}} 格式
   - 条件显示：{{#if data.字段}}内容{{/if}}
   - 循环：{{#each data.数组}}{{this}}{{/each}}

## CSS颜色要求
**重要：必须使用硬编码颜色值，不要使用CSS变量**
- 背景渐变：linear-gradient(135deg, #fff0f5 0%, #ffe4e1 100%)
- 卡片背景：rgba(255, 255, 255, 0.6)
- 主文字色：#5c2a52
- 强调色：#d9538d
- 阴影：0 8px 32px 0 rgba(240, 128, 128, 0.3)

## 设计风格
- 现代化卡片式布局，16px圆角
- 粉色主题：使用粉色系渐变和半透明效果
- 响应式网格布局
- 悬停效果：transform: translateY(-8px)
- 不要使用var(--变量名)，直接写具体颜色值

## 输出格式
直接输出完整的HTML代码，不要任何解释文字。代码必须包含：
1. 完整的HTML文档结构
2. <head> 中的CSS样式定义
3. <body> 中的内容结构
4. 所有启用面板的数据绑定`;
    }

    /**
     * 🚀 调用AI进行状态栏创作
     */
    async callAIForStatusBarCreation(prompt) {
        try {
            console.log('[InfoBarSettings] 🤖 调用AI进行状态栏创作...');

            // 复用现有的AI调用逻辑
            const result = await this.callCustomAI(prompt);

            // 清理AI返回的内容
            const cleanedResult = this.cleanAIResponse(result);

            console.log('[InfoBarSettings] ✅ AI状态栏创作完成');
            return cleanedResult;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ AI状态栏创作失败:', error);
            throw error;
        }
    }

    /**
     * 🚀 显示数据信息面板
     */
    async showDataInfoPanel() {
        try {
            console.log('[InfoBarSettings] 📊 显示数据信息面板...');

            // 获取启用的面板信息
            const enabledPanels = await this.getEnabledPanelsForAI();

            // 创建数据信息弹窗
            const dataInfoHTML = this.createDataInfoPopup(enabledPanels);

            // 添加到页面
            document.body.insertAdjacentHTML('beforeend', dataInfoHTML);

            // 绑定关闭事件
            const popup = document.querySelector('.data-info-popup');
            if (popup) {
                // 点击外部关闭
                popup.addEventListener('click', (e) => {
                    if (e.target === popup) {
                        popup.remove();
                    }
                });

                // 关闭按钮
                const closeBtn = popup.querySelector('.popup-close-btn');
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        popup.remove();
                    });
                }

                // ESC键关闭
                const handleKeyDown = (e) => {
                    if (e.key === 'Escape') {
                        popup.remove();
                        document.removeEventListener('keydown', handleKeyDown);
                    }
                };
                document.addEventListener('keydown', handleKeyDown);
            }

            console.log('[InfoBarSettings] ✅ 数据信息面板显示完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示数据信息面板失败:', error);
        }
    }

    /**
     * 🚀 创建数据信息弹窗
     */
    createDataInfoPopup(enabledPanels) {
        const themeColors = {
            background: this.getInfoBarThemeColor('background'),
            surface: this.getInfoBarThemeColor('surface'),
            border: this.getInfoBarThemeColor('border'),
            text: this.getInfoBarThemeColor('text'),
            textSecondary: this.getInfoBarThemeColor('textSecondary'),
            accent: this.getInfoBarThemeColor('accent')
        };

        // 生成面板信息内容
        let panelsHTML = '';
        if (enabledPanels.length === 0) {
            panelsHTML = `
                <div style="text-align: center; padding: 40px; color: ${themeColors.textSecondary};">
                    <i class="fas fa-info-circle" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                    <p>当前没有启用的面板</p>
                    <p style="font-size: 12px;">请先在设置中启用一些面板</p>
                </div>
            `;
        } else {
            panelsHTML = enabledPanels.map(panel => {
                const subItemsHTML = panel.subItems.map(subItem => `
                    <div class="data-field-item" style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        padding: 8px 12px;
                        background: ${themeColors.surface};
                        border-radius: 6px;
                        margin-bottom: 6px;
                        border: 1px solid ${themeColors.border};
                    ">
                        <div class="field-info">
                            <div class="field-name" style="color: ${themeColors.text}; font-weight: 500;">
                                ${subItem.name}
                            </div>
                            <div class="field-syntax" style="
                                color: ${themeColors.textSecondary};
                                font-size: 11px;
                                font-family: 'Consolas', 'Monaco', monospace;
                                margin-top: 2px;
                            ">
                                {{data.${panel.id}.${subItem.key}}}
                            </div>
                        </div>
                        <button class="copy-syntax-btn" data-syntax="{{data.${panel.id}.${subItem.key}}}" style="
                            background: ${themeColors.accent};
                            color: ${themeColors.background};
                            border: none;
                            padding: 4px 8px;
                            border-radius: 4px;
                            font-size: 10px;
                            cursor: pointer;
                            transition: all 0.2s ease;
                        " onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                `).join('');

                return `
                    <div class="panel-section" style="margin-bottom: 24px;">
                        <div class="panel-header" style="
                            display: flex;
                            align-items: center;
                            margin-bottom: 12px;
                            padding-bottom: 8px;
                            border-bottom: 1px solid ${themeColors.border};
                        ">
                            <h4 style="
                                margin: 0;
                                color: ${themeColors.text};
                                font-size: 16px;
                                font-weight: 600;
                            ">
                                <i class="fas fa-database" style="margin-right: 8px; color: ${themeColors.accent};"></i>
                                ${panel.name}
                            </h4>
                            <span style="
                                margin-left: auto;
                                background: ${themeColors.accent};
                                color: ${themeColors.background};
                                padding: 2px 8px;
                                border-radius: 12px;
                                font-size: 11px;
                                font-weight: 500;
                            ">
                                ${panel.subItems.length} 个字段
                            </span>
                        </div>
                        <div class="panel-fields">
                            ${subItemsHTML}
                        </div>
                    </div>
                `;
            }).join('');
        }

        return `
            <div class="data-info-popup" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
                z-index: 10001;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
                box-sizing: border-box;
            ">
                <div class="popup-container" style="
                    width: 100%;
                    max-width: 800px;
                    max-height: 80vh;
                    background: ${themeColors.background};
                    border-radius: 12px;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                    border: 1px solid ${themeColors.border};
                    display: flex;
                    flex-direction: column;
                    overflow: hidden;
                ">
                    <div class="popup-header" style="
                        padding: 20px 24px;
                        background: ${themeColors.surface};
                        border-bottom: 1px solid ${themeColors.border};
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                    ">
                        <div>
                            <h3 style="margin: 0; color: ${themeColors.text}; font-size: 18px; font-weight: 600;">
                                <i class="fas fa-info-circle" style="margin-right: 8px; color: ${themeColors.accent};"></i>
                                数据字段信息
                            </h3>
                            <p style="margin: 4px 0 0 0; color: ${themeColors.textSecondary}; font-size: 13px;">
                                当前启用的面板和可用数据字段
                            </p>
                        </div>
                        <button class="popup-close-btn" style="
                            background: transparent;
                            border: 1px solid ${themeColors.border};
                            color: ${themeColors.textSecondary};
                            padding: 8px 12px;
                            border-radius: 6px;
                            cursor: pointer;
                            transition: all 0.2s ease;
                        " onmouseover="this.style.background='${themeColors.surface}'; this.style.color='${themeColors.text}'"
                           onmouseout="this.style.background='transparent'; this.style.color='${themeColors.textSecondary}'">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="popup-body" style="
                        flex: 1;
                        padding: 20px 24px;
                        overflow-y: auto;
                    ">
                        ${panelsHTML}
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 🚀 获取子项显示名称
     */
    getSubItemDisplayName(panelId, subItemKey) {
        // 使用现有的字段映射逻辑
        const fieldMappings = this.getFieldMappings();
        const panelMappings = fieldMappings[panelId];

        if (panelMappings && panelMappings[subItemKey]) {
            return panelMappings[subItemKey];
        }

        // 如果没有映射，返回格式化的key
        return subItemKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
    }

    /**
     * 🚀 绑定状态栏提示词编辑器事件
     */
    bindPromptEditorEvents(modal) {
        try {
            // 🔧 修复：防止重复绑定事件
            if (modal.dataset.promptEventsbound === 'true') {
                console.log('[InfoBarSettings] ⚠️ 提示词编辑器事件已绑定，跳过重复绑定');
                return;
            }

            // 提示词模板按钮
            modal.querySelectorAll('.prompt-template-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    this.insertPromptTemplate(btn.dataset.template);
                });
            });

            // 🔧 修复：使用自定义提示词按钮 - 添加防重复点击
            const usePromptBtn = modal.querySelector('[data-action="use-custom-prompt"]');
            if (usePromptBtn) {
                usePromptBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    e.stopPropagation();

                    // 🔧 防止重复点击
                    if (usePromptBtn.disabled || usePromptBtn.dataset.processing === 'true') {
                        console.log('[InfoBarSettings] ⚠️ AI生成正在进行中，忽略重复点击');
                        return;
                    }

                    await this.useCustomPrompt();
                });
            }

            // 标记事件已绑定
            modal.dataset.promptEventsbound = 'true';
            console.log('[InfoBarSettings] ✅ 状态栏提示词编辑器事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定状态栏提示词编辑器事件失败:', error);
        }
    }

    /**
     * 🚀 插入提示词模板
     */
    insertPromptTemplate(templateType) {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            const textarea = modal?.querySelector('.prompt-textarea');
            if (!textarea) return;

            const templates = {
                character: '创建角色状态栏：头像、姓名、等级、生命值，使用粉色渐变背景#fff0f5到#ffe4e1，卡片背景rgba(255,255,255,0.6)，文字色#5c2a52',
                inventory: '设计物品栏界面：网格布局显示物品图标、名称、数量，使用具体颜色值不用CSS变量，粉色主题',
                stats: '制作属性面板：力量、敏捷、智力等数值，带进度条，使用硬编码颜色值#d9538d作为强调色',
                modern: '现代化状态栏：渐变背景linear-gradient(135deg,#fff0f5,#ffe4e1)，圆角16px，阴影rgba(240,128,128,0.3)，不使用var()变量',
                minimal: '简约状态栏：清爽布局，直接使用具体颜色值，背景#fff0f5，文字#5c2a52，强调色#d9538d'
            };

            const template = templates[templateType];
            if (template) {
                textarea.value = template;
                textarea.focus();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 插入提示词模板失败:', error);
        }
    }

    /**
     * 🚀 使用自定义提示词进行AI创作
     */
    async useCustomPrompt() {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            const promptTextarea = modal?.querySelector('.prompt-textarea');
            const usePromptBtn = modal?.querySelector('[data-action="use-custom-prompt"]');

            if (!promptTextarea || !usePromptBtn) {
                console.warn('[InfoBarSettings] ⚠️ 未找到必要的DOM元素');
                return;
            }

            // 🔧 修复：强化防重复点击机制
            if (usePromptBtn.disabled || usePromptBtn.dataset.processing === 'true') {
                console.log('[InfoBarSettings] ⚠️ AI生成正在进行中，忽略重复调用');
                return;
            }

            const customPrompt = promptTextarea.value.trim();
            if (!customPrompt) {
                this.showNotification('请输入提示词内容', 'warning');
                return;
            }

            // 🔧 修复：设置处理状态标记
            usePromptBtn.dataset.processing = 'true';

            // 显示加载状态
            const originalText = usePromptBtn.innerHTML;
            usePromptBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> AI生成中...';
            usePromptBtn.disabled = true;

            console.log('[InfoBarSettings] 🚀 开始AI生成，提示词长度:', customPrompt.length);

            try {
                // 获取启用的面板信息
                const enabledPanels = await this.getEnabledPanelsForAI();
                const dataAccessMethods = await this.generateDataAccessMethods(enabledPanels);

                // 构建增强的AI提示词
                const enhancedPrompt = this.buildEnhancedAIPrompt(customPrompt, enabledPanels, dataAccessMethods);

                // 调用AI生成状态栏
                const generatedStatusBar = await this.callAIForStatusBarCreation(enhancedPrompt);

                // 将生成的状态栏插入到编辑器
                const htmlTextarea = modal?.querySelector('.html-template-textarea');
                if (htmlTextarea && generatedStatusBar) {
                    htmlTextarea.value = generatedStatusBar;

                    // 更新预览
                    this.updateTemplatePreview();
                    this.updateEditorStatus();

                    console.log('[InfoBarSettings] ✅ 自定义提示词AI创作完成');
                    this.showNotification('AI状态栏创作完成！', 'success');
                }

            } catch (error) {
                console.error('[InfoBarSettings] ❌ 自定义提示词AI创作失败:', error);

                // 🔧 修复：提供更详细的错误信息
                let errorMessage = error.message;
                if (error.message.includes('API请求失败')) {
                    errorMessage = '网络请求失败，请检查网络连接和API配置';
                } else if (error.message.includes('未启用') || error.message.includes('未配置')) {
                    errorMessage = '请先在扩展设置中配置AI API';
                }

                this.showNotification(`AI生成失败: ${errorMessage}`, 'error');
            } finally {
                // 🔧 修复：确保状态完全恢复
                if (usePromptBtn) {
                    usePromptBtn.innerHTML = originalText;
                    usePromptBtn.disabled = false;
                    usePromptBtn.dataset.processing = 'false';
                }
                console.log('[InfoBarSettings] 🔄 AI生成流程结束，按钮状态已恢复');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 使用自定义提示词失败:', error);
        }
    }

    /**
     * 🚀 构建增强的AI提示词
     */
    buildEnhancedAIPrompt(userPrompt, enabledPanels, dataAccessMethods) {
        const panelSummary = enabledPanels.map(panel =>
            `${panel.name}(${panel.subItems.length}个字段)`
        ).join('、');

        const dataExamples = dataAccessMethods.map(method => {
            const fieldExamples = method.availableFields.slice(0, 4).map(field =>
                `  ${field.syntax} // ${field.name}`
            ).join('\n');

            return `### ${method.panelName}\n${fieldExamples}`;
        }).join('\n\n');

        return `# 自定义状态栏HTML生成

## 用户需求
${userPrompt}

## 可用数据面板
${panelSummary}

## 数据字段语法
${dataExamples}

## HTML结构要求
1. **完整HTML文档**：
   - 包含 <!DOCTYPE html>, <html>, <head>, <body>
   - 所有CSS写在 <head> 的 <style> 标签内
   - 不使用内联样式

2. **CSS颜色规范**：
   **禁止使用CSS变量，必须使用硬编码颜色值**
   - 背景：linear-gradient(135deg, #fff0f5 0%, #ffe4e1 100%)
   - 卡片：rgba(255, 255, 255, 0.6)
   - 文字：#5c2a52
   - 强调：#d9538d
   - 阴影：rgba(240, 128, 128, 0.3)

3. **数据绑定**：
   - {{data.面板名.字段名}}
   - {{#if data.字段}}条件内容{{/if}}

## 设计风格
- 粉色主题卡片布局，16px圆角
- 直接使用具体颜色值，不用var()
- 响应式网格布局
- 悬停效果：translateY(-8px)

直接输出完整HTML代码，无需解释。

## 🔧 技术规范
- 使用内联CSS样式
- 数据绑定语法: {{data.panelId.fieldName}}
- 条件显示: {{#if data.field}}内容{{/if}}
- 循环渲染: {{#each data.array}}{{this}}{{/each}}
- 图标类名: fas fa-icon-name

## 📝 输出要求
请直接输出完整的HTML代码，包含：
- 完整的HTML结构
- 内联CSS样式
- 所有启用面板的数据绑定
- 现代化的视觉设计
- 响应式布局

不要包含任何解释文字，直接输出HTML代码。`;
    }

    /**
     * 🚀 加载数据字段到提示词编辑器
     */
    async loadDataFieldsToPromptEditor() {
        try {
            const modal = document.querySelector('.status-bar-editor-modal');
            const fieldsList = modal?.querySelector('.data-fields-list');
            if (!fieldsList) return;

            // 获取启用的面板信息
            const enabledPanels = await this.getEnabledPanelsForAI();

            if (enabledPanels.length === 0) {
                fieldsList.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: var(--theme-text-secondary, #aaa);">
                        <i class="fas fa-info-circle" style="margin-bottom: 8px; opacity: 0.5;"></i>
                        <p>当前没有启用的面板</p>
                    </div>
                `;
                return;
            }

            // 生成字段列表HTML
            const fieldsHTML = enabledPanels.map(panel => {
                const fieldsItems = panel.subItems.map(subItem => `
                    <div class="field-item" style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        padding: 0px 4px;
                        margin-bottom: 0px;
                        border-radius: 2px;
                        background: var(--theme-surface, #2a2a2a);
                        border: 1px solid var(--theme-border, #444);
                        min-height: 16px;
                        line-height: 1.0;
                        height: 16px;
                    ">
                        <span style="color: var(--theme-text, #fff); font-size: 9px; line-height: 1.0;">
                            ${subItem.name}
                        </span>
                        <code style="
                            color: var(--theme-accent, #007bff);
                            font-size: 8px;
                            font-family: 'Consolas', 'Monaco', monospace;
                            line-height: 1.0;
                        ">
                            {{data.${panel.id}.${subItem.key}}}
                        </code>
                    </div>
                `).join('');

                return `
                    <div class="panel-group" style="margin-bottom: 1px;">
                        <div class="panel-title" style="
                            color: var(--theme-accent, #007bff);
                            font-size: 10px;
                            font-weight: 600;
                            margin-bottom: 0px;
                            padding: 0px 4px;
                            background: var(--theme-background, #1a1a1a);
                            border-radius: 3px;
                            line-height: 1.1;
                            height: 16px;
                            display: flex;
                            align-items: center;
                        ">
                            <i class="fas fa-database" style="margin-right: 3px; font-size: 10px;"></i>
                            ${panel.name}
                        </div>
                        ${fieldsItems}
                    </div>
                `;
            }).join('');

            fieldsList.innerHTML = fieldsHTML;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载数据字段到提示词编辑器失败:', error);
            const fieldsList = document.querySelector('.data-fields-list');
            if (fieldsList) {
                fieldsList.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: var(--theme-text-secondary, #aaa);">
                        <i class="fas fa-exclamation-triangle" style="margin-bottom: 8px; color: #ff6b6b;"></i>
                        <p>加载数据字段失败</p>
                    </div>
                `;
            }
        }
    }

    /**
     * @deprecated 保持向后兼容性
     */
    createHTMLTemplateEditorHTML() {
        return this.createStatusBarEditorHTML();
    }

    // ==================== 🆕 世界书配置相关方法 ====================

    /**
     * 初始化世界书配置面板
     */
    async initWorldBookConfigPanel() {
        try {
            console.log('[InfoBarSettings] 📚 初始化世界书配置面板...');

            // 🔧 修复：检查是否已经初始化过
            if (this.worldBookConfigPanelInitialized) {
                console.log('[InfoBarSettings] ⚠️ 世界书配置面板已初始化，跳过重复初始化');
                return;
            }

            // 获取世界书管理器引用
            this.worldBookManager = window.SillyTavernInfobar?.modules?.worldBookManager;
            this.worldBookConfigPanel = window.SillyTavernInfobar?.modules?.worldBookConfigPanel;

            if (!this.worldBookManager || !this.worldBookConfigPanel) {
                console.warn('[InfoBarSettings] ⚠️ 世界书管理器或配置面板未找到');
                return;
            }

            // 获取世界书配置容器
            const container = this.modal.querySelector('#worldbook-config-container');
            if (!container) {
                console.warn('[InfoBarSettings] ⚠️ 世界书配置容器未找到');
                return;
            }

            // 🔧 修复：清理容器内容，避免重复渲染
            container.innerHTML = '';

            // 渲染世界书配置面板
            await this.worldBookConfigPanel.render(container);

            // 绑定世界书复选框事件
            this.bindWorldBookEvents();

            // 标记为已初始化
            this.worldBookConfigPanelInitialized = true;

            console.log('[InfoBarSettings] ✅ 世界书配置面板初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化世界书配置面板失败:', error);
        }
    }

    /**
     * 绑定世界书相关事件
     */
    bindWorldBookEvents() {
        try {
            // 绑定世界书启用复选框事件
            const worldBookCheckbox = this.modal.querySelector('#api-include-worldbook');
            if (worldBookCheckbox) {
                worldBookCheckbox.addEventListener('change', (e) => {
                    this.handleWorldBookToggle(e.target.checked);
                });

                // 初始状态检查
                this.handleWorldBookToggle(worldBookCheckbox.checked);
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定世界书事件失败:', error);
        }
    }

    /**
     * 处理世界书启用/禁用切换
     */
    handleWorldBookToggle(enabled) {
        try {
            console.log('[InfoBarSettings] 📚 世界书功能', enabled ? '启用' : '禁用');

            // 显示/隐藏世界书配置面板
            const configSection = this.modal.querySelector('.worldbook-config-section');
            if (configSection) {
                configSection.style.display = enabled ? 'block' : 'none';
            }

            // 如果启用世界书，确保配置面板已初始化
            if (enabled && this.worldBookConfigPanel) {
                this.worldBookConfigPanel.show();
            } else if (this.worldBookConfigPanel) {
                this.worldBookConfigPanel.hide();
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理世界书切换失败:', error);
        }
    }

    /**
     * 获取世界书配置状态
     */
    getWorldBookConfigStatus() {
        try {
            if (!this.worldBookManager || !this.worldBookConfigPanel) {
                return {
                    available: false,
                    enabled: false,
                    error: '世界书管理器未初始化'
                };
            }

            const worldBookCheckbox = this.modal.querySelector('#api-include-worldbook');
            const enabled = worldBookCheckbox ? worldBookCheckbox.checked : false;

            return {
                available: true,
                enabled: enabled,
                config: this.worldBookManager.config,
                panelStatus: this.worldBookConfigPanel.getStatus()
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取世界书配置状态失败:', error);
            return {
                available: false,
                enabled: false,
                error: error.message
            };
        }
    }

    /**
     * 更新世界书配置
     */
    async updateWorldBookConfig(config) {
        try {
            console.log('[InfoBarSettings] 📚 更新世界书配置...');

            if (!this.worldBookManager) {
                throw new Error('世界书管理器未初始化');
            }

            // 更新配置
            Object.assign(this.worldBookManager.config, config);

            // 保存配置
            await this.worldBookManager.saveConfig();

            // 刷新配置面板
            if (this.worldBookConfigPanel) {
                await this.worldBookConfigPanel.refreshData();
            }

            console.log('[InfoBarSettings] ✅ 世界书配置更新完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新世界书配置失败:', error);
            throw error;
        }
    }

    /**
     * 🚀 处理AI记忆总结启用状态变化
     */
    handleAIMemoryEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🧠 AI记忆总结启用状态变化:', enabled);

            // 显示/隐藏AI记忆选项
            const aiMemoryOptions = this.modal.querySelectorAll('.ai-memory-options');
            aiMemoryOptions.forEach(option => {
                option.style.display = enabled ? 'block' : 'none';
            });

            // 更新AI记忆总结器设置
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;
            if (summaryManager && summaryManager.aiMemorySummarizer) {
                summaryManager.aiMemorySummarizer.updateSettings({
                    enabled: enabled
                });
            }

            this.showMessage(
                enabled ? '✅ AI记忆总结已启用' : '❌ AI记忆总结已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理AI记忆总结启用状态变化失败:', error);
        }
    }

    /**
     * 🚀 处理消息级别总结变化
     */
    handleAIMessageLevelChange(enabled) {
        try {
            console.log('[InfoBarSettings] 📝 消息级别总结状态变化:', enabled);

            // 更新AI记忆总结器设置
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;
            if (summaryManager && summaryManager.aiMemorySummarizer) {
                summaryManager.aiMemorySummarizer.updateSettings({
                    messageLevelSummary: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理消息级别总结变化失败:', error);
        }
    }

    /**
     * 🚀 处理重要性阈值变化
     */
    handleAIImportanceThresholdChange(value) {
        try {
            console.log('[InfoBarSettings] 🎯 重要性阈值变化:', value);

            // 更新显示值
            const valueDisplay = this.modal.querySelector('#content-ai-importance-value');
            if (valueDisplay) {
                valueDisplay.textContent = `${Math.round(value * 100)}%`;
            }

            // 更新AI记忆总结器设置
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;
            if (summaryManager && summaryManager.aiMemorySummarizer) {
                summaryManager.aiMemorySummarizer.updateSettings({
                    importanceThreshold: parseFloat(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理重要性阈值变化失败:', error);
        }
    }

    /**
     * 🚀 处理筛选标签点击
     */
    handleFilterTabClick(filter) {
        try {
            console.log('[InfoBarSettings] 🔍 筛选标签点击:', filter);

            // 更新标签状态
            const filterTabs = this.modal.querySelectorAll('.filter-tab');
            filterTabs.forEach(tab => {
                if (tab.dataset.filter === filter) {
                    tab.classList.add('active');
                    tab.style.color = 'var(--SmartThemeEmColor, #ff6b6b)';
                    tab.style.borderBottomColor = 'var(--SmartThemeEmColor, #ff6b6b)';
                } else {
                    tab.classList.remove('active');
                    tab.style.color = 'var(--SmartThemeQuoteColor, #888)';
                    tab.style.borderBottomColor = 'transparent';
                }
            });

            // 筛选总结历史
            this.filterSummaryHistory(filter);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理筛选标签点击失败:', error);
        }
    }

    /**
     * 🚀 筛选总结历史
     */
    async filterSummaryHistory(filter) {
        try {
            console.log('[InfoBarSettings] 🔍 筛选总结历史:', filter);

            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                console.warn('[InfoBarSettings] ⚠️ SummaryManager未找到');
                return;
            }

            // 获取增强的总结历史
            const allSummaries = await summaryManager.getEnhancedSummaryHistory();
            console.log('[InfoBarSettings] 📚 获取到总结历史:', allSummaries.length, '条');

            // 根据筛选条件过滤
            let filteredSummaries = allSummaries;
            if (filter !== 'all') {
                filteredSummaries = allSummaries.filter(summary => {
                    // 根据不同的筛选条件进行过滤
                    switch (filter) {
                        case 'traditional':
                            // 传统总结：包括小总结、大总结、手动总结、自动总结
                            return summary.source === 'traditional' ||
                                   summary.type === 'small' ||
                                   summary.type === 'large' ||
                                   summary.type === 'manual' ||
                                   summary.type === 'auto' ||
                                   !summary.source; // 没有source字段的默认为传统总结
                        case 'ai_memory':
                            // AI记忆总结：来自AI记忆总结器的总结
                            return summary.source === 'ai_memory_summarizer' ||
                                   summary.type === 'ai_memory';
                        default:
                            return true;
                    }
                });
            }

            console.log('[InfoBarSettings] 🔍 筛选后的总结:', filteredSummaries.length, '条');

            // 更新显示
            this.renderSummaryHistory(filteredSummaries);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 筛选总结历史失败:', error);
        }
    }

    /**
     * 🚀 绑定世界书上传配置事件
     */
    bindWorldBookUploadEvents() {
        try {
            console.log('[InfoBarSettings] 🔗 绑定世界书上传配置事件...');

            // 条目命名格式变化事件
            const entryFormatSelect = this.modal.querySelector('#worldbook-entry-format');
            const customNameRow = this.modal.querySelector('#worldbook-custom-name-row');

            if (entryFormatSelect && customNameRow) {
                entryFormatSelect.addEventListener('change', (e) => {
                    if (e.target.value === 'custom') {
                        customNameRow.style.display = 'block';
                    } else {
                        customNameRow.style.display = 'none';
                    }
                });
            }

            // 批量上传按钮事件
            const batchUploadBtn = this.modal.querySelector('#worldbook-batch-upload-btn');
            if (batchUploadBtn) {
                batchUploadBtn.addEventListener('click', async () => {
                    await this.handleBatchUploadToWorldBook();
                });
            }

            console.log('[InfoBarSettings] ✅ 世界书上传配置事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定世界书上传配置事件失败:', error);
        }
    }

    /**
     * 🚀 处理单个总结上传到世界书
     */
    async handleUploadSummaryToWorldBook() {
        try {
            console.log('[InfoBarSettings] 📤 处理单个总结上传到世界书...');

            // 获取选中的总结ID
            const historySelect = this.modal.querySelector('#content-summary-history-select');
            const summaryId = historySelect?.value;

            if (!summaryId) {
                this.showNotification('请先选择一条总结记录', 'info');
                return;
            }

            // 获取上传配置
            const uploadOptions = this.getWorldBookUploadOptions();

            // 显示加载状态
            this.showNotification('正在上传总结到世界书...', 'info');

            // 获取SummaryManager
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                throw new Error('SummaryManager未初始化');
            }

            // 执行上传
            const result = await summaryManager.uploadSummaryToWorldBook(summaryId, uploadOptions);

            if (result.success) {
                this.showNotification(`✅ ${result.message}`, 'success');

                // 刷新总结历史显示上传状态
                await this.loadSummaryHistory();

                // 重新选中当前总结
                if (historySelect) {
                    historySelect.value = summaryId;
                    this.showSummaryContent(summaryId);
                }
            } else {
                this.showNotification(`❌ ${result.message}`, 'error');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 上传总结到世界书失败:', error);
            this.showNotification(`❌ 上传失败: ${error.message}`, 'error');
        }
    }

    /**
     * 🚀 处理批量上传到世界书
     */
    async handleBatchUploadToWorldBook() {
        try {
            console.log('[InfoBarSettings] 📤 处理批量上传到世界书...');

            // 确认操作
            const confirmed = confirm('确定要将当前聊天的所有总结上传到世界书吗？\n\n这可能需要一些时间，请耐心等待。');
            if (!confirmed) {
                return;
            }

            // 获取所有总结
            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;

            if (!summaryManager) {
                throw new Error('SummaryManager未初始化');
            }

            const allSummaries = await summaryManager.getEnhancedSummaryHistory();
            if (!allSummaries || allSummaries.length === 0) {
                this.showNotification('当前聊天没有总结记录', 'info');
                return;
            }

            // 获取上传配置
            const uploadOptions = this.getWorldBookUploadOptions();

            // 显示进度
            this.showNotification(`开始批量上传 ${allSummaries.length} 条总结...`, 'info');

            // 提取所有总结ID
            const summaryIds = allSummaries.map(s => s.id);

            // 执行批量上传
            const result = await summaryManager.batchUploadSummariesToWorldBook(summaryIds, uploadOptions);

            if (result.success) {
                const { success, failed, total } = result.results;
                this.showNotification(`✅ 批量上传完成: ${success.length}/${total} 成功${failed.length > 0 ? `, ${failed.length} 失败` : ''}`, 'success');

                // 刷新总结历史
                await this.loadSummaryHistory();
            } else {
                this.showNotification(`❌ 批量上传失败: ${result.message}`, 'error');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 批量上传到世界书失败:', error);
            this.showNotification(`❌ 批量上传失败: ${error.message}`, 'error');
        }
    }

    /**
     * 🔧 获取世界书上传配置选项
     */
    getWorldBookUploadOptions() {
        try {
            const entryFormat = this.modal.querySelector('#worldbook-entry-format')?.value || 'auto';
            const customName = this.modal.querySelector('#worldbook-custom-name')?.value || '';
            const addTimestamp = this.modal.querySelector('#worldbook-add-timestamp')?.checked !== false;
            const useContentTags = this.modal.querySelector('#worldbook-use-tags')?.checked !== false;

            return {
                autoCreateWorldBook: true,
                bindToChatLore: true,
                entryNameFormat: entryFormat,
                customEntryName: entryFormat === 'custom' ? customName : null,
                addTimestamp: addTimestamp,
                useContentTags: useContentTags
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取世界书上传配置失败:', error);
            return {
                autoCreateWorldBook: true,
                bindToChatLore: true,
                entryNameFormat: 'auto',
                customEntryName: null,
                addTimestamp: true,
                useContentTags: true
            };
        }
    }

    /**
     * 🔍 处理向量化记忆检索启用状态变化
     */
    handleVectorizedMemoryEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔍 向量化记忆检索启用状态变化:', enabled);

            // 显示/隐藏向量化记忆选项
            const vectorizedMemoryOptions = this.modal.querySelectorAll('.vectorized-memory-options');
            vectorizedMemoryOptions.forEach(option => {
                option.style.display = enabled ? 'block' : 'none';
            });

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    enabled: enabled
                });
            }

            this.showMessage(
                enabled ? '✅ 语义搜索已启用' : '❌ 语义搜索已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理向量化记忆检索启用状态变化失败:', error);
        }
    }

    /**
     * 🔍 处理向量化引擎变化
     */
    handleVectorEngineChange(engine) {
        try {
            console.log('[InfoBarSettings] 🚀 向量化引擎变化:', engine);

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    vectorEngine: engine
                });
            }

            this.showMessage(
                `✅ 向量化引擎已切换为: ${engine === 'transformers' ? 'Transformers.js (本地)' : 'OpenAI (在线)'}`,
                'success'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理向量化引擎变化失败:', error);
        }
    }

    /**
     * 🚀 新增：处理向量存储模式变化
     */
    handleVectorStorageModeChange(mode, silent = false) {
        try {
            console.log('[InfoBarSettings] 📦 向量存储模式变化:', mode);

            // 更新提示文本
            const hintText = this.modal.querySelector('#vector-storage-hint-text');
            if (hintText) {
                switch (mode) {
                    case 'local':
                        hintText.innerHTML = '<strong>聊天文件存储：</strong>向量数据存储在聊天文件中，无需额外配置，但数据量大时可能影响性能。';
                        break;
                    case 'native':
                        hintText.innerHTML = '<strong>原生向量API：</strong>使用SillyTavern内置的向量API，性能最优，支持大规模数据。需要安装并配置向量扩展。';
                        break;
                    case 'custom':
                        hintText.innerHTML = '<strong>自定义向量API：</strong>使用外部向量化API服务，灵活性高。需要配置API地址和密钥。';
                        break;
                }
            }

            // 显示/隐藏自定义API配置选项
            const customApiOptions = this.modal.querySelectorAll('.custom-vector-api-options');
            customApiOptions.forEach(option => {
                option.style.display = mode === 'custom' ? 'block' : 'none';
            });

            // 🚀 新增：显示/隐藏本地存储大小限制选项
            const localStorageOptions = this.modal.querySelectorAll('.local-storage-options');
            localStorageOptions.forEach(option => {
                option.style.display = mode === 'local' ? 'block' : 'none';
            });

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                const settings = {
                    useLocalStorage: mode === 'local',
                    useNativeVectorAPI: mode === 'native',
                    useCustomVectorAPI: mode === 'custom'
                };

                vectorizedMemoryRetrieval.updateSettings(settings);

                console.log('[InfoBarSettings] ✅ 向量存储模式已更新:', settings);
            }

            // 🔧 修复：只在非静默模式下显示提示消息
            if (!silent) {
                const modeNames = {
                    'local': '聊天文件存储',
                    'native': '原生向量API',
                    'custom': '自定义向量API'
                };

                this.showMessage(
                    `✅ 向量存储模式已切换为: ${modeNames[mode]}`,
                    'success'
                );
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理向量存储模式变化失败:', error);
        }
    }

    /**
     * 🚀 新增：处理自定义向量API配置变化
     */
    handleCustomVectorApiConfigChange() {
        try {
            const apiUrl = this.modal.querySelector('#memory-custom-vector-api-url')?.value || '';
            const apiKey = this.modal.querySelector('#memory-custom-vector-api-key')?.value || '';
            const model = this.modal.querySelector('#memory-custom-vector-model')?.value || '';

            console.log('[InfoBarSettings] 🔧 自定义向量API配置变化');

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    customVectorAPI: {
                        url: apiUrl,
                        apiKey: apiKey,
                        model: model
                    }
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理自定义向量API配置变化失败:', error);
        }
    }

    /**
     * 🚀 新增：处理向量存储大小限制变化
     */
    handleVectorStorageSizeLimitChange(sizeLimit) {
        try {
            console.log('[InfoBarSettings] 📏 向量存储大小限制变化:', sizeLimit, 'MB');

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    storageSizeLimit: sizeLimit
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理向量存储大小限制变化失败:', error);
        }
    }

    /**
     * 🔍 处理相似度阈值变化
     */
    handleSimilarityThresholdChange(value) {
        try {
            console.log('[InfoBarSettings] 🎯 相似度阈值变化:', value);

            // 更新显示值
            const valueDisplay = this.modal.querySelector('#content-similarity-value');
            if (valueDisplay) {
                valueDisplay.textContent = `${Math.round(value * 100)}%`;
            }

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    similarityThreshold: parseFloat(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理相似度阈值变化失败:', error);
        }
    }

    /**
     * 🔍 处理最大搜索结果数量变化
     */
    handleMaxSearchResultsChange(value) {
        try {
            console.log('[InfoBarSettings] 📊 最大搜索结果数量变化:', value);

            // 更新向量化记忆检索系统设置
            const infoBarTool = window.SillyTavernInfobar;
            const vectorizedMemoryRetrieval = infoBarTool?.modules?.vectorizedMemoryRetrieval;
            if (vectorizedMemoryRetrieval) {
                vectorizedMemoryRetrieval.updateSettings({
                    maxResults: parseInt(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理最大搜索结果数量变化失败:', error);
        }
    }

    /**
     * 🧠 处理深度记忆管理启用状态变化
     */
    handleDeepMemoryEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🧠 深度记忆管理启用状态变化:', enabled);

            // 显示/隐藏深度记忆选项
            const deepMemoryOptions = this.modal.querySelectorAll('.deep-memory-options');
            deepMemoryOptions.forEach(option => {
                option.style.display = enabled ? 'block' : 'none';
            });

            // 更新深度记忆管理器设置
            const infoBarTool = window.SillyTavernInfobar;
            const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
            if (deepMemoryManager) {
                deepMemoryManager.updateSettings({
                    enabled: enabled
                });
            }

            this.showMessage(
                enabled ? '✅ 深度记忆管理已启用' : '❌ 深度记忆管理已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理深度记忆管理启用状态变化失败:', error);
        }
    }

    /**
     * 🧠 处理自动记忆迁移变化
     */
    handleAutoMemoryMigrationChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔄 自动记忆迁移状态变化:', enabled);

            // 更新深度记忆管理器设置
            const infoBarTool = window.SillyTavernInfobar;
            const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
            if (deepMemoryManager) {
                deepMemoryManager.updateSettings({
                    autoMemoryMigration: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理自动记忆迁移变化失败:', error);
        }
    }

    /**
     * 🧠 处理记忆重要性阈值变化
     */
    handleMemoryImportanceThresholdChange(value) {
        try {
            console.log('[InfoBarSettings] 🎯 记忆重要性阈值变化:', value);

            // 更新显示值
            const valueDisplay = this.modal.querySelector('#content-memory-importance-value');
            if (valueDisplay) {
                valueDisplay.textContent = `${Math.round(value * 100)}%`;
            }

            // 更新深度记忆管理器设置
            const infoBarTool = window.SillyTavernInfobar;
            const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
            if (deepMemoryManager) {
                deepMemoryManager.updateSettings({
                    shortTermToLongTermThreshold: parseFloat(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理记忆重要性阈值变化失败:', error);
        }
    }

    /**
     * 🧠 处理记忆冲突解决变化
     */
    handleMemoryConflictResolutionChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔧 记忆冲突解决状态变化:', enabled);

            // 更新深度记忆管理器设置
            const infoBarTool = window.SillyTavernInfobar;
            const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
            if (deepMemoryManager) {
                deepMemoryManager.updateSettings({
                    memoryConflictResolution: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理记忆冲突解决变化失败:', error);
        }
    }

    /**
     * 🧠 处理记忆容量设置变化
     */
    handleMemoryCapacityChange(inputId, value) {
        try {
            console.log('[InfoBarSettings] 📊 记忆容量设置变化:', inputId, value);

            const capacityMap = {
                'content-sensory-capacity': 'sensoryMemoryCapacity',
                'content-short-term-capacity': 'shortTermMemoryCapacity',
                'content-long-term-capacity': 'longTermMemoryCapacity',
                'content-deep-archive-capacity': 'deepArchiveCapacity'
            };

            const settingKey = capacityMap[inputId];
            if (!settingKey) return;

            // 更新深度记忆管理器设置
            const infoBarTool = window.SillyTavernInfobar;
            const deepMemoryManager = infoBarTool?.modules?.deepMemoryManager;
            if (deepMemoryManager) {
                deepMemoryManager.updateSettings({
                    [settingKey]: parseInt(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理记忆容量设置变化失败:', error);
        }
    }

    /**
     * 🤖 处理智能记忆分类器启用状态变化
     */
    handleIntelligentClassifierEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🤖 智能记忆分类器启用状态变化:', enabled);

            // 显示/隐藏智能分类器选项
            const intelligentClassifierOptions = this.modal.querySelectorAll('.intelligent-classifier-options');
            intelligentClassifierOptions.forEach(option => {
                option.style.display = enabled ? 'block' : 'none';
            });

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    enabled: enabled
                });
            }

            this.showMessage(
                enabled ? '✅ 智能记忆分类器已启用' : '❌ 智能记忆分类器已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理智能记忆分类器启用状态变化失败:', error);
        }
    }

    /**
     * 🤖 处理语义聚类分析变化
     */
    handleSemanticClusteringChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔍 语义聚类分析状态变化:', enabled);

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    semanticClustering: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理语义聚类分析变化失败:', error);
        }
    }

    /**
     * 🤖 处理时序模式识别变化
     */
    handleTemporalPatternRecognitionChange(enabled) {
        try {
            console.log('[InfoBarSettings] ⏰ 时序模式识别状态变化:', enabled);

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    temporalPatternRecognition: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理时序模式识别变化失败:', error);
        }
    }

    /**
     * 🤖 处理重要性预测变化
     */
    handleImportancePredictionChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🎯 重要性预测状态变化:', enabled);

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    importancePrediction: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理重要性预测变化失败:', error);
        }
    }

    /**
     * 🤖 处理分类置信度阈值变化
     */
    handleClassificationConfidenceThresholdChange(value) {
        try {
            console.log('[InfoBarSettings] 🎯 分类置信度阈值变化:', value);

            // 更新显示值
            const valueDisplay = this.modal.querySelector('#content-classification-confidence-value');
            if (valueDisplay) {
                valueDisplay.textContent = `${Math.round(value * 100)}%`;
            }

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    classificationConfidenceThreshold: parseFloat(value)
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理分类置信度阈值变化失败:', error);
        }
    }

    /**
     * 🤖 处理自适应学习变化
     */
    handleAdaptiveLearningChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🧠 自适应学习状态变化:', enabled);

            // 更新智能记忆分类器设置
            const infoBarTool = window.SillyTavernInfobar;
            const intelligentMemoryClassifier = infoBarTool?.modules?.intelligentMemoryClassifier;
            if (intelligentMemoryClassifier) {
                intelligentMemoryClassifier.updateSettings({
                    adaptationEnabled: enabled
                });
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理自适应学习变化失败:', error);
        }
    }

    /**
     * 🆕 处理记忆自动维护系统启用状态变化
     */
    handleMemoryMaintenanceEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔧 记忆自动维护系统启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const memoryMaintenanceSystem = infoBarTool?.modules?.memoryMaintenanceSystem;
            if (memoryMaintenanceSystem) {
                memoryMaintenanceSystem.settings.enabled = enabled;
                console.log('[InfoBarSettings] ✅ 记忆自动维护系统设置已更新');
            }

            this.showMessage(
                enabled ? '✅ 记忆自动维护系统已启用' : '❌ 记忆自动维护系统已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理记忆自动维护系统启用状态变化失败:', error);
        }
    }

    /**
     * 🆕 处理上下文感知检索启用状态变化
     */
    handleContextualRetrievalEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔍 上下文感知检索启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const contextualRetrieval = infoBarTool?.modules?.contextualRetrieval;
            if (contextualRetrieval) {
                contextualRetrieval.settings.enabled = enabled;
                console.log('[InfoBarSettings] ✅ 上下文感知检索设置已更新');
            }

            this.showMessage(
                enabled ? '✅ 上下文感知检索已启用' : '❌ 上下文感知检索已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理上下文感知检索启用状态变化失败:', error);
        }
    }

    /**
     * 🆕 处理用户画像管理启用状态变化
     */
    handleUserProfileEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 👤 用户画像管理启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const userProfileManager = infoBarTool?.modules?.userProfileManager;
            if (userProfileManager) {
                userProfileManager.settings.enabled = enabled;
                console.log('[InfoBarSettings] ✅ 用户画像管理设置已更新');
            }

            this.showMessage(
                enabled ? '✅ 用户画像管理已启用' : '❌ 用户画像管理已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理用户画像管理启用状态变化失败:', error);
        }
    }

    /**
     * 🆕 处理知识图谱管理启用状态变化
     */
    handleKnowledgeGraphEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🕸️ 知识图谱管理启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const knowledgeGraphManager = infoBarTool?.modules?.knowledgeGraphManager;
            if (knowledgeGraphManager) {
                knowledgeGraphManager.settings.enabled = enabled;
                console.log('[InfoBarSettings] ✅ 知识图谱管理设置已更新');
            }

            this.showMessage(
                enabled ? '✅ 知识图谱管理已启用' : '❌ 知识图谱管理已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理知识图谱管理启用状态变化失败:', error);
        }
    }

    /**
     * 🆕 处理时间感知记忆启用状态变化
     */
    handleTimeAwareEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] ⏰ 时间感知记忆启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const timeAwareMemoryManager = infoBarTool?.modules?.timeAwareMemoryManager;
            if (timeAwareMemoryManager) {
                timeAwareMemoryManager.settings.enabled = enabled;
                console.log('[InfoBarSettings] ✅ 时间感知记忆设置已更新');
            }

            this.showMessage(
                enabled ? '✅ 时间感知记忆已启用' : '❌ 时间感知记忆已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理时间感知记忆启用状态变化失败:', error);
        }
    }

    /**
     * 🆕 处理SillyTavern深度集成启用状态变化
     */
    async handleSTIntegrationEnabledChange(enabled) {
        try {
            console.log('[InfoBarSettings] 🔗 SillyTavern深度集成启用状态变化:', enabled);

            const infoBarTool = window.SillyTavernInfobar;
            const sillyTavernIntegration = infoBarTool?.modules?.sillyTavernIntegration;
            if (sillyTavernIntegration && typeof sillyTavernIntegration.updateSettings === 'function') {
                // 🔧 修复：使用updateSettings方法更新设置
                await sillyTavernIntegration.updateSettings({ enabled: enabled });
                console.log('[InfoBarSettings] ✅ SillyTavern深度集成设置已更新');
            }

            this.showMessage(
                enabled ? '✅ SillyTavern深度集成已启用' : '❌ SillyTavern深度集成已禁用',
                enabled ? 'success' : 'info'
            );

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理SillyTavern深度集成启用状态变化失败:', error);
        }
    }

    /**
     * 🧠 绑定记忆增强面板事件
     */
    bindMemoryEnhancementEvents() {
        try {
            // 🎯 状态刷新按钮事件
            const refreshStatusBtn = this.modal.querySelector('#refresh-memory-status');
            if (refreshStatusBtn) {
                refreshStatusBtn.addEventListener('click', () => {
                    this.refreshMemoryStatus();
                });
            }

            // AI记忆总结事件
            const memoryAiMemoryEnabled = this.modal.querySelector('#memory-ai-memory-enabled');
            if (memoryAiMemoryEnabled) {
                memoryAiMemoryEnabled.addEventListener('change', (e) => {
                    this.handleAIMemoryEnabledChange(e.target.checked);
                });
            }

            const memoryAiMessageLevel = this.modal.querySelector('#memory-ai-message-level-summary');
            if (memoryAiMessageLevel) {
                memoryAiMessageLevel.addEventListener('change', (e) => {
                    this.handleAIMessageLevelChange(e.target.checked);
                });
            }

            // 语义搜索事件
            const memoryVectorizedEnabled = this.modal.querySelector('#memory-vectorized-memory-enabled');
            if (memoryVectorizedEnabled) {
                memoryVectorizedEnabled.addEventListener('change', (e) => {
                    this.handleVectorizedMemoryEnabledChange(e.target.checked);
                });
            }

            const memoryVectorEngine = this.modal.querySelector('#memory-vector-engine');
            if (memoryVectorEngine) {
                memoryVectorEngine.addEventListener('change', (e) => {
                    this.handleVectorEngineChange(e.target.value);
                });
            }

            // 🚀 新增：向量存储模式选择事件
            const memoryVectorStorageMode = this.modal.querySelector('#memory-vector-storage-mode');
            if (memoryVectorStorageMode) {
                memoryVectorStorageMode.addEventListener('change', (e) => {
                    this.handleVectorStorageModeChange(e.target.value);
                });
            }

            // 🚀 新增：自定义向量API配置事件
            const customVectorApiUrl = this.modal.querySelector('#memory-custom-vector-api-url');
            if (customVectorApiUrl) {
                customVectorApiUrl.addEventListener('input', (e) => {
                    this.handleCustomVectorApiConfigChange();
                });
            }

            const customVectorApiKey = this.modal.querySelector('#memory-custom-vector-api-key');
            if (customVectorApiKey) {
                customVectorApiKey.addEventListener('input', (e) => {
                    this.handleCustomVectorApiConfigChange();
                });
            }

            const customVectorModel = this.modal.querySelector('#memory-custom-vector-model');
            if (customVectorModel) {
                customVectorModel.addEventListener('input', (e) => {
                    this.handleCustomVectorApiConfigChange();
                });
            }

            // 🚀 新增：向量存储大小限制事件
            const vectorStorageSizeLimit = this.modal.querySelector('#memory-vector-storage-size-limit');
            if (vectorStorageSizeLimit) {
                vectorStorageSizeLimit.addEventListener('input', (e) => {
                    this.handleVectorStorageSizeLimitChange(parseInt(e.target.value) || 0);
                });
            }

            // 深度记忆管理事件
            const memoryDeepMemoryEnabled = this.modal.querySelector('#memory-deep-memory-enabled');
            if (memoryDeepMemoryEnabled) {
                memoryDeepMemoryEnabled.addEventListener('change', (e) => {
                    this.handleDeepMemoryEnabledChange(e.target.checked);
                });
            }

            const memoryAutoMemoryMigration = this.modal.querySelector('#memory-auto-memory-migration');
            if (memoryAutoMemoryMigration) {
                memoryAutoMemoryMigration.addEventListener('change', (e) => {
                    this.handleAutoMemoryMigrationChange(e.target.checked);
                });
            }

            const memoryMemoryConflictResolution = this.modal.querySelector('#memory-memory-conflict-resolution');
            if (memoryMemoryConflictResolution) {
                memoryMemoryConflictResolution.addEventListener('change', (e) => {
                    this.handleMemoryConflictResolutionChange(e.target.checked);
                });
            }

            // 智能记忆分类器事件
            const memoryIntelligentClassifierEnabled = this.modal.querySelector('#memory-intelligent-classifier-enabled');
            if (memoryIntelligentClassifierEnabled) {
                memoryIntelligentClassifierEnabled.addEventListener('change', (e) => {
                    this.handleIntelligentClassifierEnabledChange(e.target.checked);
                });
            }

            const memorySemanticClustering = this.modal.querySelector('#memory-semantic-clustering');
            if (memorySemanticClustering) {
                memorySemanticClustering.addEventListener('change', (e) => {
                    this.handleSemanticClusteringChange(e.target.checked);
                });
            }

            const memoryTemporalPatternRecognition = this.modal.querySelector('#memory-temporal-pattern-recognition');
            if (memoryTemporalPatternRecognition) {
                memoryTemporalPatternRecognition.addEventListener('change', (e) => {
                    this.handleTemporalPatternRecognitionChange(e.target.checked);
                });
            }

            const memoryImportancePrediction = this.modal.querySelector('#memory-importance-prediction');
            if (memoryImportancePrediction) {
                memoryImportancePrediction.addEventListener('change', (e) => {
                    this.handleImportancePredictionChange(e.target.checked);
                });
            }

            const memoryAdaptiveLearning = this.modal.querySelector('#memory-adaptive-learning');
            if (memoryAdaptiveLearning) {
                memoryAdaptiveLearning.addEventListener('change', (e) => {
                    this.handleAdaptiveLearningChange(e.target.checked);
                });
            }

            // 🆕 六大核心功能模块事件
            const memoryMaintenanceEnabled = this.modal.querySelector('#memory-maintenance-enabled');
            if (memoryMaintenanceEnabled) {
                memoryMaintenanceEnabled.addEventListener('change', (e) => {
                    this.handleMemoryMaintenanceEnabledChange(e.target.checked);
                });
            }

            const contextualRetrievalEnabled = this.modal.querySelector('#contextual-retrieval-enabled');
            if (contextualRetrievalEnabled) {
                contextualRetrievalEnabled.addEventListener('change', (e) => {
                    this.handleContextualRetrievalEnabledChange(e.target.checked);
                });
            }

            const userProfileEnabled = this.modal.querySelector('#user-profile-enabled');
            if (userProfileEnabled) {
                userProfileEnabled.addEventListener('change', (e) => {
                    this.handleUserProfileEnabledChange(e.target.checked);
                });
            }

            const knowledgeGraphEnabled = this.modal.querySelector('#knowledge-graph-enabled');
            if (knowledgeGraphEnabled) {
                knowledgeGraphEnabled.addEventListener('change', (e) => {
                    this.handleKnowledgeGraphEnabledChange(e.target.checked);
                });
            }

            const timeAwareEnabled = this.modal.querySelector('#time-aware-enabled');
            if (timeAwareEnabled) {
                timeAwareEnabled.addEventListener('change', (e) => {
                    this.handleTimeAwareEnabledChange(e.target.checked);
                });
            }

            const stIntegrationEnabled = this.modal.querySelector('#st-integration-enabled');
            if (stIntegrationEnabled) {
                stIntegrationEnabled.addEventListener('change', (e) => {
                    this.handleSTIntegrationEnabledChange(e.target.checked);
                });
            }

            // 🗑️ 数据清理按钮事件
            const cleanupAIMemoryBtn = this.modal.querySelector('#cleanup-ai-memory-database');
            if (cleanupAIMemoryBtn) {
                cleanupAIMemoryBtn.addEventListener('click', () => {
                    this.handleCleanupAIMemoryDatabase();
                });
            }

            const cleanupVectorBtn = this.modal.querySelector('#cleanup-vector-data');
            if (cleanupVectorBtn) {
                cleanupVectorBtn.addEventListener('click', () => {
                    this.handleCleanupVectorData();
                });
            }

            const cleanupDeepMemoryBtn = this.modal.querySelector('#cleanup-deep-memory');
            if (cleanupDeepMemoryBtn) {
                cleanupDeepMemoryBtn.addEventListener('click', () => {
                    this.handleCleanupDeepMemory();
                });
            }

            const cleanupKnowledgeGraphBtn = this.modal.querySelector('#cleanup-knowledge-graph');
            if (cleanupKnowledgeGraphBtn) {
                cleanupKnowledgeGraphBtn.addEventListener('click', () => {
                    this.handleCleanupKnowledgeGraph();
                });
            }

            const cleanupAllBtn = this.modal.querySelector('#cleanup-all-memory-data');
            if (cleanupAllBtn) {
                cleanupAllBtn.addEventListener('click', () => {
                    this.handleCleanupAllMemoryData();
                });
            }

            console.log('[InfoBarSettings] ✅ 记忆增强面板事件绑定完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 绑定记忆增强面板事件失败:', error);
        }
    }

    /**
     * 🧠 加载记忆增强面板设置（支持模块设置与扩展设置双来源）
     */
    async loadMemoryEnhancementSettings() {
        try {
            console.log('[InfoBarSettings] 📥 加载记忆增强设置...');

            const infoBarTool = window.SillyTavernInfobar;
            const summaryManager = infoBarTool?.modules?.summaryManager;
            const context = SillyTavern.getContext();
            const extCfg = context?.extensionSettings?.['Information bar integration tool'] || {};
            const savedMem = extCfg.memoryEnhancement || {};

            // 🚀 AI记忆总结设置
            const aiSettings = summaryManager?.aiMemorySummarizer?.settings || savedMem.ai || {};
            const aiEnabledEl = this.modal.querySelector('#memory-ai-memory-enabled');
            const aiMsgLevelEl = this.modal.querySelector('#memory-ai-message-level-summary');
            const aiThresholdEl = this.modal.querySelector('#memory-ai-importance-threshold');
            const aiThresholdVal = this.modal.querySelector('#memory-ai-importance-value');
            if (aiEnabledEl) aiEnabledEl.checked = !!aiSettings.enabled;
            if (aiMsgLevelEl) aiMsgLevelEl.checked = !!aiSettings.messageLevelSummary;
            if (aiThresholdEl) {
                const v = typeof aiSettings.importanceThreshold === 'number' ? aiSettings.importanceThreshold : parseFloat(aiThresholdEl.value) || 0.6;
                aiThresholdEl.value = v;
                if (aiThresholdVal) aiThresholdVal.textContent = `${Math.round(v * 100)}%`;
            }
            // 显示/隐藏AI记忆选项
            this.modal.querySelectorAll('.ai-memory-options').forEach(opt => {
                opt.style.display = aiSettings.enabled ? 'block' : 'none';
            });

            // 🔍 语义搜索设置
            const vectorSettings = summaryManager?.vectorizedMemoryRetriever?.settings || savedMem.vector || {};
            const vecEnabledEl = this.modal.querySelector('#memory-vectorized-memory-enabled');
            const vecEngineEl = this.modal.querySelector('#memory-vector-engine');
            const vecSimEl = this.modal.querySelector('#memory-similarity-threshold');
            const vecSimVal = this.modal.querySelector('#memory-similarity-value');
            const vecMaxEl = this.modal.querySelector('#memory-max-search-results');

            // 🚀 新增：向量存储模式设置
            const vecStorageModeEl = this.modal.querySelector('#memory-vector-storage-mode');
            const vecCustomApiUrlEl = this.modal.querySelector('#memory-custom-vector-api-url');
            const vecCustomApiKeyEl = this.modal.querySelector('#memory-custom-vector-api-key');
            const vecCustomModelEl = this.modal.querySelector('#memory-custom-vector-model');
            const vecStorageSizeLimitEl = this.modal.querySelector('#memory-vector-storage-size-limit');

            if (vecEnabledEl) vecEnabledEl.checked = !!vectorSettings.enabled;
            if (vecEngineEl && vectorSettings.vectorEngine) vecEngineEl.value = vectorSettings.vectorEngine;
            if (vecSimEl) {
                const v = typeof vectorSettings.similarityThreshold === 'number' ? vectorSettings.similarityThreshold : parseFloat(vecSimEl.value) || 0.7;
                vecSimEl.value = v;
                if (vecSimVal) vecSimVal.textContent = `${Math.round(v * 100)}%`;
            }
            if (vecMaxEl && typeof vectorSettings.maxResults === 'number') vecMaxEl.value = vectorSettings.maxResults;

            // 🚀 新增：加载向量存储模式
            if (vecStorageModeEl) {
                let storageMode = 'local'; // 默认值
                if (vectorSettings.useNativeVectorAPI) {
                    storageMode = 'native';
                } else if (vectorSettings.useCustomVectorAPI) {
                    storageMode = 'custom';
                }
                vecStorageModeEl.value = storageMode;

                // 🔧 修复：使用静默模式触发，避免显示不必要的提示
                this.handleVectorStorageModeChange(storageMode, true);
            }

            // 🚀 新增：加载自定义API配置
            if (vectorSettings.customVectorAPI) {
                if (vecCustomApiUrlEl) vecCustomApiUrlEl.value = vectorSettings.customVectorAPI.url || '';
                if (vecCustomApiKeyEl) vecCustomApiKeyEl.value = vectorSettings.customVectorAPI.apiKey || '';
                if (vecCustomModelEl) vecCustomModelEl.value = vectorSettings.customVectorAPI.model || '';
            }

            // 🚀 新增：加载存储大小限制
            if (vecStorageSizeLimitEl) {
                const sizeLimit = typeof vectorSettings.storageSizeLimit === 'number' ? vectorSettings.storageSizeLimit : 10;
                vecStorageSizeLimitEl.value = sizeLimit;
            }

            this.modal.querySelectorAll('.vectorized-memory-options').forEach(opt => {
                opt.style.display = vectorSettings.enabled ? 'block' : 'none';
            });

            // 🧠 深度记忆管理设置
            const deepManager = infoBarTool?.modules?.deepMemoryManager;
            const deepSettings = deepManager?.settings || savedMem.deep || {};
            const deepEnabledEl = this.modal.querySelector('#memory-deep-memory-enabled');
            if (deepEnabledEl) deepEnabledEl.checked = !!deepSettings.enabled;
            this.modal.querySelectorAll('.deep-memory-options').forEach(opt => {
                opt.style.display = deepSettings.enabled ? 'block' : 'none';
            });
            const autoMigEl = this.modal.querySelector('#memory-auto-memory-migration');
            const memImpEl = this.modal.querySelector('#memory-memory-importance-threshold');
            const memImpVal = this.modal.querySelector('#memory-memory-importance-value');
            const confResEl = this.modal.querySelector('#memory-memory-conflict-resolution');
            const capSens = this.modal.querySelector('#memory-sensory-capacity');
            const capShort = this.modal.querySelector('#memory-short-term-capacity');
            const capLong = this.modal.querySelector('#memory-long-term-capacity');
            const capArchive = this.modal.querySelector('#memory-deep-archive-capacity');
            if (autoMigEl) autoMigEl.checked = !!deepSettings.autoMemoryMigration;
            if (memImpEl) {
                const v = typeof deepSettings.memoryImportanceThreshold === 'number' ? deepSettings.memoryImportanceThreshold : parseFloat(memImpEl.value) || 0.6;
                memImpEl.value = v;
                if (memImpVal) memImpVal.textContent = `${Math.round(v * 100)}%`;
            }
            if (confResEl) confResEl.checked = !!deepSettings.memoryConflictResolution;
            if (capSens && deepSettings.capacities?.sensory) capSens.value = deepSettings.capacities.sensory;
            if (capShort && deepSettings.capacities?.shortTerm) capShort.value = deepSettings.capacities.shortTerm;
            if (capLong && deepSettings.capacities?.longTerm) capLong.value = deepSettings.capacities.longTerm;
            if (capArchive && deepSettings.capacities?.deepArchive) capArchive.value = deepSettings.capacities.deepArchive;

            // 🤖 智能记忆分类器设置
            const clf = infoBarTool?.modules?.intelligentMemoryClassifier;
            const clfSettings = clf?.settings || savedMem.classifier || {};
            const clfEnabledEl = this.modal.querySelector('#memory-intelligent-classifier-enabled');
            if (clfEnabledEl) clfEnabledEl.checked = !!clfSettings.enabled;
            this.modal.querySelectorAll('.intelligent-classifier-options').forEach(opt => {
                opt.style.display = clfSettings.enabled ? 'block' : 'none';
            });
            const semClus = this.modal.querySelector('#memory-semantic-clustering');
            const tmpRec = this.modal.querySelector('#memory-temporal-pattern-recognition');
            const impPred = this.modal.querySelector('#memory-importance-prediction');
            const clfConf = this.modal.querySelector('#memory-classification-confidence-threshold');
            const clfConfVal = this.modal.querySelector('#memory-classification-confidence-value');
            const adapLearn = this.modal.querySelector('#memory-adaptive-learning');
            if (semClus) semClus.checked = !!clfSettings.semanticClustering;
            if (tmpRec) tmpRec.checked = !!clfSettings.temporalPatternRecognition;
            if (impPred) impPred.checked = !!clfSettings.importancePrediction;
            if (clfConf) {
                const v = typeof clfSettings.classificationConfidenceThreshold === 'number' ? clfSettings.classificationConfidenceThreshold : parseFloat(clfConf.value) || 0.7;
                clfConf.value = v;
                if (clfConfVal) clfConfVal.textContent = `${Math.round(v * 100)}%`;
            }
            if (adapLearn) adapLearn.checked = !!clfSettings.adaptationEnabled;

            // 🆕 六大核心功能模块设置
            const enhancementSettings = savedMem.enhancement || {};

            const memoryMaintenanceEnabled = this.modal.querySelector('#memory-maintenance-enabled');
            const contextualRetrievalEnabled = this.modal.querySelector('#contextual-retrieval-enabled');
            const userProfileEnabled = this.modal.querySelector('#user-profile-enabled');
            const knowledgeGraphEnabled = this.modal.querySelector('#knowledge-graph-enabled');
            const timeAwareEnabled = this.modal.querySelector('#time-aware-enabled');
            const stIntegrationEnabled = this.modal.querySelector('#st-integration-enabled');

            // 从模块或保存的设置中加载
            const mms = infoBarTool?.modules?.memoryMaintenanceSystem;
            const cr = infoBarTool?.modules?.contextualRetrieval;
            const upm = infoBarTool?.modules?.userProfileManager;
            const kgm = infoBarTool?.modules?.knowledgeGraphManager;
            const tam = infoBarTool?.modules?.timeAwareMemoryManager;
            const sti = infoBarTool?.modules?.sillyTavernIntegration;

            if (memoryMaintenanceEnabled) {
                memoryMaintenanceEnabled.checked = mms?.settings?.enabled ?? enhancementSettings.memoryMaintenance ?? false;
            }
            if (contextualRetrievalEnabled) {
                contextualRetrievalEnabled.checked = cr?.settings?.enabled ?? enhancementSettings.contextualRetrieval ?? false;
            }
            if (userProfileEnabled) {
                userProfileEnabled.checked = upm?.settings?.enabled ?? enhancementSettings.userProfile ?? false;
            }
            if (knowledgeGraphEnabled) {
                knowledgeGraphEnabled.checked = kgm?.settings?.enabled ?? enhancementSettings.knowledgeGraph ?? false;
            }
            if (timeAwareEnabled) {
                timeAwareEnabled.checked = tam?.settings?.enabled ?? enhancementSettings.timeAware ?? false;
            }
            if (stIntegrationEnabled) {
                stIntegrationEnabled.checked = sti?.settings?.enabled ?? enhancementSettings.stIntegration ?? false;
            }

            console.log('[InfoBarSettings] ✅ 记忆增强设置加载完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载记忆增强设置失败:', error);
        }
    }

    /**
     * 🧠 初始化记忆增强面板内容
     */
    initMemoryEnhancementPanelContent() {
        try {
            console.log('[InfoBarSettings] 🧠 初始化记忆增强面板内容...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool) {
                console.warn('[InfoBarSettings] ⚠️ InfoBar工具未找到');
                return;
            }

            // 加载当前设置
            this.loadMemoryEnhancementSettings();

            // 绑定记忆增强面板事件
            this.bindMemoryEnhancementEvents();

            // 初始化状态显示
            this.refreshMemoryStatus();

            console.log('[InfoBarSettings] ✅ 记忆增强面板内容初始化完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化记忆增强面板内容失败:', error);
        }
    }

    /**
     * 🎯 刷新记忆系统状态显示
     */
    async refreshMemoryStatus() {
        try {
            console.log('[InfoBarSettings] 🔄 刷新记忆系统状态...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool) {
                console.warn('[InfoBarSettings] ⚠️ InfoBar工具未找到');
                return;
            }

            // 获取各模块状态
            const deepMemoryManager = infoBarTool.modules?.deepMemoryManager;
            const aiMemorySummarizer = infoBarTool.modules?.summaryManager?.aiMemorySummarizer;
            const vectorizedMemoryRetrieval = infoBarTool.modules?.vectorizedMemoryRetrieval;
            const intelligentMemoryClassifier = infoBarTool.modules?.intelligentMemoryClassifier;
            const aiMemoryDatabaseInjector = infoBarTool.modules?.aiMemoryDatabaseInjector;

            // 更新四层记忆架构状态
            if (deepMemoryManager) {
                const status = deepMemoryManager.getStatus();
                this.updateMemoryLayerStatus('sensory', status);
                this.updateMemoryLayerStatus('shortTerm', status);
                this.updateMemoryLayerStatus('longTerm', status);
                this.updateMemoryLayerStatus('deepArchive', status);
            }

            // 更新模块状态
            if (aiMemorySummarizer) {
                const status = aiMemorySummarizer.getStatus();
                this.updateModuleStatus('aiSummarizer', status);
            }

            if (vectorizedMemoryRetrieval) {
                const status = vectorizedMemoryRetrieval.getStatus();
                this.updateModuleStatus('vectorSearch', status);
            }

            if (intelligentMemoryClassifier) {
                const status = intelligentMemoryClassifier.getStatus();
                this.updateModuleStatus('classifier', status);
            }

            if (aiMemoryDatabaseInjector) {
                const status = aiMemoryDatabaseInjector.getStatus();
                this.updateModuleStatus('injector', status);
            }

            // 🆕 更新六大核心功能模块状态
            const memoryMaintenanceSystem = infoBarTool.modules?.memoryMaintenanceSystem;
            if (memoryMaintenanceSystem) {
                const status = memoryMaintenanceSystem.getStatus();
                this.updateEnhancementModuleStatus('memoryMaintenance', status);
            }

            const contextualRetrieval = infoBarTool.modules?.contextualRetrieval;
            if (contextualRetrieval) {
                const status = contextualRetrieval.getStatus();
                this.updateEnhancementModuleStatus('contextualRetrieval', status);
            }

            const userProfileManager = infoBarTool.modules?.userProfileManager;
            if (userProfileManager) {
                const status = userProfileManager.getStatus();
                this.updateEnhancementModuleStatus('userProfile', status);
            }

            const knowledgeGraphManager = infoBarTool.modules?.knowledgeGraphManager;
            if (knowledgeGraphManager) {
                const status = knowledgeGraphManager.getStatus();
                this.updateEnhancementModuleStatus('knowledgeGraph', status);
            }

            const timeAwareMemoryManager = infoBarTool.modules?.timeAwareMemoryManager;
            if (timeAwareMemoryManager) {
                const status = timeAwareMemoryManager.getStatus();
                this.updateEnhancementModuleStatus('timeAware', status);
            }

            const sillyTavernIntegration = infoBarTool.modules?.sillyTavernIntegration;
            if (sillyTavernIntegration) {
                const status = sillyTavernIntegration.getStatus();
                this.updateEnhancementModuleStatus('stIntegration', status);
            }

            console.log('[InfoBarSettings] ✅ 记忆系统状态刷新完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新记忆系统状态失败:', error);
        }
    }

    /**
     * 🎯 更新记忆层状态显示
     */
    updateMemoryLayerStatus(layerName, status) {
        try {
            const layerData = status.memoryLayers?.[layerName];
            const stats = status.stats || {};
            const settings = status.settings || {};

            // 更新状态指示器
            const statusElement = this.modal.querySelector(`#${layerName === 'shortTerm' ? 'shortterm' : layerName === 'longTerm' ? 'longterm' : layerName === 'deepArchive' ? 'archive' : layerName}-status`);
            if (statusElement) {
                const isActive = status.initialized && !status.isProcessing;
                statusElement.className = `layer-status ${isActive ? 'active' : status.errorCount > 0 ? 'error' : 'inactive'}`;
            }

            // 更新具体数据
            switch (layerName) {
                case 'sensory':
                    this.updateElement('#sensory-count', layerData || 0);
                    this.updateElement('#sensory-capacity', `${layerData || 0}/${settings.sensoryMemoryCapacity || 100}`);
                    break;
                case 'shortTerm':
                    this.updateElement('#shortterm-count', layerData || 0);
                    this.updateElement('#shortterm-importance', `${Math.round((stats.averageImportance || 0) * 100)}%`);
                    break;
                case 'longTerm':
                    this.updateElement('#longterm-count', layerData || 0);
                    this.updateElement('#longterm-migrations', stats.memoryMigrations || 0);
                    break;
                case 'deepArchive':
                    this.updateElement('#archive-count', layerData || 0);
                    this.updateElement('#archive-compression', `${Math.round((stats.compressionRatio || 0) * 100)}%`);
                    break;
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新记忆层状态失败 (${layerName}):`, error);
        }
    }

    /**
     * 🎯 更新模块状态显示
     */
    updateModuleStatus(moduleName, status) {
        try {
            // 更新状态指示器
            const statusElement = this.modal.querySelector(`#${moduleName === 'aiSummarizer' ? 'ai-summarizer' : moduleName === 'vectorSearch' ? 'vector-search' : moduleName}-status`);
            if (statusElement) {
                const isActive = status.initialized && !status.isProcessing;
                statusElement.className = `module-status ${isActive ? 'active' : status.errorCount > 0 ? 'error' : 'inactive'}`;
            }

            // 更新具体数据
            switch (moduleName) {
                case 'aiSummarizer':
                    this.updateElement('#ai-summarizer-queue', status.queueLength || 0);
                    this.updateElement('#ai-summarizer-cache', status.cacheSize || 0);
                    break;
                case 'vectorSearch':
                    this.updateElement('#vector-search-index', status.indexSize || 0);
                    // 🔧 修复：正确计算命中率
                    let hitRate = 0;
                    if (status.stats) {
                        const cacheHits = status.stats.cacheHits || 0;
                        const cacheMisses = status.stats.cacheMisses || 0;
                        const totalRequests = cacheHits + cacheMisses;
                        hitRate = totalRequests > 0 ? Math.round((cacheHits / totalRequests) * 100) : 0;
                    }
                    this.updateElement('#vector-search-hitrate', `${hitRate}%`);
                    break;
                case 'classifier':
                    // 🔧 修复：使用正确的字段名
                    this.updateElement('#classifier-count', status.stats?.totalClassifications || 0);
                    this.updateElement('#classifier-confidence', `${Math.round((status.stats?.averageConfidence || 0) * 100)}%`);
                    break;
                case 'injector':
                    this.updateElement('#injector-count', status.stats?.totalInjections || 0);
                    this.updateElement('#injector-errors', status.errorCount || 0);
                    break;
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新模块状态失败 (${moduleName}):`, error);
        }
    }

    /**
     * 🆕 更新六大核心功能模块状态显示
     */
    updateEnhancementModuleStatus(moduleName, status) {
        try {
            // 状态指示器ID映射
            const statusIdMap = {
                'memoryMaintenance': 'memory-maintenance-status',
                'contextualRetrieval': 'contextual-retrieval-status',
                'userProfile': 'user-profile-status',
                'knowledgeGraph': 'knowledge-graph-status',
                'timeAware': 'time-aware-status',
                'stIntegration': 'st-integration-status'
            };

            // 更新状态指示器
            const statusElement = this.modal.querySelector(`#${statusIdMap[moduleName]}`);
            if (statusElement) {
                const isActive = status.initialized && status.enabled;
                statusElement.className = `module-status ${isActive ? 'active' : status.errorCount > 0 ? 'error' : 'inactive'}`;
            }

            // 更新具体数据
            switch (moduleName) {
                case 'memoryMaintenance':
                    this.updateElement('#memory-maintenance-cleanups', status.stats?.totalCleanups || 0);
                    this.updateElement('#memory-maintenance-compressions', status.stats?.totalCompressions || 0);
                    break;
                case 'contextualRetrieval':
                    this.updateElement('#contextual-retrieval-queries', status.stats?.totalQueries || 0);
                    this.updateElement('#contextual-retrieval-cache-hits', status.stats?.cacheHits || 0);
                    break;
                case 'userProfile':
                    this.updateElement('#user-profile-count', status.profilesCount || 0);
                    const confidence = status.currentProfile?.confidence || 0;
                    this.updateElement('#user-profile-confidence', `${Math.round(confidence * 100)}%`);
                    break;
                case 'knowledgeGraph':
                    const currentGraph = status.currentGraph;
                    this.updateElement('#knowledge-graph-triples', currentGraph?.triples?.length || 0);
                    this.updateElement('#knowledge-graph-entities', currentGraph?.entities?.size || 0);
                    break;
                case 'timeAware':
                    const currentTimeline = status.currentTimeline;
                    this.updateElement('#time-aware-events', currentTimeline?.events?.length || 0);
                    this.updateElement('#time-aware-decayed', status.stats?.totalDecayed || 0);
                    break;
                case 'stIntegration':
                    this.updateElement('#st-integration-injections', status.stats?.totalInjections || 0);
                    const avgTime = status.stats?.avgInjectionTime || 0;
                    this.updateElement('#st-integration-avg-time', `${avgTime.toFixed(2)}ms`);
                    break;
            }

        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新增强模块状态失败 (${moduleName}):`, error);
        }
    }

    /**
     * 🎯 更新DOM元素内容
     */
    updateElement(selector, value) {
        try {
            const element = this.modal.querySelector(selector);
            if (element) {
                element.textContent = value;
            }
        } catch (error) {
            console.error(`[InfoBarSettings] ❌ 更新元素失败 (${selector}):`, error);
        }
    }

    /**
     * 🧠 处理提示词模式变化
     */
    handlePromptModeChange(mode) {
        try {
            console.log('[InfoBarSettings] 🧠 提示词模式变化:', mode);

            const smartConfig = this.modal.querySelector('#smart-prompt-config');
            const customConfig = this.modal.querySelector('#custom-prompt-config');

            if (mode === 'smart') {
                // 显示智能提示词配置，隐藏自定义提示词配置
                if (smartConfig) smartConfig.style.display = 'block';
                if (customConfig) customConfig.style.display = 'none';

                // 启用智能提示词系统
                this.enableSmartPromptSystem();

                console.log('[InfoBarSettings] ✅ 已切换到智能提示词模式');
            } else if (mode === 'custom') {
                // 隐藏智能提示词配置，显示自定义提示词配置
                if (smartConfig) smartConfig.style.display = 'none';
                if (customConfig) customConfig.style.display = 'block';

                // 禁用智能提示词系统
                this.disableSmartPromptSystem();

                console.log('[InfoBarSettings] ✅ 已切换到自定义提示词模式');
            }

            // 保存设置
            this.savePromptSettings();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理提示词模式变化失败:', error);
        }
    }

    /**
     * 🧠 启用智能提示词系统
     */
    enableSmartPromptSystem() {
        try {
            const infoBarTool = window.SillyTavernInfobar;
            const smartPromptSystem = infoBarTool?.modules?.smartPromptSystem;

            if (smartPromptSystem) {
                // 重新启用智能提示词系统
                smartPromptSystem.enabled = true;
                console.log('[InfoBarSettings] ✅ 智能提示词系统已启用');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 启用智能提示词系统失败:', error);
        }
    }

    /**
     * 🧠 禁用智能提示词系统
     */
    disableSmartPromptSystem() {
        try {
            const infoBarTool = window.SillyTavernInfobar;
            const smartPromptSystem = infoBarTool?.modules?.smartPromptSystem;

            if (smartPromptSystem) {
                // 禁用智能提示词系统
                smartPromptSystem.enabled = false;
                console.log('[InfoBarSettings] ⚠️ 智能提示词系统已禁用');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 禁用智能提示词系统失败:', error);
        }
    }

    /**
     * 🧠 更新自定义提示词统计信息
     */
    updateCustomPromptStats() {
        try {
            const textarea = this.modal.querySelector('#custom-prompt-content');
            if (!textarea) return;

            const content = textarea.value;
            const charCount = content.length;
            const wordCount = content.trim() ? content.trim().split(/\s+/).length : 0;
            const lineCount = content.split('\n').length;

            // 更新统计显示
            const charCountSpan = this.modal.querySelector('#custom-prompt-char-count');
            const wordCountSpan = this.modal.querySelector('#custom-prompt-word-count');
            const lineCountSpan = this.modal.querySelector('#custom-prompt-line-count');

            if (charCountSpan) charCountSpan.textContent = charCount;
            if (wordCountSpan) wordCountSpan.textContent = wordCount;
            if (lineCountSpan) lineCountSpan.textContent = lineCount;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新自定义提示词统计失败:', error);
        }
    }

    /**
     * 🧠 刷新提示词预览
     */
    async refreshPromptPreview() {
        try {
            console.log('[InfoBarSettings] 🔄 刷新提示词预览...');

            const previewContainer = this.modal.querySelector('#prompt-preview');
            const statusSpan = this.modal.querySelector('#preview-status');

            if (!previewContainer) return;

            // 更新状态
            if (statusSpan) statusSpan.textContent = '生成中...';

            // 获取当前提示词模式
            const modeRadio = this.modal.querySelector('input[name="promptSettings.mode"]:checked');
            const mode = modeRadio ? modeRadio.value : 'smart';

            let previewContent = '';

            if (mode === 'smart') {
                // 生成智能提示词预览
                previewContent = await this.generateSmartPromptPreview();
            } else {
                // 获取自定义提示词内容
                const customContent = this.modal.querySelector('#custom-prompt-content')?.value || '';
                previewContent = customContent || '暂无自定义提示词内容';
            }

            // 显示预览内容
            previewContainer.innerHTML = `
                <div class="prompt-preview-content">
                    <pre>${this.escapeXML(previewContent)}</pre>
                </div>
            `;

            // 更新状态
            if (statusSpan) statusSpan.textContent = '预览已更新';

            console.log('[InfoBarSettings] ✅ 提示词预览刷新完成');

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新提示词预览失败:', error);

            const statusSpan = this.modal.querySelector('#preview-status');
            if (statusSpan) statusSpan.textContent = '预览失败';
        }
    }

    /**
     * 🧠 生成智能提示词预览（不包含数据状态部分）
     */
    async generateSmartPromptPreview() {
        try {
            const infoBarTool = window.SillyTavernInfobar;
            const smartPromptSystem = infoBarTool?.modules?.smartPromptSystem;

            if (!smartPromptSystem) {
                return '智能提示词系统未初始化';
            }

            // 生成完整的智能提示词
            const fullSmartPrompt = await smartPromptSystem.generateSmartPrompt();

            if (fullSmartPrompt) {
                // 移除数据状态部分，只显示提示词模板
                const previewPrompt = this.removeDataStatusFromPrompt(fullSmartPrompt);
                return previewPrompt || '智能提示词模板（不包含数据状态部分）';
            } else {
                return '暂无智能提示词内容（可能没有启用的面板或数据）';
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 生成智能提示词预览失败:', error);
            return '生成智能提示词预览时出错: ' + error.message;
        }
    }

    /**
     * 🧠 从提示词中移除在预览中不显示的隐藏部分
     * - 【📊 当前数据状态（统一行视图）】...【🤖 AI生成指导】（AI记忆增强数据整体块）
     * - 🔍 缺失字段详细列表（必须补充） 块
     */
    removeDataStatusFromPrompt(fullPrompt) {
        try {
            let result = fullPrompt;

            // 1) 移除 AI记忆增强数据整体块（包含数据状态、历史/持久化/上下文记忆等）
            const dataStatusStart = result.indexOf('【📊 当前数据状态（统一行视图）】');
            if (dataStatusStart !== -1) {
                // 寻找AI记忆增强块的结束位置（包括【🤖 AI生成指导】之后的内容）
                const possibleEnds = [
                    '🔍 **缺失字段详细列表',
                    '【🔄 增量数据补充 - 重要】',
                    '【📋 输出完整性检查清单】',
                    '💥💥💥 **最终执行检查清单**',
                    '【当前行索引提示】',
                    '\n\n【', // 下一个大标题
                ];

                let endIndex = -1;
                for (const endMarker of possibleEnds) {
                    const idx = result.indexOf(endMarker, dataStatusStart);
                    if (idx !== -1) {
                        if (endIndex === -1 || idx < endIndex) {
                            endIndex = idx;
                        }
                    }
                }

                if (endIndex !== -1) {
                    const beforeData = result.substring(0, dataStatusStart);
                    const afterData = result.substring(endIndex);
                    result = (beforeData + afterData).trim();
                } else {
                    result = result.substring(0, dataStatusStart).trim();
                }
            }

            // 2) 额外移除 “缺失字段详细列表（必须补充）” 块
            const missingTitle = '缺失字段详细列表';
            let missingStart = result.indexOf(missingTitle);
            if (missingStart !== -1) {
                // 寻找下一个可能的分段起始标记（下一个大标题/区块）
                const markers = [
                    '\n【', // 下一段以【 开头的大标题
                    '【',   // 兜底：任意【 开头
                    '💥💥💥', // 最终检查清单标题
                    '【📋 输出完整性检查清单】',
                    '\n\n【',
                ];
                let nextIndex = -1;
                for (const m of markers) {
                    const idx = result.indexOf(m, missingStart + 1);
                    if (idx !== -1) {
                        if (nextIndex === -1 || idx < nextIndex) nextIndex = idx;
                    }
                }

                if (nextIndex !== -1) {
                    result = (result.substring(0, missingStart) + result.substring(nextIndex)).trim();
                } else {
                    // 没有找到下一个分段标记，则截断到末尾
                    result = result.substring(0, missingStart).trim();
                }
            }

            return result;
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 过滤预览隐藏部分失败:', error);
            return fullPrompt;
        }
    }

    /**
     * 🧠 保存提示词设置
     */
    async savePromptSettings() {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};

            // 获取当前设置
            const modeRadio = this.modal.querySelector('input[name="promptSettings.mode"]:checked');
            const mode = modeRadio ? modeRadio.value : 'smart';
            const customContent = this.modal.querySelector('#custom-prompt-content')?.value || '';

            // 保存设置
            configs.promptSettings = {
                mode: mode,
                customContent: customContent
            };

            // 保存到SillyTavern
            extensionSettings['Information bar integration tool'] = configs;

            // 使用configManager保存配置
            if (this.configManager && typeof this.configManager.setConfig === 'function') {
                await this.configManager.setConfig('promptSettings', configs.promptSettings);
            }

            // 使用SillyTavern的保存机制
            if (typeof saveSettingsDebounced === 'function') {
                saveSettingsDebounced();
            }

            console.log('[InfoBarSettings] ✅ 提示词设置已保存:', { mode, customContentLength: customContent.length });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 保存提示词设置失败:', error);
        }
    }

    /**
     * 🧠 加载提示词设置
     */
    async loadPromptSettings() {
        try {
            const context = SillyTavern.getContext();
            const extensionSettings = context.extensionSettings;
            const configs = extensionSettings['Information bar integration tool'] || {};
            const promptSettings = configs.promptSettings || {};

            // 设置默认值
            const mode = promptSettings.mode || 'smart';
            const customContent = promptSettings.customContent || '';

            // 更新UI
            const smartRadio = this.modal.querySelector('#smart-prompt-mode');
            const customRadio = this.modal.querySelector('#custom-prompt-mode');
            const customTextarea = this.modal.querySelector('#custom-prompt-content');

            if (smartRadio && customRadio) {
                if (mode === 'smart') {
                    smartRadio.checked = true;
                } else {
                    customRadio.checked = true;
                }
            }

            if (customTextarea) {
                customTextarea.value = customContent;
            }

            // 触发模式变化处理
            this.handlePromptModeChange(mode);

            // 更新统计信息
            this.updateCustomPromptStats();

            console.log('[InfoBarSettings] ✅ 提示词设置已加载:', { mode, customContentLength: customContent.length });

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 加载提示词设置失败:', error);
        }
    }

    /**
     * 初始化NPC管理面板内容
     */
    initNPCManagementPanelContent() {
        try {
            console.log('[InfoBarSettings] 🎭 初始化NPC管理面板内容...');

            // 🆕 填充NPC数据源面板选项
            this.populateNPCSourcePanelOptions();

            // 🆕 填充世界书选项
            this.populateNPCWorldBookOptions();

            // 刷新NPC列表
            this.refreshNPCList();

            // 绑定搜索事件
            const searchInput = this.modal.querySelector('#npc-search-input');
            if (searchInput) {
                searchInput.addEventListener('input', (e) => {
                    this.filterNPCList(e.target.value);
                });
            }

            // 🆕 绑定数据源面板选择事件
            const sourcePanelSelect = this.modal.querySelector('#npc-source-panel-select');
            if (sourcePanelSelect) {
                sourcePanelSelect.addEventListener('change', (e) => {
                    this.handleNPCSourcePanelChange(e.target.value);
                });
            }

            // 🆕 绑定世界书选择事件
            const worldBookSelect = this.modal.querySelector('#npc-target-worldbook-select');
            if (worldBookSelect) {
                worldBookSelect.addEventListener('change', (e) => {
                    this.handleNPCWorldBookChange(e.target.value);
                });
            }

            console.log('[InfoBarSettings] ✅ NPC管理面板内容初始化完成');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 初始化NPC管理面板内容失败:', error);
        }
    }

    /**
     * 🆕 填充NPC数据源面板选项
     */
    populateNPCSourcePanelOptions() {
        try {
            const select = this.modal.querySelector('#npc-source-panel-select');
            if (!select) return;

            // 获取所有启用的面板
            const context = SillyTavern.getContext();
            const settings = context.extensionSettings['Information bar integration tool'] || {};

            // 🔧 修复：获取保存的数据源面板
            const savedSourcePanel = localStorage.getItem('npcPanel_sourcePanel') || 'interaction';

            // 清空现有选项
            select.innerHTML = '';
            
            // 添加默认选项
            const defaultOption = document.createElement('option');
            defaultOption.value = 'interaction';
            defaultOption.textContent = '交互对象面板（默认）';
            select.appendChild(defaultOption);

            // 添加基础面板选项
            const basicPanels = ['personal', 'world', 'tasks', 'organization', 'news', 'inventory', 'abilities', 'plot'];
            const panelNames = {
                'personal': '个人信息',
                'world': '世界信息',
                'tasks': '任务系统',
                'organization': '组织架构',
                'news': '新闻资讯',
                'inventory': '物品清单',
                'abilities': '能力技能',
                'plot': '剧情发展'
            };

            basicPanels.forEach(panelId => {
                if (settings[panelId] && settings[panelId].enabled !== false) {
                    const option = document.createElement('option');
                    option.value = panelId;
                    option.textContent = `${panelNames[panelId]}面板`;
                    select.appendChild(option);
                }
            });

            // 添加自定义面板选项
            if (settings.customPanels) {
                Object.entries(settings.customPanels).forEach(([panelId, panelConfig]) => {
                    if (panelConfig.enabled !== false) {
                        const option = document.createElement('option');
                        option.value = panelId;
                        option.textContent = `${panelConfig.name}（自定义面板）`;
                        select.appendChild(option);
                    }
                });
            }

            // 🔧 修复：恢复之前保存的选择
            select.value = savedSourcePanel;
            console.log('[InfoBarSettings] ✅ NPC数据源面板选项已填充，当前选择:', savedSourcePanel);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 填充NPC数据源面板选项失败:', error);
        }
    }

    /**
     * 🆕 填充世界书选项
     */
    async populateNPCWorldBookOptions() {
        try {
            const select = this.modal.querySelector('#npc-target-worldbook-select');
            if (!select) return;

            // 获取保存的世界书选择
            const savedWorldBook = localStorage.getItem('npcPanel_targetWorldBook') || 'auto';

            // 清空现有选项
            select.innerHTML = '';

            // 添加默认选项
            const autoOption = document.createElement('option');
            autoOption.value = 'auto';
            autoOption.textContent = '角色链接的主要世界书（默认）';
            select.appendChild(autoOption);

            // 获取所有可用的世界书
            const worldBooks = await this.getAllWorldBooks();
            
            if (worldBooks && worldBooks.length > 0) {
                worldBooks.forEach(worldBook => {
                    const option = document.createElement('option');
                    option.value = worldBook.name;
                    option.textContent = worldBook.name;
                    select.appendChild(option);
                });
            }

            // 恢复之前保存的选择
            select.value = savedWorldBook;
            console.log('[InfoBarSettings] ✅ 世界书选项已填充，当前选择:', savedWorldBook);

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 填充世界书选项失败:', error);
        }
    }

    /**
     * 🆕 获取所有世界书列表
     */
    async getAllWorldBooks() {
        try {
            // 🔧 修复：从DOM选择器获取世界书列表
            const worldInfoSelect = document.querySelector('#world_info');
            
            if (!worldInfoSelect || !worldInfoSelect.options) {
                console.warn('[InfoBarSettings] ⚠️ 世界书选择器不可用');
                return [];
            }

            const worldBooks = [];
            for (let i = 0; i < worldInfoSelect.options.length; i++) {
                const option = worldInfoSelect.options[i];
                if (option.value && option.text) {
                    worldBooks.push({
                        name: option.text,
                        value: option.value,
                        selected: option.selected
                    });
                }
            }

            console.log('[InfoBarSettings] 📚 找到', worldBooks.length, '个世界书');
            return worldBooks;

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 获取世界书列表失败:', error);
            return [];
        }
    }

    /**
     * 🆕 处理世界书选择变更
     */
    handleNPCWorldBookChange(worldBookName) {
        try {
            console.log('[InfoBarSettings] 🔄 NPC目标世界书变更:', worldBookName);

            // 保存设置
            localStorage.setItem('npcPanel_targetWorldBook', worldBookName);

            // 通知NPC管理面板更新目标世界书
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (npcPanel && typeof npcPanel.setTargetWorldBook === 'function') {
                npcPanel.setTargetWorldBook(worldBookName);
                console.log('[InfoBarSettings] ✅ NPC管理面板目标世界书已更新');
            }

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理世界书选择变更失败:', error);
        }
    }

    /**
     * 🆕 处理NPC数据源面板变更
     */
    handleNPCSourcePanelChange(panelId) {
        try {
            console.log('[InfoBarSettings] 🔄 NPC数据源面板变更:', panelId);

            // 保存设置
            localStorage.setItem('npcPanel_sourcePanel', panelId);

            // 通知NPC管理面板更新数据源
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (npcPanel && typeof npcPanel.setDataSourcePanel === 'function') {
                npcPanel.setDataSourcePanel(panelId);
                console.log('[InfoBarSettings] ✅ NPC管理面板数据源已更新');
            }

            // 刷新NPC列表
            this.refreshNPCList();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 处理NPC数据源面板变更失败:', error);
        }
    }

    /**
     * 过滤NPC列表
     */
    filterNPCList(searchText) {
        try {
            const cards = this.modal.querySelectorAll('.npc-card');
            const searchLower = searchText.toLowerCase();

            cards.forEach(card => {
                const npcName = card.querySelector('.npc-name')?.textContent?.toLowerCase() || '';
                const shouldShow = !searchText || npcName.includes(searchLower);
                card.style.display = shouldShow ? 'block' : 'none';
            });

            console.log('[InfoBarSettings] 🔍 NPC列表已过滤，搜索词:', searchText);
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 过滤NPC列表失败:', error);
        }
    }

    // ==================== NPC管理相关方法 ====================

    /**
     * 处理NPC自动同步开关变更
     */
    handleNPCAutoSyncChange(enabled) {
        try {
            localStorage.setItem('npcPanel_autoSync', enabled.toString());
            console.log('[InfoBarSettings] 🔄 NPC自动同步设置已更新:', enabled ? '开启' : '关闭');

            // 通知NPC管理面板更新状态
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (npcPanel) {
                npcPanel.autoSyncEnabled = enabled;
                npcPanel.updateSyncUI?.();
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新NPC自动同步设置失败:', error);
        }
    }

    /**
     * 处理NPC世界书同步开关变更
     */
    handleNPCWorldBookSyncChange(enabled) {
        try {
            localStorage.setItem('npcPanel_worldBookSync', enabled.toString());
            console.log('[InfoBarSettings] 🌍 NPC世界书同步设置已更新:', enabled ? '开启' : '关闭');

            // 通知NPC管理面板更新状态
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (npcPanel) {
                npcPanel.worldBookSyncEnabled = enabled;
                npcPanel.updateWorldBookSyncUI?.();
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 更新NPC世界书同步设置失败:', error);
        }
    }

    /**
     * 处理立即同步NPC数据
     */
    async handleNPCSyncNow() {
        try {
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (!npcPanel) {
                this.showNotification('NPC管理模块未找到', 'error');
                return;
            }

            console.log('[InfoBarSettings] 🔄 开始手动同步NPC数据...');
            await npcPanel.syncNow();
            this.refreshNPCList();
            this.showNotification('NPC数据同步完成', 'success');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 手动同步NPC数据失败:', error);
            this.showNotification('NPC数据同步失败: ' + error.message, 'error');
        }
    }

    /**
     * 处理同步NPC到世界书
     */
    async handleNPCWorldBookSyncNow() {
        try {
            const npcPanel = window.SillyTavernInfobar?.modules?.npcManagementPanel;
            if (!npcPanel) {
                this.showNotification('NPC管理模块未找到', 'error');
                return;
            }

            console.log('[InfoBarSettings] 🌍 开始手动同步NPC到世界书...');
            await npcPanel.syncToWorldBook();
            this.showNotification('NPC数据已同步到世界书', 'success');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 手动同步NPC到世界书失败:', error);
            this.showNotification('同步到世界书失败: ' + error.message, 'error');
        }
    }

    /**
     * 刷新NPC列表
     */
    async refreshNPCList() {
        try {
            const container = this.modal.querySelector('#npc-cards-container');
            if (!container) return;

            // 显示加载状态
            container.innerHTML = '<div class="npc-loading">正在加载NPC数据...</div>';

            const npcDB = window.SillyTavernInfobar?.modules?.npcDatabaseManager;
            if (!npcDB) {
                container.innerHTML = '<div class="npc-error">NPC数据库模块未找到</div>';
                return;
            }

            // 获取当前聊天的NPC数据
            const npcs = await npcDB.getAllNpcsForCurrentChat();

            if (!npcs || npcs.length === 0) {
                container.innerHTML = '<div class="npc-empty">当前聊天中暂无NPC数据</div>';
                return;
            }

            // 生成NPC卡片
            const cardsHtml = npcs.map(npc => this.createNPCCard(npc)).join('');
            container.innerHTML = cardsHtml;

            // 绑定卡片点击事件
            this.bindNPCCardEvents();

            console.log('[InfoBarSettings] ✅ NPC列表已刷新，显示', npcs.length, '个NPC');
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 刷新NPC列表失败:', error);
            const container = this.modal.querySelector('#npc-cards-container');
            if (container) {
                container.innerHTML = '<div class="npc-error">加载NPC数据失败</div>';
            }
        }
    }

    /**
     * 创建NPC卡片HTML
     */
    createNPCCard(npc) {
        const lastSeenTime = npc.lastSeen ? new Date(npc.lastSeen).toLocaleString() : '未知';
        const fieldCount = Object.keys(npc.fields || {}).length;

        return `
            <div class="npc-card" data-npc-id="${npc.id}">
                <div class="npc-card-header">
                    <h4 class="npc-name">${this.escapeHtml(npc.name)}</h4>
                    <span class="npc-appear-count">${npc.appearCount || 0}次</span>
                </div>
                <div class="npc-card-body">
                    <div class="npc-info">
                        <span class="npc-field-count">📋 ${fieldCount} 个字段</span>
                        <span class="npc-last-seen">🕒 ${lastSeenTime}</span>
                    </div>
                </div>
                <div class="npc-card-footer">
                    <div class="npc-card-actions">
                        <button class="btn btn-sm btn-outline-primary npc-view-btn" data-npc-id="${npc.id}">
                            查看详情
                        </button>
                        <button class="btn btn-sm btn-outline-danger npc-delete-btn" data-npc-id="${npc.id}" title="删除此NPC">
                            🗑️ 删除
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * 绑定NPC卡片事件
     */
    bindNPCCardEvents() {
        const cards = this.modal.querySelectorAll('.npc-card');
        cards.forEach(card => {
            card.addEventListener('click', (e) => {
                if (e.target.classList.contains('npc-view-btn')) {
                    const npcId = e.target.dataset.npcId;
                    this.showNPCDetails(npcId);
                } else if (e.target.classList.contains('npc-delete-btn')) {
                    e.stopPropagation(); // 阻止事件冒泡
                    const npcId = e.target.dataset.npcId;
                    this.deleteNPC(npcId);
                }
            });
        });
    }

    /**
     * 删除NPC
     */
    async deleteNPC(npcId) {
        try {
            const npcDB = window.SillyTavernInfobar?.modules?.npcDatabaseManager;
            if (!npcDB) {
                console.error('[InfoBarSettings] ❌ NPC数据库模块未找到');
                return;
            }

            // 获取NPC信息用于确认对话框
            const npc = npcDB.getNPCById(npcId);
            if (!npc) {
                console.error('[InfoBarSettings] ❌ 未找到NPC:', npcId);
                return;
            }

            // 显示确认对话框
            const confirmed = confirm(`确定要删除NPC "${npc.name}" 吗？\n\n此操作不可撤销，将永久删除该NPC的所有数据。`);
            if (!confirmed) {
                console.log('[InfoBarSettings] 🚫 用户取消删除操作');
                return;
            }

            console.log('[InfoBarSettings] 🗑️ 开始删除NPC:', npcId, npc.name);

            // 执行删除操作
            const success = await npcDB.deleteNPC(npcId);
            if (success) {
                console.log('[InfoBarSettings] ✅ NPC删除成功:', npcId);

                // 刷新NPC列表
                await this.refreshNPCList();

                // 显示成功提示
                this.showToast(`NPC "${npc.name}" 已成功删除`, 'success');
            } else {
                console.error('[InfoBarSettings] ❌ NPC删除失败:', npcId);
                this.showToast(`删除NPC "${npc.name}" 失败`, 'error');
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 删除NPC时发生错误:', error);
            this.showToast('删除NPC时发生错误', 'error');
        }
    }

    /**
     * 显示Toast提示
     */
    showToast(message, type = 'info') {
        try {
            // 尝试使用SillyTavern的toast系统
            if (window.toastr) {
                switch (type) {
                    case 'success':
                        window.toastr.success(message);
                        break;
                    case 'error':
                        window.toastr.error(message);
                        break;
                    case 'warning':
                        window.toastr.warning(message);
                        break;
                    default:
                        window.toastr.info(message);
                }
            } else {
                // 降级到console输出
                console.log(`[InfoBarSettings] 📢 ${type.toUpperCase()}: ${message}`);
            }
        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示Toast失败:', error);
            console.log(`[InfoBarSettings] 📢 ${type.toUpperCase()}: ${message}`);
        }
    }

    /**
     * 显示NPC详情
     */
    async showNPCDetails(npcId) {
        try {
            const npcDB = window.SillyTavernInfobar?.modules?.npcDatabaseManager;
            if (!npcDB) {
                this.showNotification('NPC数据库模块未找到', 'error');
                return;
            }

            const npc = npcDB.db?.npcs?.[npcId];
            if (!npc) {
                this.showNotification('NPC数据未找到', 'error');
                return;
            }

            const modal = this.modal.querySelector('#npc-detail-modal');
            const nameEl = modal.querySelector('#npc-detail-name');
            const infoEl = modal.querySelector('#npc-detail-info');

            nameEl.textContent = npc.name;
            infoEl.innerHTML = this.createNPCDetailHTML(npc);

            modal.style.display = 'flex';

            // 绑定关闭事件
            const closeBtn = modal.querySelector('.npc-detail-close');
            closeBtn.onclick = () => {
                modal.style.display = 'none';
            };

            // 点击背景关闭
            modal.onclick = (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            };

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 显示NPC详情失败:', error);
            this.showNotification('显示NPC详情失败', 'error');
        }
    }

    /**
     * 创建NPC详情HTML
     */
    createNPCDetailHTML(npc) {
        // 获取剧情世界时间（如果可用）
        const lastSeenTime = this.getStoryWorldTime(npc.lastSeen) || '未知';

        // 提取NPC的实际数据字段
        const npcData = {};

        if (npc.fields && Object.keys(npc.fields).length > 0) {
            // 首先检查是否有_原始数据字段（这是主要的数据来源）
            if (npc.fields._原始数据 && typeof npc.fields._原始数据 === 'object') {
                const rawData = npc.fields._原始数据;

                // 定义数字键对应的字段名映射（基于交互对象面板的结构）
                const fieldMapping = {
                    '1': '姓名',
                    '2': '职业/身份',
                    '3': '性格/态度',
                    '4': '关系',
                    '5': '好感度',
                    '6': '背景/描述',
                    '7': '状态',
                    '8': '外貌特征',
                    '9': '服装/装备'
                };

                // 提取原始数据中的字段
                Object.entries(rawData).forEach(([key, value]) => {
                    const fieldName = fieldMapping[key] || `字段${key}`;
                    // 🔧 修复：显示所有字段，包括"无"值的自定义字段
                    if (value && String(value).trim() !== '') {
                        npcData[fieldName] = String(value);
                    }
                });
            }

            // 然后添加其他非技术性字段
            Object.entries(npc.fields).forEach(([key, value]) => {
                if (!this.isTechnicalField(key) && !key.startsWith('_')) {
                    npcData[key] = String(value);
                }
            });
        }

        let dataHtml = '';
        if (Object.keys(npcData).length > 0) {
            dataHtml = Object.entries(npcData).map(([key, value]) => `
                <div class="npc-info-item">
                    <strong>${this.escapeHtml(key)}:</strong>
                    <span>${this.escapeHtml(String(value))}</span>
                </div>
            `).join('');
        } else {
            dataHtml = '<div class="npc-no-data">暂无详细数据</div>';
        }

        return `
            <div class="npc-detail-section">
                <h4>NPC信息</h4>
                <div class="npc-basic-info">
                    <div class="npc-info-item">
                        <strong>出现次数:</strong> ${npc.appearCount || 0}次
                    </div>
                    <div class="npc-info-item">
                        <strong>最后出现:</strong> ${lastSeenTime}
                    </div>
                </div>
            </div>

            <div class="npc-detail-section">
                <h4>详细资料</h4>
                <div class="npc-data-list">
                    ${dataHtml}
                </div>
            </div>
        `;
    }

    /**
     * 判断是否为技术性字段
     */
    isTechnicalField(fieldName) {
        const technicalFields = ['id', 'createdAt', 'updatedAt', 'lastSeen', 'appearCount', 'chatId', 'timestamp'];
        return technicalFields.includes(fieldName) || fieldName.startsWith('_') || fieldName.includes('Id');
    }

    /**
     * 获取剧情世界时间
     */
    getStoryWorldTime(timestamp) {
        if (!timestamp) return null;

        try {
            // 尝试获取SillyTavern的世界时间设置
            const context = SillyTavern?.getContext?.();
            if (context?.worldInfoSettings?.calendar) {
                // 如果有世界时间设置，使用世界时间格式
                // 这里可以根据实际的世界时间系统进行转换
                return '剧情时间：' + new Date(timestamp).toLocaleDateString();
            }

            // 否则使用相对时间描述
            const now = Date.now();
            const diff = now - timestamp;
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            const hours = Math.floor(diff / (1000 * 60 * 60));
            const minutes = Math.floor(diff / (1000 * 60));

            if (days > 0) {
                return `${days}天前`;
            } else if (hours > 0) {
                return `${hours}小时前`;
            } else if (minutes > 0) {
                return `${minutes}分钟前`;
            } else {
                return '刚刚';
            }
        } catch (error) {
            console.warn('[InfoBarSettings] 获取剧情世界时间失败:', error);
            return new Date(timestamp).toLocaleString();
        }
    }

    /**
     * HTML转义
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * 🗑️ 清理AI记忆数据库
     */
    async handleCleanupAIMemoryDatabase() {
        try {
            const confirmed = confirm(
                '⚠️ 确认清理AI记忆数据库？\n\n' +
                '此操作将清空所有AI记忆总结数据，包括：\n' +
                '• 感知层记忆\n' +
                '• 短期记忆\n' +
                '• 长期记忆\n' +
                '• 深度归档\n\n' +
                '此操作不可撤销！'
            );

            if (!confirmed) return;

            console.log('[InfoBarSettings] 🗑️ 开始清理AI记忆数据库...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool?.modules?.aiMemoryDatabaseInjector) {
                throw new Error('AI记忆数据库模块未找到');
            }

            // 清空记忆数据库
            const injector = infoBarTool.modules.aiMemoryDatabaseInjector;
            if (injector.memoryDatabase) {
                injector.memoryDatabase.sensoryMemory.clear();
                injector.memoryDatabase.shortTermMemory.clear();
                injector.memoryDatabase.longTermMemory.clear();
                injector.memoryDatabase.deepArchive.clear();
                console.log('[InfoBarSettings] ✅ AI记忆数据库已清空');
            }

            this.showNotification('✅ AI记忆数据库已成功清空', 'success');
            this.refreshMemoryStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理AI记忆数据库失败:', error);
            this.showNotification('❌ 清理AI记忆数据库失败: ' + error.message, 'error');
        }
    }

    /**
     * 🗑️ 清理向量化数据
     */
    async handleCleanupVectorData() {
        try {
            const confirmed = confirm(
                '⚠️ 确认清理向量化数据？\n\n' +
                '此操作将清空所有向量索引和嵌入数据。\n' +
                '此操作不可撤销！'
            );

            if (!confirmed) return;

            console.log('[InfoBarSettings] 🗑️ 开始清理向量化数据...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool?.modules?.vectorizedMemoryRetrieval) {
                throw new Error('向量化记忆检索模块未找到');
            }

            // 清空向量索引
            const vectorModule = infoBarTool.modules.vectorizedMemoryRetrieval;
            if (vectorModule.vectorIndex) {
                vectorModule.vectorIndex.clear();
            }
            if (vectorModule.embeddingCache) {
                vectorModule.embeddingCache.clear();
            }

            // 清空存储
            const chatId = window.SillyTavern?.getContext?.()?.chatId;
            if (chatId && vectorModule.unifiedDataCore) {
                await vectorModule.unifiedDataCore.deleteData('vector_index', chatId);
                console.log('[InfoBarSettings] ✅ 向量化数据已清空');
            }

            this.showNotification('✅ 向量化数据已成功清空', 'success');
            this.refreshMemoryStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理向量化数据失败:', error);
            this.showNotification('❌ 清理向量化数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 🗑️ 清理深度记忆数据
     */
    async handleCleanupDeepMemory() {
        try {
            const confirmed = confirm(
                '⚠️ 确认清理深度记忆数据？\n\n' +
                '此操作将清空四层记忆架构中的所有数据：\n' +
                '• 感知记忆层\n' +
                '• 短期记忆层\n' +
                '• 长期记忆层\n' +
                '• 深度归档层\n\n' +
                '此操作不可撤销！'
            );

            if (!confirmed) return;

            console.log('[InfoBarSettings] 🗑️ 开始清理深度记忆数据...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool?.modules?.deepMemoryManager) {
                throw new Error('深度记忆管理器模块未找到');
            }

            // 清空深度记忆层
            const deepMemory = infoBarTool.modules.deepMemoryManager;
            if (deepMemory.memoryLayers) {
                deepMemory.memoryLayers.sensory.clear();
                deepMemory.memoryLayers.shortTerm.clear();
                deepMemory.memoryLayers.longTerm.clear();
                deepMemory.memoryLayers.deepArchive.clear();
            }

            // 清空聊天级别记忆
            if (deepMemory.chatMemories) {
                deepMemory.chatMemories.clear();
            }

            // 清空存储
            const chatId = window.SillyTavern?.getContext?.()?.chatId;
            if (chatId && deepMemory.unifiedDataCore) {
                await deepMemory.unifiedDataCore.deleteData('deep_memory', chatId);
                console.log('[InfoBarSettings] ✅ 深度记忆数据已清空');
            }

            this.showNotification('✅ 深度记忆数据已成功清空', 'success');
            this.refreshMemoryStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理深度记忆数据失败:', error);
            this.showNotification('❌ 清理深度记忆数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 🗑️ 清理知识图谱数据
     */
    async handleCleanupKnowledgeGraph() {
        try {
            const confirmed = confirm(
                '⚠️ 确认清理知识图谱数据？\n\n' +
                '此操作将清空所有知识图谱三元组和关系数据。\n' +
                '此操作不可撤销！'
            );

            if (!confirmed) return;

            console.log('[InfoBarSettings] 🗑️ 开始清理知识图谱数据...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool?.modules?.knowledgeGraphManager) {
                throw new Error('知识图谱管理器模块未找到');
            }

            // 清空知识图谱
            const kgManager = infoBarTool.modules.knowledgeGraphManager;
            if (kgManager.graphs) {
                kgManager.graphs.clear();
            }

            // 清空存储
            const chatId = window.SillyTavern?.getContext?.()?.chatId;
            if (chatId && kgManager.unifiedDataCore) {
                await kgManager.unifiedDataCore.deleteData('knowledge_graph', chatId);
                console.log('[InfoBarSettings] ✅ 知识图谱数据已清空');
            }

            this.showNotification('✅ 知识图谱数据已成功清空', 'success');
            this.refreshMemoryStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清理知识图谱数据失败:', error);
            this.showNotification('❌ 清理知识图谱数据失败: ' + error.message, 'error');
        }
    }

    /**
     * 🗑️ 清空所有记忆数据（危险操作）
     */
    async handleCleanupAllMemoryData() {
        try {
            const confirmed = confirm(
                '💥 ⚠️ 危险操作警告 ⚠️ 💥\n\n' +
                '您即将清空所有记忆增强相关数据！\n\n' +
                '包括：\n' +
                '• AI记忆数据库（所有层级）\n' +
                '• 向量化索引和嵌入\n' +
                '• 深度记忆架构数据\n' +
                '• 知识图谱和关系\n' +
                '• 用户画像数据\n' +
                '• 时间线数据\n\n' +
                '此操作不可撤销！\n\n' +
                '请再次确认是否继续？'
            );

            if (!confirmed) return;

            // 二次确认
            const doubleConfirmed = confirm(
                '⚠️ 最后确认 ⚠️\n\n' +
                '您真的要清空所有记忆数据吗？\n' +
                '这将删除所有聊天中的记忆增强数据！\n\n' +
                '点击"确定"继续，点击"取消"放弃操作。'
            );

            if (!doubleConfirmed) return;

            console.log('[InfoBarSettings] 💥 开始清空所有记忆数据...');

            const infoBarTool = window.SillyTavernInfobar;
            if (!infoBarTool?.modules) {
                throw new Error('InfoBar模块未找到');
            }

            const modules = infoBarTool.modules;
            let successCount = 0;
            let failCount = 0;

            // 1. 清理AI记忆数据库
            try {
                if (modules.aiMemoryDatabaseInjector?.memoryDatabase) {
                    const db = modules.aiMemoryDatabaseInjector.memoryDatabase;
                    db.sensoryMemory.clear();
                    db.shortTermMemory.clear();
                    db.longTermMemory.clear();
                    db.deepArchive.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ AI记忆数据库已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理AI记忆数据库失败:', error);
                failCount++;
            }

            // 2. 清理向量化数据
            try {
                if (modules.vectorizedMemoryRetrieval) {
                    const vm = modules.vectorizedMemoryRetrieval;
                    vm.vectorIndex?.clear();
                    vm.embeddingCache?.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ 向量化数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理向量化数据失败:', error);
                failCount++;
            }

            // 3. 清理深度记忆
            try {
                if (modules.deepMemoryManager?.memoryLayers) {
                    const dm = modules.deepMemoryManager;
                    dm.memoryLayers.sensory.clear();
                    dm.memoryLayers.shortTerm.clear();
                    dm.memoryLayers.longTerm.clear();
                    dm.memoryLayers.deepArchive.clear();
                    dm.chatMemories?.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ 深度记忆数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理深度记忆数据失败:', error);
                failCount++;
            }

            // 4. 清理知识图谱
            try {
                if (modules.knowledgeGraphManager?.graphs) {
                    modules.knowledgeGraphManager.graphs.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ 知识图谱数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理知识图谱数据失败:', error);
                failCount++;
            }

            // 5. 清理用户画像
            try {
                if (modules.userProfileManager?.profiles) {
                    modules.userProfileManager.profiles.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ 用户画像数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理用户画像数据失败:', error);
                failCount++;
            }

            // 6. 清理时间线
            try {
                if (modules.timeAwareMemoryManager?.timelines) {
                    modules.timeAwareMemoryManager.timelines.clear();
                    successCount++;
                    console.log('[InfoBarSettings] ✅ 时间线数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理时间线数据失败:', error);
                failCount++;
            }

            // 7. 清理UnifiedDataCore中的记忆数据
            try {
                const chatId = window.SillyTavern?.getContext?.()?.chatId;
                if (chatId && modules.deepMemoryManager?.unifiedDataCore) {
                    const udc = modules.deepMemoryManager.unifiedDataCore;
                    await udc.deleteData('deep_memory', chatId);
                    await udc.deleteData('vector_index', chatId);
                    await udc.deleteData('knowledge_graph', chatId);
                    await udc.deleteData('user_profile', chatId);
                    await udc.deleteData('timeline', chatId);
                    successCount++;
                    console.log('[InfoBarSettings] ✅ UnifiedDataCore记忆数据已清空');
                }
            } catch (error) {
                console.error('[InfoBarSettings] ❌ 清理UnifiedDataCore数据失败:', error);
                failCount++;
            }

            console.log(`[InfoBarSettings] 💥 清理完成: 成功${successCount}项, 失败${failCount}项`);

            if (failCount === 0) {
                this.showNotification(`✅ 所有记忆数据已成功清空（${successCount}项）`, 'success');
            } else {
                this.showNotification(`⚠️ 部分数据清理失败（成功${successCount}项，失败${failCount}项）`, 'error');
            }

            this.refreshMemoryStatus();

        } catch (error) {
            console.error('[InfoBarSettings] ❌ 清空所有记忆数据失败:', error);
            this.showNotification('❌ 清空所有记忆数据失败: ' + error.message, 'error');
        }
    }
}